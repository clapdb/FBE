//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

package com.chronoxor.enums.fbe;

// Fast Binary Encoding Enums final model
public final class FinalModelEnums extends com.chronoxor.fbe.FinalModel
{
    public final FinalModelEnumByte byte0;
    public final FinalModelEnumByte byte1;
    public final FinalModelEnumByte byte2;
    public final FinalModelEnumByte byte3;
    public final FinalModelEnumByte byte4;
    public final FinalModelEnumByte byte5;
    public final FinalModelEnumChar char0;
    public final FinalModelEnumChar char1;
    public final FinalModelEnumChar char2;
    public final FinalModelEnumChar char3;
    public final FinalModelEnumChar char4;
    public final FinalModelEnumChar char5;
    public final FinalModelEnumWChar wchar0;
    public final FinalModelEnumWChar wchar1;
    public final FinalModelEnumWChar wchar2;
    public final FinalModelEnumWChar wchar3;
    public final FinalModelEnumWChar wchar4;
    public final FinalModelEnumWChar wchar5;
    public final FinalModelEnumInt8 int8b0;
    public final FinalModelEnumInt8 int8b1;
    public final FinalModelEnumInt8 int8b2;
    public final FinalModelEnumInt8 int8b3;
    public final FinalModelEnumInt8 int8b4;
    public final FinalModelEnumInt8 int8b5;
    public final FinalModelEnumUInt8 uint8b0;
    public final FinalModelEnumUInt8 uint8b1;
    public final FinalModelEnumUInt8 uint8b2;
    public final FinalModelEnumUInt8 uint8b3;
    public final FinalModelEnumUInt8 uint8b4;
    public final FinalModelEnumUInt8 uint8b5;
    public final FinalModelEnumInt16 int16b0;
    public final FinalModelEnumInt16 int16b1;
    public final FinalModelEnumInt16 int16b2;
    public final FinalModelEnumInt16 int16b3;
    public final FinalModelEnumInt16 int16b4;
    public final FinalModelEnumInt16 int16b5;
    public final FinalModelEnumUInt16 uint16b0;
    public final FinalModelEnumUInt16 uint16b1;
    public final FinalModelEnumUInt16 uint16b2;
    public final FinalModelEnumUInt16 uint16b3;
    public final FinalModelEnumUInt16 uint16b4;
    public final FinalModelEnumUInt16 uint16b5;
    public final FinalModelEnumInt32 int32b0;
    public final FinalModelEnumInt32 int32b1;
    public final FinalModelEnumInt32 int32b2;
    public final FinalModelEnumInt32 int32b3;
    public final FinalModelEnumInt32 int32b4;
    public final FinalModelEnumInt32 int32b5;
    public final FinalModelEnumUInt32 uint32b0;
    public final FinalModelEnumUInt32 uint32b1;
    public final FinalModelEnumUInt32 uint32b2;
    public final FinalModelEnumUInt32 uint32b3;
    public final FinalModelEnumUInt32 uint32b4;
    public final FinalModelEnumUInt32 uint32b5;
    public final FinalModelEnumInt64 int64b0;
    public final FinalModelEnumInt64 int64b1;
    public final FinalModelEnumInt64 int64b2;
    public final FinalModelEnumInt64 int64b3;
    public final FinalModelEnumInt64 int64b4;
    public final FinalModelEnumInt64 int64b5;
    public final FinalModelEnumUInt64 uint64b0;
    public final FinalModelEnumUInt64 uint64b1;
    public final FinalModelEnumUInt64 uint64b2;
    public final FinalModelEnumUInt64 uint64b3;
    public final FinalModelEnumUInt64 uint64b4;
    public final FinalModelEnumUInt64 uint64b5;

    public FinalModelEnums(com.chronoxor.fbe.Buffer buffer, long offset)
    {
        super(buffer, offset);
        byte0 = new FinalModelEnumByte(buffer, 0);
        byte1 = new FinalModelEnumByte(buffer, 0);
        byte2 = new FinalModelEnumByte(buffer, 0);
        byte3 = new FinalModelEnumByte(buffer, 0);
        byte4 = new FinalModelEnumByte(buffer, 0);
        byte5 = new FinalModelEnumByte(buffer, 0);
        char0 = new FinalModelEnumChar(buffer, 0);
        char1 = new FinalModelEnumChar(buffer, 0);
        char2 = new FinalModelEnumChar(buffer, 0);
        char3 = new FinalModelEnumChar(buffer, 0);
        char4 = new FinalModelEnumChar(buffer, 0);
        char5 = new FinalModelEnumChar(buffer, 0);
        wchar0 = new FinalModelEnumWChar(buffer, 0);
        wchar1 = new FinalModelEnumWChar(buffer, 0);
        wchar2 = new FinalModelEnumWChar(buffer, 0);
        wchar3 = new FinalModelEnumWChar(buffer, 0);
        wchar4 = new FinalModelEnumWChar(buffer, 0);
        wchar5 = new FinalModelEnumWChar(buffer, 0);
        int8b0 = new FinalModelEnumInt8(buffer, 0);
        int8b1 = new FinalModelEnumInt8(buffer, 0);
        int8b2 = new FinalModelEnumInt8(buffer, 0);
        int8b3 = new FinalModelEnumInt8(buffer, 0);
        int8b4 = new FinalModelEnumInt8(buffer, 0);
        int8b5 = new FinalModelEnumInt8(buffer, 0);
        uint8b0 = new FinalModelEnumUInt8(buffer, 0);
        uint8b1 = new FinalModelEnumUInt8(buffer, 0);
        uint8b2 = new FinalModelEnumUInt8(buffer, 0);
        uint8b3 = new FinalModelEnumUInt8(buffer, 0);
        uint8b4 = new FinalModelEnumUInt8(buffer, 0);
        uint8b5 = new FinalModelEnumUInt8(buffer, 0);
        int16b0 = new FinalModelEnumInt16(buffer, 0);
        int16b1 = new FinalModelEnumInt16(buffer, 0);
        int16b2 = new FinalModelEnumInt16(buffer, 0);
        int16b3 = new FinalModelEnumInt16(buffer, 0);
        int16b4 = new FinalModelEnumInt16(buffer, 0);
        int16b5 = new FinalModelEnumInt16(buffer, 0);
        uint16b0 = new FinalModelEnumUInt16(buffer, 0);
        uint16b1 = new FinalModelEnumUInt16(buffer, 0);
        uint16b2 = new FinalModelEnumUInt16(buffer, 0);
        uint16b3 = new FinalModelEnumUInt16(buffer, 0);
        uint16b4 = new FinalModelEnumUInt16(buffer, 0);
        uint16b5 = new FinalModelEnumUInt16(buffer, 0);
        int32b0 = new FinalModelEnumInt32(buffer, 0);
        int32b1 = new FinalModelEnumInt32(buffer, 0);
        int32b2 = new FinalModelEnumInt32(buffer, 0);
        int32b3 = new FinalModelEnumInt32(buffer, 0);
        int32b4 = new FinalModelEnumInt32(buffer, 0);
        int32b5 = new FinalModelEnumInt32(buffer, 0);
        uint32b0 = new FinalModelEnumUInt32(buffer, 0);
        uint32b1 = new FinalModelEnumUInt32(buffer, 0);
        uint32b2 = new FinalModelEnumUInt32(buffer, 0);
        uint32b3 = new FinalModelEnumUInt32(buffer, 0);
        uint32b4 = new FinalModelEnumUInt32(buffer, 0);
        uint32b5 = new FinalModelEnumUInt32(buffer, 0);
        int64b0 = new FinalModelEnumInt64(buffer, 0);
        int64b1 = new FinalModelEnumInt64(buffer, 0);
        int64b2 = new FinalModelEnumInt64(buffer, 0);
        int64b3 = new FinalModelEnumInt64(buffer, 0);
        int64b4 = new FinalModelEnumInt64(buffer, 0);
        int64b5 = new FinalModelEnumInt64(buffer, 0);
        uint64b0 = new FinalModelEnumUInt64(buffer, 0);
        uint64b1 = new FinalModelEnumUInt64(buffer, 0);
        uint64b2 = new FinalModelEnumUInt64(buffer, 0);
        uint64b3 = new FinalModelEnumUInt64(buffer, 0);
        uint64b4 = new FinalModelEnumUInt64(buffer, 0);
        uint64b5 = new FinalModelEnumUInt64(buffer, 0);
    }

    // Get the allocation size
    public long fbeAllocationSize(com.chronoxor.enums.Enums fbeValue)
    {
        long fbeResult = 0
            + byte0.fbeAllocationSize(fbeValue.byte0)
            + byte1.fbeAllocationSize(fbeValue.byte1)
            + byte2.fbeAllocationSize(fbeValue.byte2)
            + byte3.fbeAllocationSize(fbeValue.byte3)
            + byte4.fbeAllocationSize(fbeValue.byte4)
            + byte5.fbeAllocationSize(fbeValue.byte5)
            + char0.fbeAllocationSize(fbeValue.char0)
            + char1.fbeAllocationSize(fbeValue.char1)
            + char2.fbeAllocationSize(fbeValue.char2)
            + char3.fbeAllocationSize(fbeValue.char3)
            + char4.fbeAllocationSize(fbeValue.char4)
            + char5.fbeAllocationSize(fbeValue.char5)
            + wchar0.fbeAllocationSize(fbeValue.wchar0)
            + wchar1.fbeAllocationSize(fbeValue.wchar1)
            + wchar2.fbeAllocationSize(fbeValue.wchar2)
            + wchar3.fbeAllocationSize(fbeValue.wchar3)
            + wchar4.fbeAllocationSize(fbeValue.wchar4)
            + wchar5.fbeAllocationSize(fbeValue.wchar5)
            + int8b0.fbeAllocationSize(fbeValue.int8b0)
            + int8b1.fbeAllocationSize(fbeValue.int8b1)
            + int8b2.fbeAllocationSize(fbeValue.int8b2)
            + int8b3.fbeAllocationSize(fbeValue.int8b3)
            + int8b4.fbeAllocationSize(fbeValue.int8b4)
            + int8b5.fbeAllocationSize(fbeValue.int8b5)
            + uint8b0.fbeAllocationSize(fbeValue.uint8b0)
            + uint8b1.fbeAllocationSize(fbeValue.uint8b1)
            + uint8b2.fbeAllocationSize(fbeValue.uint8b2)
            + uint8b3.fbeAllocationSize(fbeValue.uint8b3)
            + uint8b4.fbeAllocationSize(fbeValue.uint8b4)
            + uint8b5.fbeAllocationSize(fbeValue.uint8b5)
            + int16b0.fbeAllocationSize(fbeValue.int16b0)
            + int16b1.fbeAllocationSize(fbeValue.int16b1)
            + int16b2.fbeAllocationSize(fbeValue.int16b2)
            + int16b3.fbeAllocationSize(fbeValue.int16b3)
            + int16b4.fbeAllocationSize(fbeValue.int16b4)
            + int16b5.fbeAllocationSize(fbeValue.int16b5)
            + uint16b0.fbeAllocationSize(fbeValue.uint16b0)
            + uint16b1.fbeAllocationSize(fbeValue.uint16b1)
            + uint16b2.fbeAllocationSize(fbeValue.uint16b2)
            + uint16b3.fbeAllocationSize(fbeValue.uint16b3)
            + uint16b4.fbeAllocationSize(fbeValue.uint16b4)
            + uint16b5.fbeAllocationSize(fbeValue.uint16b5)
            + int32b0.fbeAllocationSize(fbeValue.int32b0)
            + int32b1.fbeAllocationSize(fbeValue.int32b1)
            + int32b2.fbeAllocationSize(fbeValue.int32b2)
            + int32b3.fbeAllocationSize(fbeValue.int32b3)
            + int32b4.fbeAllocationSize(fbeValue.int32b4)
            + int32b5.fbeAllocationSize(fbeValue.int32b5)
            + uint32b0.fbeAllocationSize(fbeValue.uint32b0)
            + uint32b1.fbeAllocationSize(fbeValue.uint32b1)
            + uint32b2.fbeAllocationSize(fbeValue.uint32b2)
            + uint32b3.fbeAllocationSize(fbeValue.uint32b3)
            + uint32b4.fbeAllocationSize(fbeValue.uint32b4)
            + uint32b5.fbeAllocationSize(fbeValue.uint32b5)
            + int64b0.fbeAllocationSize(fbeValue.int64b0)
            + int64b1.fbeAllocationSize(fbeValue.int64b1)
            + int64b2.fbeAllocationSize(fbeValue.int64b2)
            + int64b3.fbeAllocationSize(fbeValue.int64b3)
            + int64b4.fbeAllocationSize(fbeValue.int64b4)
            + int64b5.fbeAllocationSize(fbeValue.int64b5)
            + uint64b0.fbeAllocationSize(fbeValue.uint64b0)
            + uint64b1.fbeAllocationSize(fbeValue.uint64b1)
            + uint64b2.fbeAllocationSize(fbeValue.uint64b2)
            + uint64b3.fbeAllocationSize(fbeValue.uint64b3)
            + uint64b4.fbeAllocationSize(fbeValue.uint64b4)
            + uint64b5.fbeAllocationSize(fbeValue.uint64b5)
            ;
        return fbeResult;
    }

    // Get the final type
    public static final long fbeTypeConst = 1;
    public long fbeType() { return fbeTypeConst; }

    // Check if the struct value is valid
    @Override
    public long verify()
    {
        _buffer.shift(fbeOffset());
        long fbeResult = verifyFields();
        _buffer.unshift(fbeOffset());
        return fbeResult;
    }

    // Check if the struct fields are valid
    public long verifyFields()
    {
        long fbeCurrentOffset = 0;
        long fbeFieldSize = 0;

        byte0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = byte0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        byte1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = byte1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        byte2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = byte2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        byte3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = byte3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        byte4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = byte4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        byte5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = byte5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        char0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = char0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        char1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = char1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        char2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = char2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        char3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = char3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        char4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = char4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        char5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = char5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        wchar0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = wchar0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        wchar1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = wchar1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        wchar2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = wchar2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        wchar3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = wchar3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        wchar4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = wchar4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        wchar5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = wchar5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int8b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int8b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int8b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int8b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int8b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int8b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int8b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int8b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int8b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int8b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int8b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int8b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint8b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint8b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint8b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint8b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint8b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint8b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint8b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint8b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint8b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint8b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint8b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint8b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int16b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int16b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int16b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int16b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int16b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int16b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int16b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int16b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int16b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int16b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int16b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int16b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint16b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint16b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint16b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint16b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint16b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint16b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint16b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint16b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint16b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint16b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint16b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint16b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int32b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int32b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int32b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int32b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int32b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int32b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int32b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int32b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int32b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int32b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int32b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int32b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint32b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint32b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint32b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint32b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint32b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint32b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint32b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint32b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint32b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint32b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint32b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint32b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int64b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int64b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int64b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int64b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int64b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int64b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int64b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int64b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int64b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int64b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        int64b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = int64b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint64b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint64b0.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint64b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint64b1.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint64b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint64b2.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint64b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint64b3.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint64b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint64b4.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        uint64b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = uint64b5.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        return fbeCurrentOffset;
    }

    // Get the struct value
    public com.chronoxor.enums.Enums get(com.chronoxor.fbe.Size fbeSize) { return get(fbeSize, new com.chronoxor.enums.Enums()); }
    public com.chronoxor.enums.Enums get(com.chronoxor.fbe.Size fbeSize, com.chronoxor.enums.Enums fbeValue)
    {
        _buffer.shift(fbeOffset());
        fbeSize.value = getFields(fbeValue);
        _buffer.unshift(fbeOffset());
        return fbeValue;
    }

    // Get the struct fields values
    public long getFields(com.chronoxor.enums.Enums fbeValue)
    {
        long fbeCurrentOffset = 0;
        long fbeCurrentSize = 0;
        var fbeFieldSize = new com.chronoxor.fbe.Size(0);

        byte0.fbeOffset(fbeCurrentOffset);
        fbeValue.byte0 = byte0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte1.fbeOffset(fbeCurrentOffset);
        fbeValue.byte1 = byte1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte2.fbeOffset(fbeCurrentOffset);
        fbeValue.byte2 = byte2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte3.fbeOffset(fbeCurrentOffset);
        fbeValue.byte3 = byte3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte4.fbeOffset(fbeCurrentOffset);
        fbeValue.byte4 = byte4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte5.fbeOffset(fbeCurrentOffset);
        fbeValue.byte5 = byte5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char0.fbeOffset(fbeCurrentOffset);
        fbeValue.char0 = char0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char1.fbeOffset(fbeCurrentOffset);
        fbeValue.char1 = char1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char2.fbeOffset(fbeCurrentOffset);
        fbeValue.char2 = char2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char3.fbeOffset(fbeCurrentOffset);
        fbeValue.char3 = char3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char4.fbeOffset(fbeCurrentOffset);
        fbeValue.char4 = char4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char5.fbeOffset(fbeCurrentOffset);
        fbeValue.char5 = char5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar0.fbeOffset(fbeCurrentOffset);
        fbeValue.wchar0 = wchar0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar1.fbeOffset(fbeCurrentOffset);
        fbeValue.wchar1 = wchar1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar2.fbeOffset(fbeCurrentOffset);
        fbeValue.wchar2 = wchar2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar3.fbeOffset(fbeCurrentOffset);
        fbeValue.wchar3 = wchar3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar4.fbeOffset(fbeCurrentOffset);
        fbeValue.wchar4 = wchar4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar5.fbeOffset(fbeCurrentOffset);
        fbeValue.wchar5 = wchar5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b0.fbeOffset(fbeCurrentOffset);
        fbeValue.int8b0 = int8b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b1.fbeOffset(fbeCurrentOffset);
        fbeValue.int8b1 = int8b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b2.fbeOffset(fbeCurrentOffset);
        fbeValue.int8b2 = int8b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b3.fbeOffset(fbeCurrentOffset);
        fbeValue.int8b3 = int8b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b4.fbeOffset(fbeCurrentOffset);
        fbeValue.int8b4 = int8b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b5.fbeOffset(fbeCurrentOffset);
        fbeValue.int8b5 = int8b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b0.fbeOffset(fbeCurrentOffset);
        fbeValue.uint8b0 = uint8b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b1.fbeOffset(fbeCurrentOffset);
        fbeValue.uint8b1 = uint8b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b2.fbeOffset(fbeCurrentOffset);
        fbeValue.uint8b2 = uint8b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b3.fbeOffset(fbeCurrentOffset);
        fbeValue.uint8b3 = uint8b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b4.fbeOffset(fbeCurrentOffset);
        fbeValue.uint8b4 = uint8b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b5.fbeOffset(fbeCurrentOffset);
        fbeValue.uint8b5 = uint8b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b0.fbeOffset(fbeCurrentOffset);
        fbeValue.int16b0 = int16b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b1.fbeOffset(fbeCurrentOffset);
        fbeValue.int16b1 = int16b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b2.fbeOffset(fbeCurrentOffset);
        fbeValue.int16b2 = int16b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b3.fbeOffset(fbeCurrentOffset);
        fbeValue.int16b3 = int16b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b4.fbeOffset(fbeCurrentOffset);
        fbeValue.int16b4 = int16b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b5.fbeOffset(fbeCurrentOffset);
        fbeValue.int16b5 = int16b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b0.fbeOffset(fbeCurrentOffset);
        fbeValue.uint16b0 = uint16b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b1.fbeOffset(fbeCurrentOffset);
        fbeValue.uint16b1 = uint16b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b2.fbeOffset(fbeCurrentOffset);
        fbeValue.uint16b2 = uint16b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b3.fbeOffset(fbeCurrentOffset);
        fbeValue.uint16b3 = uint16b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b4.fbeOffset(fbeCurrentOffset);
        fbeValue.uint16b4 = uint16b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b5.fbeOffset(fbeCurrentOffset);
        fbeValue.uint16b5 = uint16b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b0.fbeOffset(fbeCurrentOffset);
        fbeValue.int32b0 = int32b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b1.fbeOffset(fbeCurrentOffset);
        fbeValue.int32b1 = int32b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b2.fbeOffset(fbeCurrentOffset);
        fbeValue.int32b2 = int32b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b3.fbeOffset(fbeCurrentOffset);
        fbeValue.int32b3 = int32b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b4.fbeOffset(fbeCurrentOffset);
        fbeValue.int32b4 = int32b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b5.fbeOffset(fbeCurrentOffset);
        fbeValue.int32b5 = int32b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b0.fbeOffset(fbeCurrentOffset);
        fbeValue.uint32b0 = uint32b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b1.fbeOffset(fbeCurrentOffset);
        fbeValue.uint32b1 = uint32b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b2.fbeOffset(fbeCurrentOffset);
        fbeValue.uint32b2 = uint32b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b3.fbeOffset(fbeCurrentOffset);
        fbeValue.uint32b3 = uint32b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b4.fbeOffset(fbeCurrentOffset);
        fbeValue.uint32b4 = uint32b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b5.fbeOffset(fbeCurrentOffset);
        fbeValue.uint32b5 = uint32b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b0.fbeOffset(fbeCurrentOffset);
        fbeValue.int64b0 = int64b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b1.fbeOffset(fbeCurrentOffset);
        fbeValue.int64b1 = int64b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b2.fbeOffset(fbeCurrentOffset);
        fbeValue.int64b2 = int64b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b3.fbeOffset(fbeCurrentOffset);
        fbeValue.int64b3 = int64b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b4.fbeOffset(fbeCurrentOffset);
        fbeValue.int64b4 = int64b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b5.fbeOffset(fbeCurrentOffset);
        fbeValue.int64b5 = int64b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b0.fbeOffset(fbeCurrentOffset);
        fbeValue.uint64b0 = uint64b0.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b1.fbeOffset(fbeCurrentOffset);
        fbeValue.uint64b1 = uint64b1.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b2.fbeOffset(fbeCurrentOffset);
        fbeValue.uint64b2 = uint64b2.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b3.fbeOffset(fbeCurrentOffset);
        fbeValue.uint64b3 = uint64b3.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b4.fbeOffset(fbeCurrentOffset);
        fbeValue.uint64b4 = uint64b4.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b5.fbeOffset(fbeCurrentOffset);
        fbeValue.uint64b5 = uint64b5.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        return fbeCurrentSize;
    }

    // Set the struct value
    public long set(com.chronoxor.enums.Enums fbeValue)
    {
        _buffer.shift(fbeOffset());
        long fbeSize = setFields(fbeValue);
        _buffer.unshift(fbeOffset());
        return fbeSize;
    }

    // Set the struct fields values
    public long setFields(com.chronoxor.enums.Enums fbeValue)
    {
        long fbeCurrentOffset = 0;
        long fbeCurrentSize = 0;
        var fbeFieldSize = new com.chronoxor.fbe.Size();

        byte0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = byte0.set(fbeValue.byte0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = byte1.set(fbeValue.byte1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = byte2.set(fbeValue.byte2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = byte3.set(fbeValue.byte3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = byte4.set(fbeValue.byte4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        byte5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = byte5.set(fbeValue.byte5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = char0.set(fbeValue.char0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = char1.set(fbeValue.char1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = char2.set(fbeValue.char2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = char3.set(fbeValue.char3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = char4.set(fbeValue.char4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        char5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = char5.set(fbeValue.char5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = wchar0.set(fbeValue.wchar0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = wchar1.set(fbeValue.wchar1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = wchar2.set(fbeValue.wchar2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = wchar3.set(fbeValue.wchar3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = wchar4.set(fbeValue.wchar4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        wchar5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = wchar5.set(fbeValue.wchar5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int8b0.set(fbeValue.int8b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int8b1.set(fbeValue.int8b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int8b2.set(fbeValue.int8b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int8b3.set(fbeValue.int8b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int8b4.set(fbeValue.int8b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int8b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int8b5.set(fbeValue.int8b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint8b0.set(fbeValue.uint8b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint8b1.set(fbeValue.uint8b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint8b2.set(fbeValue.uint8b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint8b3.set(fbeValue.uint8b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint8b4.set(fbeValue.uint8b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint8b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint8b5.set(fbeValue.uint8b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int16b0.set(fbeValue.int16b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int16b1.set(fbeValue.int16b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int16b2.set(fbeValue.int16b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int16b3.set(fbeValue.int16b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int16b4.set(fbeValue.int16b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int16b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int16b5.set(fbeValue.int16b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint16b0.set(fbeValue.uint16b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint16b1.set(fbeValue.uint16b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint16b2.set(fbeValue.uint16b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint16b3.set(fbeValue.uint16b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint16b4.set(fbeValue.uint16b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint16b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint16b5.set(fbeValue.uint16b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int32b0.set(fbeValue.int32b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int32b1.set(fbeValue.int32b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int32b2.set(fbeValue.int32b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int32b3.set(fbeValue.int32b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int32b4.set(fbeValue.int32b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int32b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int32b5.set(fbeValue.int32b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint32b0.set(fbeValue.uint32b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint32b1.set(fbeValue.uint32b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint32b2.set(fbeValue.uint32b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint32b3.set(fbeValue.uint32b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint32b4.set(fbeValue.uint32b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint32b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint32b5.set(fbeValue.uint32b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int64b0.set(fbeValue.int64b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int64b1.set(fbeValue.int64b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int64b2.set(fbeValue.int64b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int64b3.set(fbeValue.int64b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int64b4.set(fbeValue.int64b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        int64b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = int64b5.set(fbeValue.int64b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b0.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint64b0.set(fbeValue.uint64b0);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b1.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint64b1.set(fbeValue.uint64b1);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b2.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint64b2.set(fbeValue.uint64b2);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b3.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint64b3.set(fbeValue.uint64b3);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b4.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint64b4.set(fbeValue.uint64b4);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        uint64b5.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = uint64b5.set(fbeValue.uint64b5);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        return fbeCurrentSize;
    }
}
