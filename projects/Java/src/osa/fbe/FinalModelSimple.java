//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

package osa.fbe;

// Fast Binary Encoding Simple final model
public final class FinalModelSimple extends fbe.FinalModel
{
    public final fbe.FinalModelString name;
    public final fbe.FinalModelInt32 depth;
    public final FinalModelArrayExtra sa;
    public final FinalModelSex sex;

    public FinalModelSimple(fbe.Buffer buffer, long offset)
    {
        super(buffer, offset);
        name = new fbe.FinalModelString(buffer, 0);
        depth = new fbe.FinalModelInt32(buffer, 0);
        sa = new FinalModelArrayExtra(buffer, 0, 1);
        sex = new FinalModelSex(buffer, 0);
    }

    // Get the allocation size
    public long fbeAllocationSize(osa.Simple fbeValue)
    {
        long fbeResult = 0
            + name.fbeAllocationSize(fbeValue.name)
            + depth.fbeAllocationSize(fbeValue.depth)
            + sa.fbeAllocationSize(fbeValue.sa)
            + sex.fbeAllocationSize(fbeValue.sex)
            ;
        return fbeResult;
    }

    // Get the final type
    public static final long fbeTypeConst = 2;
    public long fbeType() { return fbeTypeConst; }

    // Check if the struct value is valid
    @Override
    public long verify()
    {
        _buffer.shift(fbeOffset());
        long fbeResult = verifyFields();
        _buffer.unshift(fbeOffset());
        return fbeResult;
    }

    // Check if the struct fields are valid
    public long verifyFields()
    {
        long fbeCurrentOffset = 0;
        long fbeFieldSize = 0;

        name.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = name.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        depth.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = depth.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        sa.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = sa.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        sex.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = sex.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        return fbeCurrentOffset;
    }

    // Get the struct value
    public osa.Simple get(fbe.Size fbeSize) { return get(fbeSize, new osa.Simple()); }
    public osa.Simple get(fbe.Size fbeSize, osa.Simple fbeValue)
    {
        _buffer.shift(fbeOffset());
        fbeSize.value = getFields(fbeValue);
        _buffer.unshift(fbeOffset());
        return fbeValue;
    }

    // Get the struct fields values
    public long getFields(osa.Simple fbeValue)
    {
        long fbeCurrentOffset = 0;
        long fbeCurrentSize = 0;
        var fbeFieldSize = new fbe.Size(0);

        name.fbeOffset(fbeCurrentOffset);
        fbeValue.name = name.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        depth.fbeOffset(fbeCurrentOffset);
        fbeValue.depth = depth.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        sa.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = sa.get(fbeValue.sa);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        sex.fbeOffset(fbeCurrentOffset);
        fbeValue.sex = sex.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        return fbeCurrentSize;
    }

    // Set the struct value
    public long set(osa.Simple fbeValue)
    {
        _buffer.shift(fbeOffset());
        long fbeSize = setFields(fbeValue);
        _buffer.unshift(fbeOffset());
        return fbeSize;
    }

    // Set the struct fields values
    public long setFields(osa.Simple fbeValue)
    {
        long fbeCurrentOffset = 0;
        long fbeCurrentSize = 0;
        var fbeFieldSize = new fbe.Size();

        name.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = name.set(fbeValue.name);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        depth.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = depth.set(fbeValue.depth);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        sa.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = sa.set(fbeValue.sa);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        sex.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = sex.set(fbeValue.sex);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        return fbeCurrentSize;
    }
}
