//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

package osa.fbe;

// Fast Binary Encoding Extra final model
public final class FinalModelExtra extends fbe.FinalModel
{
    public final fbe.FinalModelString name;
    public final fbe.FinalModelString detail;
    public final FinalModelSex sex;
    public final FinalModelMyFLags flag;

    public FinalModelExtra(fbe.Buffer buffer, long offset)
    {
        super(buffer, offset);
        name = new fbe.FinalModelString(buffer, 0);
        detail = new fbe.FinalModelString(buffer, 0);
        sex = new FinalModelSex(buffer, 0);
        flag = new FinalModelMyFLags(buffer, 0);
    }

    // Get the allocation size
    public long fbeAllocationSize(osa.Extra fbeValue)
    {
        long fbeResult = 0
            + name.fbeAllocationSize(fbeValue.name)
            + detail.fbeAllocationSize(fbeValue.detail)
            + sex.fbeAllocationSize(fbeValue.sex)
            + flag.fbeAllocationSize(fbeValue.flag)
            ;
        return fbeResult;
    }

    // Get the final type
    public static final long fbeTypeConst = 1;
    public long fbeType() { return fbeTypeConst; }

    // Check if the struct value is valid
    @Override
    public long verify()
    {
        _buffer.shift(fbeOffset());
        long fbeResult = verifyFields();
        _buffer.unshift(fbeOffset());
        return fbeResult;
    }

    // Check if the struct fields are valid
    public long verifyFields()
    {
        long fbeCurrentOffset = 0;
        long fbeFieldSize = 0;

        name.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = name.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        detail.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = detail.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        sex.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = sex.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        flag.fbeOffset(fbeCurrentOffset);
        fbeFieldSize = flag.verify();
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE;
        fbeCurrentOffset += fbeFieldSize;

        return fbeCurrentOffset;
    }

    // Get the struct value
    public osa.Extra get(fbe.Size fbeSize) { return get(fbeSize, new osa.Extra()); }
    public osa.Extra get(fbe.Size fbeSize, osa.Extra fbeValue)
    {
        _buffer.shift(fbeOffset());
        fbeSize.value = getFields(fbeValue);
        _buffer.unshift(fbeOffset());
        return fbeValue;
    }

    // Get the struct fields values
    public long getFields(osa.Extra fbeValue)
    {
        long fbeCurrentOffset = 0;
        long fbeCurrentSize = 0;
        var fbeFieldSize = new fbe.Size(0);

        name.fbeOffset(fbeCurrentOffset);
        fbeValue.name = name.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        detail.fbeOffset(fbeCurrentOffset);
        fbeValue.detail = detail.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        sex.fbeOffset(fbeCurrentOffset);
        fbeValue.sex = sex.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        flag.fbeOffset(fbeCurrentOffset);
        fbeValue.flag = flag.get(fbeFieldSize);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        return fbeCurrentSize;
    }

    // Set the struct value
    public long set(osa.Extra fbeValue)
    {
        _buffer.shift(fbeOffset());
        long fbeSize = setFields(fbeValue);
        _buffer.unshift(fbeOffset());
        return fbeSize;
    }

    // Set the struct fields values
    public long setFields(osa.Extra fbeValue)
    {
        long fbeCurrentOffset = 0;
        long fbeCurrentSize = 0;
        var fbeFieldSize = new fbe.Size();

        name.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = name.set(fbeValue.name);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        detail.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = detail.set(fbeValue.detail);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        sex.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = sex.set(fbeValue.sex);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        flag.fbeOffset(fbeCurrentOffset);
        fbeFieldSize.value = flag.set(fbeValue.flag);
        fbeCurrentOffset += fbeFieldSize.value;
        fbeCurrentSize += fbeFieldSize.value;

        return fbeCurrentSize;
    }
}
