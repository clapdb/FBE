//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

package osa;

public enum MyFLagsEnum
{
    flag0((int)0x00 + 0)
    , flag1((int)0x01 + 0)
    , flag2((int)0x02 + 0)
    ;

    private int value;

    MyFLagsEnum(int value) { this.value = (int)value; }
    MyFLagsEnum(MyFLagsEnum value) { this.value = value.value; }

    public int getRaw() { return value; }

    public static MyFLagsEnum mapValue(int value) { return mapping.get(value); }

    @Override
    public String toString()
    {
        if (this == flag0) return "flag0";
        if (this == flag1) return "flag1";
        if (this == flag2) return "flag2";
        return "<unknown>";
    }

    private static final java.util.Map<Integer, MyFLagsEnum> mapping = new java.util.HashMap<>();
    static
    {
        for (var value : MyFLagsEnum.values())
            mapping.put(value.value, value);
    }
}
