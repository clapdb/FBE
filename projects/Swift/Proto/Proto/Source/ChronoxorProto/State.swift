//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation

public struct State: Comparable, Hashable, Codable {
    typealias RawValue = UInt8
    public static let unknown = State(value: .unknown)
    public static let invalid = State(value: .invalid)
    public static let initialized = State(value: .initialized)
    public static let calculated = State(value: .calculated)
    public static let broken = State(value: .broken)
    public static let good = State(value: .good)
    public static let bad = State(value: .bad)

    public static func fromSet(set: StateEnum) -> State {
        var result = NSNumber(value: 0).intValue
        if set.contains(State.unknown.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.unknown.raw).intValue
        }
        if set.contains(State.invalid.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.invalid.raw).intValue
        }
        if set.contains(State.initialized.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.initialized.raw).intValue
        }
        if set.contains(State.calculated.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.calculated.raw).intValue
        }
        if set.contains(State.broken.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.broken.raw).intValue
        }
        if set.contains(State.good.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.good.raw).intValue
        }
        if set.contains(State.bad.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: State.bad.raw).intValue
        }
        return State(value: NSNumber(value: result).uint8Value)
    }

    public private(set) var value: StateEnum?

    public private(set) var raw: UInt8 = 0

    public init() { setDefaults() }
    public init(value: UInt8) { setEnum(value: value) }
    public init(value: StateEnum) { setEnum(value: value) }
    public init(value: State) { setEnum(value: value) }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        setEnum(value: try container.decode(RawValue.self))
    }

    public mutating func setDefaults() { setEnum(value: 0) }

    public mutating func setEnum(value: UInt8) { self.raw = value; self.value = StateEnum.mapValue(value: value) }
    public mutating func setEnum(value: StateEnum) { self.raw = value.rawValue; self.value = value }
    public mutating func setEnum(value: State) { self.raw = value.raw; self.value = value.value }

    public func hasFlags(flags: UInt8) -> Bool { return (NSNumber(value: raw).intValue & NSNumber(value: flags).intValue != 0) && ((NSNumber(value: raw).intValue & NSNumber(value: flags).intValue) == NSNumber(value: flags).intValue) }
    public func hasFlags(flags: StateEnum) -> Bool { return hasFlags(flags: flags.rawValue) }
    public func hasFlags(flags: State) -> Bool { return hasFlags(flags: flags.raw) }

    public mutating func setFlags(flags: UInt8) -> State { setEnum(value: NSNumber(value: NSNumber(value: raw).intValue | NSNumber(value: flags).intValue).uint8Value); return self }
    public mutating func setFlags(flags: StateEnum) -> State { _ = setFlags(flags: flags.rawValue); return self }
    public mutating func setFlags(flags: State) -> State { _ = setFlags(flags: flags.raw); return self }

    public mutating func removeFlags(flags: UInt8) -> State { setEnum(value: NSNumber(value: NSNumber(value: raw).intValue | NSNumber(value: flags).intValue.byteSwapped).uint8Value); return self }
    public mutating func removeFlags(flags: StateEnum) -> State { _ = removeFlags(flags: flags.rawValue); return self }
    public mutating func removeFlags(flags: State) -> State { _ = removeFlags(flags: flags.raw); return self }

    public var allSet: StateEnum { return .allSet }
    public var noneSet: StateEnum { return .noneSet }
    public var currentSet: StateEnum { return value!.currentSet }

    public static func < (lhs: State, rhs: State) -> Bool {
        return lhs.raw < rhs.raw
    }

    public static func == (lhs: State, rhs: State) -> Bool {
        return lhs.raw == rhs.raw
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(raw)
    }

    public var description: String {
        var sb = String()
        var first = true
        if hasFlags(flags: State.unknown.raw) {
            sb.append(first ? "" : "|"); sb.append("unknown")
            first = false
        }
        if hasFlags(flags: State.invalid.raw) {
            sb.append(first ? "" : "|"); sb.append("invalid")
            first = false
        }
        if hasFlags(flags: State.initialized.raw) {
            sb.append(first ? "" : "|"); sb.append("initialized")
            first = false
        }
        if hasFlags(flags: State.calculated.raw) {
            sb.append(first ? "" : "|"); sb.append("calculated")
            first = false
        }
        if hasFlags(flags: State.broken.raw) {
            sb.append(first ? "" : "|"); sb.append("broken")
            first = false
        }
        if hasFlags(flags: State.good.raw) {
            sb.append(first ? "" : "|"); sb.append("good")
            first = false
        }
        if hasFlags(flags: State.bad.raw) {
            sb.append(first ? "" : "|"); sb.append("bad")
            first = false
        }
        return sb
    }
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(raw)
    }

    public func toJson() throws -> String {
        return String(data: try JSONEncoder().encode(self), encoding: .utf8)!
    }

    public static func fromJson(_ json: String) throws -> State {
        return try JSONDecoder().decode(State.self, from: json.data(using: .utf8)!)
    }
}
