//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe

// Fast Binary Encoding Enums field model
public class FieldModelEnums: FieldModel {

    public var _buffer: Buffer
    public var _offset: Int

    let byte0: FieldModelEnumByte
    let byte1: FieldModelEnumByte
    let byte2: FieldModelEnumByte
    let byte3: FieldModelEnumByte
    let byte4: FieldModelEnumByte
    let byte5: FieldModelEnumByte
    let char0: FieldModelEnumChar
    let char1: FieldModelEnumChar
    let char2: FieldModelEnumChar
    let char3: FieldModelEnumChar
    let char4: FieldModelEnumChar
    let char5: FieldModelEnumChar
    let wchar0: FieldModelEnumWChar
    let wchar1: FieldModelEnumWChar
    let wchar2: FieldModelEnumWChar
    let wchar3: FieldModelEnumWChar
    let wchar4: FieldModelEnumWChar
    let wchar5: FieldModelEnumWChar
    let int8b0: FieldModelEnumInt8
    let int8b1: FieldModelEnumInt8
    let int8b2: FieldModelEnumInt8
    let int8b3: FieldModelEnumInt8
    let int8b4: FieldModelEnumInt8
    let int8b5: FieldModelEnumInt8
    let uint8b0: FieldModelEnumUInt8
    let uint8b1: FieldModelEnumUInt8
    let uint8b2: FieldModelEnumUInt8
    let uint8b3: FieldModelEnumUInt8
    let uint8b4: FieldModelEnumUInt8
    let uint8b5: FieldModelEnumUInt8
    let int16b0: FieldModelEnumInt16
    let int16b1: FieldModelEnumInt16
    let int16b2: FieldModelEnumInt16
    let int16b3: FieldModelEnumInt16
    let int16b4: FieldModelEnumInt16
    let int16b5: FieldModelEnumInt16
    let uint16b0: FieldModelEnumUInt16
    let uint16b1: FieldModelEnumUInt16
    let uint16b2: FieldModelEnumUInt16
    let uint16b3: FieldModelEnumUInt16
    let uint16b4: FieldModelEnumUInt16
    let uint16b5: FieldModelEnumUInt16
    let int32b0: FieldModelEnumInt32
    let int32b1: FieldModelEnumInt32
    let int32b2: FieldModelEnumInt32
    let int32b3: FieldModelEnumInt32
    let int32b4: FieldModelEnumInt32
    let int32b5: FieldModelEnumInt32
    let uint32b0: FieldModelEnumUInt32
    let uint32b1: FieldModelEnumUInt32
    let uint32b2: FieldModelEnumUInt32
    let uint32b3: FieldModelEnumUInt32
    let uint32b4: FieldModelEnumUInt32
    let uint32b5: FieldModelEnumUInt32
    let int64b0: FieldModelEnumInt64
    let int64b1: FieldModelEnumInt64
    let int64b2: FieldModelEnumInt64
    let int64b3: FieldModelEnumInt64
    let int64b4: FieldModelEnumInt64
    let int64b5: FieldModelEnumInt64
    let uint64b0: FieldModelEnumUInt64
    let uint64b1: FieldModelEnumUInt64
    let uint64b2: FieldModelEnumUInt64
    let uint64b3: FieldModelEnumUInt64
    let uint64b4: FieldModelEnumUInt64
    let uint64b5: FieldModelEnumUInt64

    // Field size
    public let fbeSize: Int = 4

    // Field body size
    public let fbeBody: Int

    // Set the struct value (end phase)
    public required init() {
        let buffer = Buffer()
        let offset = 0

        _buffer = buffer
        _offset = offset

        byte0 = FieldModelEnumByte(buffer: buffer, offset: 4 + 4)
        byte1 = FieldModelEnumByte(buffer: buffer, offset: byte0.fbeOffset + byte0.fbeSize)
        byte2 = FieldModelEnumByte(buffer: buffer, offset: byte1.fbeOffset + byte1.fbeSize)
        byte3 = FieldModelEnumByte(buffer: buffer, offset: byte2.fbeOffset + byte2.fbeSize)
        byte4 = FieldModelEnumByte(buffer: buffer, offset: byte3.fbeOffset + byte3.fbeSize)
        byte5 = FieldModelEnumByte(buffer: buffer, offset: byte4.fbeOffset + byte4.fbeSize)
        char0 = FieldModelEnumChar(buffer: buffer, offset: byte5.fbeOffset + byte5.fbeSize)
        char1 = FieldModelEnumChar(buffer: buffer, offset: char0.fbeOffset + char0.fbeSize)
        char2 = FieldModelEnumChar(buffer: buffer, offset: char1.fbeOffset + char1.fbeSize)
        char3 = FieldModelEnumChar(buffer: buffer, offset: char2.fbeOffset + char2.fbeSize)
        char4 = FieldModelEnumChar(buffer: buffer, offset: char3.fbeOffset + char3.fbeSize)
        char5 = FieldModelEnumChar(buffer: buffer, offset: char4.fbeOffset + char4.fbeSize)
        wchar0 = FieldModelEnumWChar(buffer: buffer, offset: char5.fbeOffset + char5.fbeSize)
        wchar1 = FieldModelEnumWChar(buffer: buffer, offset: wchar0.fbeOffset + wchar0.fbeSize)
        wchar2 = FieldModelEnumWChar(buffer: buffer, offset: wchar1.fbeOffset + wchar1.fbeSize)
        wchar3 = FieldModelEnumWChar(buffer: buffer, offset: wchar2.fbeOffset + wchar2.fbeSize)
        wchar4 = FieldModelEnumWChar(buffer: buffer, offset: wchar3.fbeOffset + wchar3.fbeSize)
        wchar5 = FieldModelEnumWChar(buffer: buffer, offset: wchar4.fbeOffset + wchar4.fbeSize)
        int8b0 = FieldModelEnumInt8(buffer: buffer, offset: wchar5.fbeOffset + wchar5.fbeSize)
        int8b1 = FieldModelEnumInt8(buffer: buffer, offset: int8b0.fbeOffset + int8b0.fbeSize)
        int8b2 = FieldModelEnumInt8(buffer: buffer, offset: int8b1.fbeOffset + int8b1.fbeSize)
        int8b3 = FieldModelEnumInt8(buffer: buffer, offset: int8b2.fbeOffset + int8b2.fbeSize)
        int8b4 = FieldModelEnumInt8(buffer: buffer, offset: int8b3.fbeOffset + int8b3.fbeSize)
        int8b5 = FieldModelEnumInt8(buffer: buffer, offset: int8b4.fbeOffset + int8b4.fbeSize)
        uint8b0 = FieldModelEnumUInt8(buffer: buffer, offset: int8b5.fbeOffset + int8b5.fbeSize)
        uint8b1 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b0.fbeOffset + uint8b0.fbeSize)
        uint8b2 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b1.fbeOffset + uint8b1.fbeSize)
        uint8b3 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b2.fbeOffset + uint8b2.fbeSize)
        uint8b4 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b3.fbeOffset + uint8b3.fbeSize)
        uint8b5 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b4.fbeOffset + uint8b4.fbeSize)
        int16b0 = FieldModelEnumInt16(buffer: buffer, offset: uint8b5.fbeOffset + uint8b5.fbeSize)
        int16b1 = FieldModelEnumInt16(buffer: buffer, offset: int16b0.fbeOffset + int16b0.fbeSize)
        int16b2 = FieldModelEnumInt16(buffer: buffer, offset: int16b1.fbeOffset + int16b1.fbeSize)
        int16b3 = FieldModelEnumInt16(buffer: buffer, offset: int16b2.fbeOffset + int16b2.fbeSize)
        int16b4 = FieldModelEnumInt16(buffer: buffer, offset: int16b3.fbeOffset + int16b3.fbeSize)
        int16b5 = FieldModelEnumInt16(buffer: buffer, offset: int16b4.fbeOffset + int16b4.fbeSize)
        uint16b0 = FieldModelEnumUInt16(buffer: buffer, offset: int16b5.fbeOffset + int16b5.fbeSize)
        uint16b1 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b0.fbeOffset + uint16b0.fbeSize)
        uint16b2 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b1.fbeOffset + uint16b1.fbeSize)
        uint16b3 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b2.fbeOffset + uint16b2.fbeSize)
        uint16b4 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b3.fbeOffset + uint16b3.fbeSize)
        uint16b5 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b4.fbeOffset + uint16b4.fbeSize)
        int32b0 = FieldModelEnumInt32(buffer: buffer, offset: uint16b5.fbeOffset + uint16b5.fbeSize)
        int32b1 = FieldModelEnumInt32(buffer: buffer, offset: int32b0.fbeOffset + int32b0.fbeSize)
        int32b2 = FieldModelEnumInt32(buffer: buffer, offset: int32b1.fbeOffset + int32b1.fbeSize)
        int32b3 = FieldModelEnumInt32(buffer: buffer, offset: int32b2.fbeOffset + int32b2.fbeSize)
        int32b4 = FieldModelEnumInt32(buffer: buffer, offset: int32b3.fbeOffset + int32b3.fbeSize)
        int32b5 = FieldModelEnumInt32(buffer: buffer, offset: int32b4.fbeOffset + int32b4.fbeSize)
        uint32b0 = FieldModelEnumUInt32(buffer: buffer, offset: int32b5.fbeOffset + int32b5.fbeSize)
        uint32b1 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b0.fbeOffset + uint32b0.fbeSize)
        uint32b2 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b1.fbeOffset + uint32b1.fbeSize)
        uint32b3 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b2.fbeOffset + uint32b2.fbeSize)
        uint32b4 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b3.fbeOffset + uint32b3.fbeSize)
        uint32b5 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b4.fbeOffset + uint32b4.fbeSize)
        int64b0 = FieldModelEnumInt64(buffer: buffer, offset: uint32b5.fbeOffset + uint32b5.fbeSize)
        int64b1 = FieldModelEnumInt64(buffer: buffer, offset: int64b0.fbeOffset + int64b0.fbeSize)
        int64b2 = FieldModelEnumInt64(buffer: buffer, offset: int64b1.fbeOffset + int64b1.fbeSize)
        int64b3 = FieldModelEnumInt64(buffer: buffer, offset: int64b2.fbeOffset + int64b2.fbeSize)
        int64b4 = FieldModelEnumInt64(buffer: buffer, offset: int64b3.fbeOffset + int64b3.fbeSize)
        int64b5 = FieldModelEnumInt64(buffer: buffer, offset: int64b4.fbeOffset + int64b4.fbeSize)
        uint64b0 = FieldModelEnumUInt64(buffer: buffer, offset: int64b5.fbeOffset + int64b5.fbeSize)
        uint64b1 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b0.fbeOffset + uint64b0.fbeSize)
        uint64b2 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b1.fbeOffset + uint64b1.fbeSize)
        uint64b3 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b2.fbeOffset + uint64b2.fbeSize)
        uint64b4 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b3.fbeOffset + uint64b3.fbeSize)
        uint64b5 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b4.fbeOffset + uint64b4.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += byte0.fbeSize
            fbeBody += byte1.fbeSize
            fbeBody += byte2.fbeSize
            fbeBody += byte3.fbeSize
            fbeBody += byte4.fbeSize
            fbeBody += byte5.fbeSize
            fbeBody += char0.fbeSize
            fbeBody += char1.fbeSize
            fbeBody += char2.fbeSize
            fbeBody += char3.fbeSize
            fbeBody += char4.fbeSize
            fbeBody += char5.fbeSize
            fbeBody += wchar0.fbeSize
            fbeBody += wchar1.fbeSize
            fbeBody += wchar2.fbeSize
            fbeBody += wchar3.fbeSize
            fbeBody += wchar4.fbeSize
            fbeBody += wchar5.fbeSize
            fbeBody += int8b0.fbeSize
            fbeBody += int8b1.fbeSize
            fbeBody += int8b2.fbeSize
            fbeBody += int8b3.fbeSize
            fbeBody += int8b4.fbeSize
            fbeBody += int8b5.fbeSize
            fbeBody += uint8b0.fbeSize
            fbeBody += uint8b1.fbeSize
            fbeBody += uint8b2.fbeSize
            fbeBody += uint8b3.fbeSize
            fbeBody += uint8b4.fbeSize
            fbeBody += uint8b5.fbeSize
            fbeBody += int16b0.fbeSize
            fbeBody += int16b1.fbeSize
            fbeBody += int16b2.fbeSize
            fbeBody += int16b3.fbeSize
            fbeBody += int16b4.fbeSize
            fbeBody += int16b5.fbeSize
            fbeBody += uint16b0.fbeSize
            fbeBody += uint16b1.fbeSize
            fbeBody += uint16b2.fbeSize
            fbeBody += uint16b3.fbeSize
            fbeBody += uint16b4.fbeSize
            fbeBody += uint16b5.fbeSize
            fbeBody += int32b0.fbeSize
            fbeBody += int32b1.fbeSize
            fbeBody += int32b2.fbeSize
            fbeBody += int32b3.fbeSize
            fbeBody += int32b4.fbeSize
            fbeBody += int32b5.fbeSize
            fbeBody += uint32b0.fbeSize
            fbeBody += uint32b1.fbeSize
            fbeBody += uint32b2.fbeSize
            fbeBody += uint32b3.fbeSize
            fbeBody += uint32b4.fbeSize
            fbeBody += uint32b5.fbeSize
            fbeBody += int64b0.fbeSize
            fbeBody += int64b1.fbeSize
            fbeBody += int64b2.fbeSize
            fbeBody += int64b3.fbeSize
            fbeBody += int64b4.fbeSize
            fbeBody += int64b5.fbeSize
            fbeBody += uint64b0.fbeSize
            fbeBody += uint64b1.fbeSize
            fbeBody += uint64b2.fbeSize
            fbeBody += uint64b3.fbeSize
            fbeBody += uint64b4.fbeSize
            fbeBody += uint64b5.fbeSize
        self.fbeBody = fbeBody
    }

    // 
    public required init(buffer: Buffer = Buffer(), offset: Int = 0) {
        _buffer = buffer
        _offset = offset

        byte0 = FieldModelEnumByte(buffer: buffer, offset: 4 + 4)
        byte1 = FieldModelEnumByte(buffer: buffer, offset: byte0.fbeOffset + byte0.fbeSize)
        byte2 = FieldModelEnumByte(buffer: buffer, offset: byte1.fbeOffset + byte1.fbeSize)
        byte3 = FieldModelEnumByte(buffer: buffer, offset: byte2.fbeOffset + byte2.fbeSize)
        byte4 = FieldModelEnumByte(buffer: buffer, offset: byte3.fbeOffset + byte3.fbeSize)
        byte5 = FieldModelEnumByte(buffer: buffer, offset: byte4.fbeOffset + byte4.fbeSize)
        char0 = FieldModelEnumChar(buffer: buffer, offset: byte5.fbeOffset + byte5.fbeSize)
        char1 = FieldModelEnumChar(buffer: buffer, offset: char0.fbeOffset + char0.fbeSize)
        char2 = FieldModelEnumChar(buffer: buffer, offset: char1.fbeOffset + char1.fbeSize)
        char3 = FieldModelEnumChar(buffer: buffer, offset: char2.fbeOffset + char2.fbeSize)
        char4 = FieldModelEnumChar(buffer: buffer, offset: char3.fbeOffset + char3.fbeSize)
        char5 = FieldModelEnumChar(buffer: buffer, offset: char4.fbeOffset + char4.fbeSize)
        wchar0 = FieldModelEnumWChar(buffer: buffer, offset: char5.fbeOffset + char5.fbeSize)
        wchar1 = FieldModelEnumWChar(buffer: buffer, offset: wchar0.fbeOffset + wchar0.fbeSize)
        wchar2 = FieldModelEnumWChar(buffer: buffer, offset: wchar1.fbeOffset + wchar1.fbeSize)
        wchar3 = FieldModelEnumWChar(buffer: buffer, offset: wchar2.fbeOffset + wchar2.fbeSize)
        wchar4 = FieldModelEnumWChar(buffer: buffer, offset: wchar3.fbeOffset + wchar3.fbeSize)
        wchar5 = FieldModelEnumWChar(buffer: buffer, offset: wchar4.fbeOffset + wchar4.fbeSize)
        int8b0 = FieldModelEnumInt8(buffer: buffer, offset: wchar5.fbeOffset + wchar5.fbeSize)
        int8b1 = FieldModelEnumInt8(buffer: buffer, offset: int8b0.fbeOffset + int8b0.fbeSize)
        int8b2 = FieldModelEnumInt8(buffer: buffer, offset: int8b1.fbeOffset + int8b1.fbeSize)
        int8b3 = FieldModelEnumInt8(buffer: buffer, offset: int8b2.fbeOffset + int8b2.fbeSize)
        int8b4 = FieldModelEnumInt8(buffer: buffer, offset: int8b3.fbeOffset + int8b3.fbeSize)
        int8b5 = FieldModelEnumInt8(buffer: buffer, offset: int8b4.fbeOffset + int8b4.fbeSize)
        uint8b0 = FieldModelEnumUInt8(buffer: buffer, offset: int8b5.fbeOffset + int8b5.fbeSize)
        uint8b1 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b0.fbeOffset + uint8b0.fbeSize)
        uint8b2 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b1.fbeOffset + uint8b1.fbeSize)
        uint8b3 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b2.fbeOffset + uint8b2.fbeSize)
        uint8b4 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b3.fbeOffset + uint8b3.fbeSize)
        uint8b5 = FieldModelEnumUInt8(buffer: buffer, offset: uint8b4.fbeOffset + uint8b4.fbeSize)
        int16b0 = FieldModelEnumInt16(buffer: buffer, offset: uint8b5.fbeOffset + uint8b5.fbeSize)
        int16b1 = FieldModelEnumInt16(buffer: buffer, offset: int16b0.fbeOffset + int16b0.fbeSize)
        int16b2 = FieldModelEnumInt16(buffer: buffer, offset: int16b1.fbeOffset + int16b1.fbeSize)
        int16b3 = FieldModelEnumInt16(buffer: buffer, offset: int16b2.fbeOffset + int16b2.fbeSize)
        int16b4 = FieldModelEnumInt16(buffer: buffer, offset: int16b3.fbeOffset + int16b3.fbeSize)
        int16b5 = FieldModelEnumInt16(buffer: buffer, offset: int16b4.fbeOffset + int16b4.fbeSize)
        uint16b0 = FieldModelEnumUInt16(buffer: buffer, offset: int16b5.fbeOffset + int16b5.fbeSize)
        uint16b1 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b0.fbeOffset + uint16b0.fbeSize)
        uint16b2 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b1.fbeOffset + uint16b1.fbeSize)
        uint16b3 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b2.fbeOffset + uint16b2.fbeSize)
        uint16b4 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b3.fbeOffset + uint16b3.fbeSize)
        uint16b5 = FieldModelEnumUInt16(buffer: buffer, offset: uint16b4.fbeOffset + uint16b4.fbeSize)
        int32b0 = FieldModelEnumInt32(buffer: buffer, offset: uint16b5.fbeOffset + uint16b5.fbeSize)
        int32b1 = FieldModelEnumInt32(buffer: buffer, offset: int32b0.fbeOffset + int32b0.fbeSize)
        int32b2 = FieldModelEnumInt32(buffer: buffer, offset: int32b1.fbeOffset + int32b1.fbeSize)
        int32b3 = FieldModelEnumInt32(buffer: buffer, offset: int32b2.fbeOffset + int32b2.fbeSize)
        int32b4 = FieldModelEnumInt32(buffer: buffer, offset: int32b3.fbeOffset + int32b3.fbeSize)
        int32b5 = FieldModelEnumInt32(buffer: buffer, offset: int32b4.fbeOffset + int32b4.fbeSize)
        uint32b0 = FieldModelEnumUInt32(buffer: buffer, offset: int32b5.fbeOffset + int32b5.fbeSize)
        uint32b1 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b0.fbeOffset + uint32b0.fbeSize)
        uint32b2 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b1.fbeOffset + uint32b1.fbeSize)
        uint32b3 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b2.fbeOffset + uint32b2.fbeSize)
        uint32b4 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b3.fbeOffset + uint32b3.fbeSize)
        uint32b5 = FieldModelEnumUInt32(buffer: buffer, offset: uint32b4.fbeOffset + uint32b4.fbeSize)
        int64b0 = FieldModelEnumInt64(buffer: buffer, offset: uint32b5.fbeOffset + uint32b5.fbeSize)
        int64b1 = FieldModelEnumInt64(buffer: buffer, offset: int64b0.fbeOffset + int64b0.fbeSize)
        int64b2 = FieldModelEnumInt64(buffer: buffer, offset: int64b1.fbeOffset + int64b1.fbeSize)
        int64b3 = FieldModelEnumInt64(buffer: buffer, offset: int64b2.fbeOffset + int64b2.fbeSize)
        int64b4 = FieldModelEnumInt64(buffer: buffer, offset: int64b3.fbeOffset + int64b3.fbeSize)
        int64b5 = FieldModelEnumInt64(buffer: buffer, offset: int64b4.fbeOffset + int64b4.fbeSize)
        uint64b0 = FieldModelEnumUInt64(buffer: buffer, offset: int64b5.fbeOffset + int64b5.fbeSize)
        uint64b1 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b0.fbeOffset + uint64b0.fbeSize)
        uint64b2 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b1.fbeOffset + uint64b1.fbeSize)
        uint64b3 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b2.fbeOffset + uint64b2.fbeSize)
        uint64b4 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b3.fbeOffset + uint64b3.fbeSize)
        uint64b5 = FieldModelEnumUInt64(buffer: buffer, offset: uint64b4.fbeOffset + uint64b4.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += byte0.fbeSize
            fbeBody += byte1.fbeSize
            fbeBody += byte2.fbeSize
            fbeBody += byte3.fbeSize
            fbeBody += byte4.fbeSize
            fbeBody += byte5.fbeSize
            fbeBody += char0.fbeSize
            fbeBody += char1.fbeSize
            fbeBody += char2.fbeSize
            fbeBody += char3.fbeSize
            fbeBody += char4.fbeSize
            fbeBody += char5.fbeSize
            fbeBody += wchar0.fbeSize
            fbeBody += wchar1.fbeSize
            fbeBody += wchar2.fbeSize
            fbeBody += wchar3.fbeSize
            fbeBody += wchar4.fbeSize
            fbeBody += wchar5.fbeSize
            fbeBody += int8b0.fbeSize
            fbeBody += int8b1.fbeSize
            fbeBody += int8b2.fbeSize
            fbeBody += int8b3.fbeSize
            fbeBody += int8b4.fbeSize
            fbeBody += int8b5.fbeSize
            fbeBody += uint8b0.fbeSize
            fbeBody += uint8b1.fbeSize
            fbeBody += uint8b2.fbeSize
            fbeBody += uint8b3.fbeSize
            fbeBody += uint8b4.fbeSize
            fbeBody += uint8b5.fbeSize
            fbeBody += int16b0.fbeSize
            fbeBody += int16b1.fbeSize
            fbeBody += int16b2.fbeSize
            fbeBody += int16b3.fbeSize
            fbeBody += int16b4.fbeSize
            fbeBody += int16b5.fbeSize
            fbeBody += uint16b0.fbeSize
            fbeBody += uint16b1.fbeSize
            fbeBody += uint16b2.fbeSize
            fbeBody += uint16b3.fbeSize
            fbeBody += uint16b4.fbeSize
            fbeBody += uint16b5.fbeSize
            fbeBody += int32b0.fbeSize
            fbeBody += int32b1.fbeSize
            fbeBody += int32b2.fbeSize
            fbeBody += int32b3.fbeSize
            fbeBody += int32b4.fbeSize
            fbeBody += int32b5.fbeSize
            fbeBody += uint32b0.fbeSize
            fbeBody += uint32b1.fbeSize
            fbeBody += uint32b2.fbeSize
            fbeBody += uint32b3.fbeSize
            fbeBody += uint32b4.fbeSize
            fbeBody += uint32b5.fbeSize
            fbeBody += int64b0.fbeSize
            fbeBody += int64b1.fbeSize
            fbeBody += int64b2.fbeSize
            fbeBody += int64b3.fbeSize
            fbeBody += int64b4.fbeSize
            fbeBody += int64b5.fbeSize
            fbeBody += uint64b0.fbeSize
            fbeBody += uint64b1.fbeSize
            fbeBody += uint64b2.fbeSize
            fbeBody += uint64b3.fbeSize
            fbeBody += uint64b4.fbeSize
            fbeBody += uint64b5.fbeSize
        self.fbeBody = fbeBody
    }

    // Field extra size
    public var fbeExtra: Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4) > _buffer.size) {
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)

        var fbeResult = fbeBody
            fbeResult += byte0.fbeExtra
            fbeResult += byte1.fbeExtra
            fbeResult += byte2.fbeExtra
            fbeResult += byte3.fbeExtra
            fbeResult += byte4.fbeExtra
            fbeResult += byte5.fbeExtra
            fbeResult += char0.fbeExtra
            fbeResult += char1.fbeExtra
            fbeResult += char2.fbeExtra
            fbeResult += char3.fbeExtra
            fbeResult += char4.fbeExtra
            fbeResult += char5.fbeExtra
            fbeResult += wchar0.fbeExtra
            fbeResult += wchar1.fbeExtra
            fbeResult += wchar2.fbeExtra
            fbeResult += wchar3.fbeExtra
            fbeResult += wchar4.fbeExtra
            fbeResult += wchar5.fbeExtra
            fbeResult += int8b0.fbeExtra
            fbeResult += int8b1.fbeExtra
            fbeResult += int8b2.fbeExtra
            fbeResult += int8b3.fbeExtra
            fbeResult += int8b4.fbeExtra
            fbeResult += int8b5.fbeExtra
            fbeResult += uint8b0.fbeExtra
            fbeResult += uint8b1.fbeExtra
            fbeResult += uint8b2.fbeExtra
            fbeResult += uint8b3.fbeExtra
            fbeResult += uint8b4.fbeExtra
            fbeResult += uint8b5.fbeExtra
            fbeResult += int16b0.fbeExtra
            fbeResult += int16b1.fbeExtra
            fbeResult += int16b2.fbeExtra
            fbeResult += int16b3.fbeExtra
            fbeResult += int16b4.fbeExtra
            fbeResult += int16b5.fbeExtra
            fbeResult += uint16b0.fbeExtra
            fbeResult += uint16b1.fbeExtra
            fbeResult += uint16b2.fbeExtra
            fbeResult += uint16b3.fbeExtra
            fbeResult += uint16b4.fbeExtra
            fbeResult += uint16b5.fbeExtra
            fbeResult += int32b0.fbeExtra
            fbeResult += int32b1.fbeExtra
            fbeResult += int32b2.fbeExtra
            fbeResult += int32b3.fbeExtra
            fbeResult += int32b4.fbeExtra
            fbeResult += int32b5.fbeExtra
            fbeResult += uint32b0.fbeExtra
            fbeResult += uint32b1.fbeExtra
            fbeResult += uint32b2.fbeExtra
            fbeResult += uint32b3.fbeExtra
            fbeResult += uint32b4.fbeExtra
            fbeResult += uint32b5.fbeExtra
            fbeResult += int64b0.fbeExtra
            fbeResult += int64b1.fbeExtra
            fbeResult += int64b2.fbeExtra
            fbeResult += int64b3.fbeExtra
            fbeResult += int64b4.fbeExtra
            fbeResult += int64b5.fbeExtra
            fbeResult += uint64b0.fbeExtra
            fbeResult += uint64b1.fbeExtra
            fbeResult += uint64b2.fbeExtra
            fbeResult += uint64b3.fbeExtra
            fbeResult += uint64b4.fbeExtra
            fbeResult += uint64b5.fbeExtra

        _buffer.unshift(offset: fbeStructOffset)

        return fbeResult
    }

    // Field type
    public var fbeType: Int = fbeTypeConst
    public static let fbeTypeConst: Int = 1

    // Check if the struct value is valid
    func verify(fbeVerifyType: Bool = true) -> Bool {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            return true
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            return false
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < (4 + 4) {
            return false
        }

        let fbeStructType = Int(readUInt32(offset: fbeStructOffset + 4))
        if fbeVerifyType && (fbeStructType != fbeType) {
            return false
        }

        _buffer.shift(offset: fbeStructOffset)
        let fbeResult = verifyFields(fbeStructSize: fbeStructSize)
        _buffer.unshift(offset: fbeStructOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    public func verifyFields(fbeStructSize: Int) -> Bool {
        var fbeCurrentSize = 4 + 4

        if (fbeCurrentSize + byte0.fbeSize) > fbeStructSize {
            return true
        }
        if !byte0.verify() {
            return false
        }
        fbeCurrentSize += byte0.fbeSize

        if (fbeCurrentSize + byte1.fbeSize) > fbeStructSize {
            return true
        }
        if !byte1.verify() {
            return false
        }
        fbeCurrentSize += byte1.fbeSize

        if (fbeCurrentSize + byte2.fbeSize) > fbeStructSize {
            return true
        }
        if !byte2.verify() {
            return false
        }
        fbeCurrentSize += byte2.fbeSize

        if (fbeCurrentSize + byte3.fbeSize) > fbeStructSize {
            return true
        }
        if !byte3.verify() {
            return false
        }
        fbeCurrentSize += byte3.fbeSize

        if (fbeCurrentSize + byte4.fbeSize) > fbeStructSize {
            return true
        }
        if !byte4.verify() {
            return false
        }
        fbeCurrentSize += byte4.fbeSize

        if (fbeCurrentSize + byte5.fbeSize) > fbeStructSize {
            return true
        }
        if !byte5.verify() {
            return false
        }
        fbeCurrentSize += byte5.fbeSize

        if (fbeCurrentSize + char0.fbeSize) > fbeStructSize {
            return true
        }
        if !char0.verify() {
            return false
        }
        fbeCurrentSize += char0.fbeSize

        if (fbeCurrentSize + char1.fbeSize) > fbeStructSize {
            return true
        }
        if !char1.verify() {
            return false
        }
        fbeCurrentSize += char1.fbeSize

        if (fbeCurrentSize + char2.fbeSize) > fbeStructSize {
            return true
        }
        if !char2.verify() {
            return false
        }
        fbeCurrentSize += char2.fbeSize

        if (fbeCurrentSize + char3.fbeSize) > fbeStructSize {
            return true
        }
        if !char3.verify() {
            return false
        }
        fbeCurrentSize += char3.fbeSize

        if (fbeCurrentSize + char4.fbeSize) > fbeStructSize {
            return true
        }
        if !char4.verify() {
            return false
        }
        fbeCurrentSize += char4.fbeSize

        if (fbeCurrentSize + char5.fbeSize) > fbeStructSize {
            return true
        }
        if !char5.verify() {
            return false
        }
        fbeCurrentSize += char5.fbeSize

        if (fbeCurrentSize + wchar0.fbeSize) > fbeStructSize {
            return true
        }
        if !wchar0.verify() {
            return false
        }
        fbeCurrentSize += wchar0.fbeSize

        if (fbeCurrentSize + wchar1.fbeSize) > fbeStructSize {
            return true
        }
        if !wchar1.verify() {
            return false
        }
        fbeCurrentSize += wchar1.fbeSize

        if (fbeCurrentSize + wchar2.fbeSize) > fbeStructSize {
            return true
        }
        if !wchar2.verify() {
            return false
        }
        fbeCurrentSize += wchar2.fbeSize

        if (fbeCurrentSize + wchar3.fbeSize) > fbeStructSize {
            return true
        }
        if !wchar3.verify() {
            return false
        }
        fbeCurrentSize += wchar3.fbeSize

        if (fbeCurrentSize + wchar4.fbeSize) > fbeStructSize {
            return true
        }
        if !wchar4.verify() {
            return false
        }
        fbeCurrentSize += wchar4.fbeSize

        if (fbeCurrentSize + wchar5.fbeSize) > fbeStructSize {
            return true
        }
        if !wchar5.verify() {
            return false
        }
        fbeCurrentSize += wchar5.fbeSize

        if (fbeCurrentSize + int8b0.fbeSize) > fbeStructSize {
            return true
        }
        if !int8b0.verify() {
            return false
        }
        fbeCurrentSize += int8b0.fbeSize

        if (fbeCurrentSize + int8b1.fbeSize) > fbeStructSize {
            return true
        }
        if !int8b1.verify() {
            return false
        }
        fbeCurrentSize += int8b1.fbeSize

        if (fbeCurrentSize + int8b2.fbeSize) > fbeStructSize {
            return true
        }
        if !int8b2.verify() {
            return false
        }
        fbeCurrentSize += int8b2.fbeSize

        if (fbeCurrentSize + int8b3.fbeSize) > fbeStructSize {
            return true
        }
        if !int8b3.verify() {
            return false
        }
        fbeCurrentSize += int8b3.fbeSize

        if (fbeCurrentSize + int8b4.fbeSize) > fbeStructSize {
            return true
        }
        if !int8b4.verify() {
            return false
        }
        fbeCurrentSize += int8b4.fbeSize

        if (fbeCurrentSize + int8b5.fbeSize) > fbeStructSize {
            return true
        }
        if !int8b5.verify() {
            return false
        }
        fbeCurrentSize += int8b5.fbeSize

        if (fbeCurrentSize + uint8b0.fbeSize) > fbeStructSize {
            return true
        }
        if !uint8b0.verify() {
            return false
        }
        fbeCurrentSize += uint8b0.fbeSize

        if (fbeCurrentSize + uint8b1.fbeSize) > fbeStructSize {
            return true
        }
        if !uint8b1.verify() {
            return false
        }
        fbeCurrentSize += uint8b1.fbeSize

        if (fbeCurrentSize + uint8b2.fbeSize) > fbeStructSize {
            return true
        }
        if !uint8b2.verify() {
            return false
        }
        fbeCurrentSize += uint8b2.fbeSize

        if (fbeCurrentSize + uint8b3.fbeSize) > fbeStructSize {
            return true
        }
        if !uint8b3.verify() {
            return false
        }
        fbeCurrentSize += uint8b3.fbeSize

        if (fbeCurrentSize + uint8b4.fbeSize) > fbeStructSize {
            return true
        }
        if !uint8b4.verify() {
            return false
        }
        fbeCurrentSize += uint8b4.fbeSize

        if (fbeCurrentSize + uint8b5.fbeSize) > fbeStructSize {
            return true
        }
        if !uint8b5.verify() {
            return false
        }
        fbeCurrentSize += uint8b5.fbeSize

        if (fbeCurrentSize + int16b0.fbeSize) > fbeStructSize {
            return true
        }
        if !int16b0.verify() {
            return false
        }
        fbeCurrentSize += int16b0.fbeSize

        if (fbeCurrentSize + int16b1.fbeSize) > fbeStructSize {
            return true
        }
        if !int16b1.verify() {
            return false
        }
        fbeCurrentSize += int16b1.fbeSize

        if (fbeCurrentSize + int16b2.fbeSize) > fbeStructSize {
            return true
        }
        if !int16b2.verify() {
            return false
        }
        fbeCurrentSize += int16b2.fbeSize

        if (fbeCurrentSize + int16b3.fbeSize) > fbeStructSize {
            return true
        }
        if !int16b3.verify() {
            return false
        }
        fbeCurrentSize += int16b3.fbeSize

        if (fbeCurrentSize + int16b4.fbeSize) > fbeStructSize {
            return true
        }
        if !int16b4.verify() {
            return false
        }
        fbeCurrentSize += int16b4.fbeSize

        if (fbeCurrentSize + int16b5.fbeSize) > fbeStructSize {
            return true
        }
        if !int16b5.verify() {
            return false
        }
        fbeCurrentSize += int16b5.fbeSize

        if (fbeCurrentSize + uint16b0.fbeSize) > fbeStructSize {
            return true
        }
        if !uint16b0.verify() {
            return false
        }
        fbeCurrentSize += uint16b0.fbeSize

        if (fbeCurrentSize + uint16b1.fbeSize) > fbeStructSize {
            return true
        }
        if !uint16b1.verify() {
            return false
        }
        fbeCurrentSize += uint16b1.fbeSize

        if (fbeCurrentSize + uint16b2.fbeSize) > fbeStructSize {
            return true
        }
        if !uint16b2.verify() {
            return false
        }
        fbeCurrentSize += uint16b2.fbeSize

        if (fbeCurrentSize + uint16b3.fbeSize) > fbeStructSize {
            return true
        }
        if !uint16b3.verify() {
            return false
        }
        fbeCurrentSize += uint16b3.fbeSize

        if (fbeCurrentSize + uint16b4.fbeSize) > fbeStructSize {
            return true
        }
        if !uint16b4.verify() {
            return false
        }
        fbeCurrentSize += uint16b4.fbeSize

        if (fbeCurrentSize + uint16b5.fbeSize) > fbeStructSize {
            return true
        }
        if !uint16b5.verify() {
            return false
        }
        fbeCurrentSize += uint16b5.fbeSize

        if (fbeCurrentSize + int32b0.fbeSize) > fbeStructSize {
            return true
        }
        if !int32b0.verify() {
            return false
        }
        fbeCurrentSize += int32b0.fbeSize

        if (fbeCurrentSize + int32b1.fbeSize) > fbeStructSize {
            return true
        }
        if !int32b1.verify() {
            return false
        }
        fbeCurrentSize += int32b1.fbeSize

        if (fbeCurrentSize + int32b2.fbeSize) > fbeStructSize {
            return true
        }
        if !int32b2.verify() {
            return false
        }
        fbeCurrentSize += int32b2.fbeSize

        if (fbeCurrentSize + int32b3.fbeSize) > fbeStructSize {
            return true
        }
        if !int32b3.verify() {
            return false
        }
        fbeCurrentSize += int32b3.fbeSize

        if (fbeCurrentSize + int32b4.fbeSize) > fbeStructSize {
            return true
        }
        if !int32b4.verify() {
            return false
        }
        fbeCurrentSize += int32b4.fbeSize

        if (fbeCurrentSize + int32b5.fbeSize) > fbeStructSize {
            return true
        }
        if !int32b5.verify() {
            return false
        }
        fbeCurrentSize += int32b5.fbeSize

        if (fbeCurrentSize + uint32b0.fbeSize) > fbeStructSize {
            return true
        }
        if !uint32b0.verify() {
            return false
        }
        fbeCurrentSize += uint32b0.fbeSize

        if (fbeCurrentSize + uint32b1.fbeSize) > fbeStructSize {
            return true
        }
        if !uint32b1.verify() {
            return false
        }
        fbeCurrentSize += uint32b1.fbeSize

        if (fbeCurrentSize + uint32b2.fbeSize) > fbeStructSize {
            return true
        }
        if !uint32b2.verify() {
            return false
        }
        fbeCurrentSize += uint32b2.fbeSize

        if (fbeCurrentSize + uint32b3.fbeSize) > fbeStructSize {
            return true
        }
        if !uint32b3.verify() {
            return false
        }
        fbeCurrentSize += uint32b3.fbeSize

        if (fbeCurrentSize + uint32b4.fbeSize) > fbeStructSize {
            return true
        }
        if !uint32b4.verify() {
            return false
        }
        fbeCurrentSize += uint32b4.fbeSize

        if (fbeCurrentSize + uint32b5.fbeSize) > fbeStructSize {
            return true
        }
        if !uint32b5.verify() {
            return false
        }
        fbeCurrentSize += uint32b5.fbeSize

        if (fbeCurrentSize + int64b0.fbeSize) > fbeStructSize {
            return true
        }
        if !int64b0.verify() {
            return false
        }
        fbeCurrentSize += int64b0.fbeSize

        if (fbeCurrentSize + int64b1.fbeSize) > fbeStructSize {
            return true
        }
        if !int64b1.verify() {
            return false
        }
        fbeCurrentSize += int64b1.fbeSize

        if (fbeCurrentSize + int64b2.fbeSize) > fbeStructSize {
            return true
        }
        if !int64b2.verify() {
            return false
        }
        fbeCurrentSize += int64b2.fbeSize

        if (fbeCurrentSize + int64b3.fbeSize) > fbeStructSize {
            return true
        }
        if !int64b3.verify() {
            return false
        }
        fbeCurrentSize += int64b3.fbeSize

        if (fbeCurrentSize + int64b4.fbeSize) > fbeStructSize {
            return true
        }
        if !int64b4.verify() {
            return false
        }
        fbeCurrentSize += int64b4.fbeSize

        if (fbeCurrentSize + int64b5.fbeSize) > fbeStructSize {
            return true
        }
        if !int64b5.verify() {
            return false
        }
        fbeCurrentSize += int64b5.fbeSize

        if (fbeCurrentSize + uint64b0.fbeSize) > fbeStructSize {
            return true
        }
        if !uint64b0.verify() {
            return false
        }
        fbeCurrentSize += uint64b0.fbeSize

        if (fbeCurrentSize + uint64b1.fbeSize) > fbeStructSize {
            return true
        }
        if !uint64b1.verify() {
            return false
        }
        fbeCurrentSize += uint64b1.fbeSize

        if (fbeCurrentSize + uint64b2.fbeSize) > fbeStructSize {
            return true
        }
        if !uint64b2.verify() {
            return false
        }
        fbeCurrentSize += uint64b2.fbeSize

        if (fbeCurrentSize + uint64b3.fbeSize) > fbeStructSize {
            return true
        }
        if !uint64b3.verify() {
            return false
        }
        fbeCurrentSize += uint64b3.fbeSize

        if (fbeCurrentSize + uint64b4.fbeSize) > fbeStructSize {
            return true
        }
        if !uint64b4.verify() {
            return false
        }
        fbeCurrentSize += uint64b4.fbeSize

        if (fbeCurrentSize + uint64b5.fbeSize) > fbeStructSize {
            return true
        }
        if !uint64b5.verify() {
            return false
        }
        fbeCurrentSize += uint64b5.fbeSize

        return true
    }

    // Get the struct value (begin phase)
    func getBegin() -> Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < 4 + 4 {
            assertionFailure("Model is broken!")
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Get the struct value (end phase)
    func getEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Get the struct value
    public func get() -> Enums {
        var fbeValue = Enums()
        return get(fbeValue: &fbeValue)
    }

    public func get(fbeValue: inout Enums) -> Enums {
        let fbeBegin = getBegin()
        if fbeBegin == 0 {
            return fbeValue
        }

        let fbeStructSize = Int(readUInt32(offset: 0))
        getFields(fbeValue: &fbeValue, fbeStructSize: fbeStructSize)
        getEnd(fbeBegin: fbeBegin)
        return fbeValue
    }

    // Get the struct fields values
    public func getFields(fbeValue: inout Enums, fbeStructSize: Int) {
        var fbeCurrentSize = 4 + 4

        if fbeCurrentSize + byte0.fbeSize <= fbeStructSize {
            fbeValue.byte0 = byte0.get(defaults: ChronoxorEnums.EnumByte.ENUM_VALUE_0)
        } else {
            fbeValue.byte0 = ChronoxorEnums.EnumByte.ENUM_VALUE_0
        }
        fbeCurrentSize += byte0.fbeSize

        if fbeCurrentSize + byte1.fbeSize <= fbeStructSize {
            fbeValue.byte1 = byte1.get(defaults: ChronoxorEnums.EnumByte.ENUM_VALUE_1)
        } else {
            fbeValue.byte1 = ChronoxorEnums.EnumByte.ENUM_VALUE_1
        }
        fbeCurrentSize += byte1.fbeSize

        if fbeCurrentSize + byte2.fbeSize <= fbeStructSize {
            fbeValue.byte2 = byte2.get(defaults: ChronoxorEnums.EnumByte.ENUM_VALUE_2)
        } else {
            fbeValue.byte2 = ChronoxorEnums.EnumByte.ENUM_VALUE_2
        }
        fbeCurrentSize += byte2.fbeSize

        if fbeCurrentSize + byte3.fbeSize <= fbeStructSize {
            fbeValue.byte3 = byte3.get(defaults: ChronoxorEnums.EnumByte.ENUM_VALUE_3)
        } else {
            fbeValue.byte3 = ChronoxorEnums.EnumByte.ENUM_VALUE_3
        }
        fbeCurrentSize += byte3.fbeSize

        if fbeCurrentSize + byte4.fbeSize <= fbeStructSize {
            fbeValue.byte4 = byte4.get(defaults: ChronoxorEnums.EnumByte.ENUM_VALUE_4)
        } else {
            fbeValue.byte4 = ChronoxorEnums.EnumByte.ENUM_VALUE_4
        }
        fbeCurrentSize += byte4.fbeSize

        if fbeCurrentSize + byte5.fbeSize <= fbeStructSize {
            fbeValue.byte5 = byte5.get(defaults: ChronoxorEnums.EnumByte.ENUM_VALUE_5)
        } else {
            fbeValue.byte5 = ChronoxorEnums.EnumByte.ENUM_VALUE_5
        }
        fbeCurrentSize += byte5.fbeSize

        if fbeCurrentSize + char0.fbeSize <= fbeStructSize {
            fbeValue.char0 = char0.get(defaults: ChronoxorEnums.EnumChar.ENUM_VALUE_0)
        } else {
            fbeValue.char0 = ChronoxorEnums.EnumChar.ENUM_VALUE_0
        }
        fbeCurrentSize += char0.fbeSize

        if fbeCurrentSize + char1.fbeSize <= fbeStructSize {
            fbeValue.char1 = char1.get(defaults: ChronoxorEnums.EnumChar.ENUM_VALUE_1)
        } else {
            fbeValue.char1 = ChronoxorEnums.EnumChar.ENUM_VALUE_1
        }
        fbeCurrentSize += char1.fbeSize

        if fbeCurrentSize + char2.fbeSize <= fbeStructSize {
            fbeValue.char2 = char2.get(defaults: ChronoxorEnums.EnumChar.ENUM_VALUE_2)
        } else {
            fbeValue.char2 = ChronoxorEnums.EnumChar.ENUM_VALUE_2
        }
        fbeCurrentSize += char2.fbeSize

        if fbeCurrentSize + char3.fbeSize <= fbeStructSize {
            fbeValue.char3 = char3.get(defaults: ChronoxorEnums.EnumChar.ENUM_VALUE_3)
        } else {
            fbeValue.char3 = ChronoxorEnums.EnumChar.ENUM_VALUE_3
        }
        fbeCurrentSize += char3.fbeSize

        if fbeCurrentSize + char4.fbeSize <= fbeStructSize {
            fbeValue.char4 = char4.get(defaults: ChronoxorEnums.EnumChar.ENUM_VALUE_4)
        } else {
            fbeValue.char4 = ChronoxorEnums.EnumChar.ENUM_VALUE_4
        }
        fbeCurrentSize += char4.fbeSize

        if fbeCurrentSize + char5.fbeSize <= fbeStructSize {
            fbeValue.char5 = char5.get(defaults: ChronoxorEnums.EnumChar.ENUM_VALUE_5)
        } else {
            fbeValue.char5 = ChronoxorEnums.EnumChar.ENUM_VALUE_5
        }
        fbeCurrentSize += char5.fbeSize

        if fbeCurrentSize + wchar0.fbeSize <= fbeStructSize {
            fbeValue.wchar0 = wchar0.get(defaults: ChronoxorEnums.EnumWChar.ENUM_VALUE_0)
        } else {
            fbeValue.wchar0 = ChronoxorEnums.EnumWChar.ENUM_VALUE_0
        }
        fbeCurrentSize += wchar0.fbeSize

        if fbeCurrentSize + wchar1.fbeSize <= fbeStructSize {
            fbeValue.wchar1 = wchar1.get(defaults: ChronoxorEnums.EnumWChar.ENUM_VALUE_1)
        } else {
            fbeValue.wchar1 = ChronoxorEnums.EnumWChar.ENUM_VALUE_1
        }
        fbeCurrentSize += wchar1.fbeSize

        if fbeCurrentSize + wchar2.fbeSize <= fbeStructSize {
            fbeValue.wchar2 = wchar2.get(defaults: ChronoxorEnums.EnumWChar.ENUM_VALUE_2)
        } else {
            fbeValue.wchar2 = ChronoxorEnums.EnumWChar.ENUM_VALUE_2
        }
        fbeCurrentSize += wchar2.fbeSize

        if fbeCurrentSize + wchar3.fbeSize <= fbeStructSize {
            fbeValue.wchar3 = wchar3.get(defaults: ChronoxorEnums.EnumWChar.ENUM_VALUE_3)
        } else {
            fbeValue.wchar3 = ChronoxorEnums.EnumWChar.ENUM_VALUE_3
        }
        fbeCurrentSize += wchar3.fbeSize

        if fbeCurrentSize + wchar4.fbeSize <= fbeStructSize {
            fbeValue.wchar4 = wchar4.get(defaults: ChronoxorEnums.EnumWChar.ENUM_VALUE_4)
        } else {
            fbeValue.wchar4 = ChronoxorEnums.EnumWChar.ENUM_VALUE_4
        }
        fbeCurrentSize += wchar4.fbeSize

        if fbeCurrentSize + wchar5.fbeSize <= fbeStructSize {
            fbeValue.wchar5 = wchar5.get(defaults: ChronoxorEnums.EnumWChar.ENUM_VALUE_5)
        } else {
            fbeValue.wchar5 = ChronoxorEnums.EnumWChar.ENUM_VALUE_5
        }
        fbeCurrentSize += wchar5.fbeSize

        if fbeCurrentSize + int8b0.fbeSize <= fbeStructSize {
            fbeValue.int8b0 = int8b0.get(defaults: ChronoxorEnums.EnumInt8.ENUM_VALUE_0)
        } else {
            fbeValue.int8b0 = ChronoxorEnums.EnumInt8.ENUM_VALUE_0
        }
        fbeCurrentSize += int8b0.fbeSize

        if fbeCurrentSize + int8b1.fbeSize <= fbeStructSize {
            fbeValue.int8b1 = int8b1.get(defaults: ChronoxorEnums.EnumInt8.ENUM_VALUE_1)
        } else {
            fbeValue.int8b1 = ChronoxorEnums.EnumInt8.ENUM_VALUE_1
        }
        fbeCurrentSize += int8b1.fbeSize

        if fbeCurrentSize + int8b2.fbeSize <= fbeStructSize {
            fbeValue.int8b2 = int8b2.get(defaults: ChronoxorEnums.EnumInt8.ENUM_VALUE_2)
        } else {
            fbeValue.int8b2 = ChronoxorEnums.EnumInt8.ENUM_VALUE_2
        }
        fbeCurrentSize += int8b2.fbeSize

        if fbeCurrentSize + int8b3.fbeSize <= fbeStructSize {
            fbeValue.int8b3 = int8b3.get(defaults: ChronoxorEnums.EnumInt8.ENUM_VALUE_3)
        } else {
            fbeValue.int8b3 = ChronoxorEnums.EnumInt8.ENUM_VALUE_3
        }
        fbeCurrentSize += int8b3.fbeSize

        if fbeCurrentSize + int8b4.fbeSize <= fbeStructSize {
            fbeValue.int8b4 = int8b4.get(defaults: ChronoxorEnums.EnumInt8.ENUM_VALUE_4)
        } else {
            fbeValue.int8b4 = ChronoxorEnums.EnumInt8.ENUM_VALUE_4
        }
        fbeCurrentSize += int8b4.fbeSize

        if fbeCurrentSize + int8b5.fbeSize <= fbeStructSize {
            fbeValue.int8b5 = int8b5.get(defaults: ChronoxorEnums.EnumInt8.ENUM_VALUE_5)
        } else {
            fbeValue.int8b5 = ChronoxorEnums.EnumInt8.ENUM_VALUE_5
        }
        fbeCurrentSize += int8b5.fbeSize

        if fbeCurrentSize + uint8b0.fbeSize <= fbeStructSize {
            fbeValue.uint8b0 = uint8b0.get(defaults: ChronoxorEnums.EnumUInt8.ENUM_VALUE_0)
        } else {
            fbeValue.uint8b0 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_0
        }
        fbeCurrentSize += uint8b0.fbeSize

        if fbeCurrentSize + uint8b1.fbeSize <= fbeStructSize {
            fbeValue.uint8b1 = uint8b1.get(defaults: ChronoxorEnums.EnumUInt8.ENUM_VALUE_1)
        } else {
            fbeValue.uint8b1 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_1
        }
        fbeCurrentSize += uint8b1.fbeSize

        if fbeCurrentSize + uint8b2.fbeSize <= fbeStructSize {
            fbeValue.uint8b2 = uint8b2.get(defaults: ChronoxorEnums.EnumUInt8.ENUM_VALUE_2)
        } else {
            fbeValue.uint8b2 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_2
        }
        fbeCurrentSize += uint8b2.fbeSize

        if fbeCurrentSize + uint8b3.fbeSize <= fbeStructSize {
            fbeValue.uint8b3 = uint8b3.get(defaults: ChronoxorEnums.EnumUInt8.ENUM_VALUE_3)
        } else {
            fbeValue.uint8b3 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_3
        }
        fbeCurrentSize += uint8b3.fbeSize

        if fbeCurrentSize + uint8b4.fbeSize <= fbeStructSize {
            fbeValue.uint8b4 = uint8b4.get(defaults: ChronoxorEnums.EnumUInt8.ENUM_VALUE_4)
        } else {
            fbeValue.uint8b4 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_4
        }
        fbeCurrentSize += uint8b4.fbeSize

        if fbeCurrentSize + uint8b5.fbeSize <= fbeStructSize {
            fbeValue.uint8b5 = uint8b5.get(defaults: ChronoxorEnums.EnumUInt8.ENUM_VALUE_5)
        } else {
            fbeValue.uint8b5 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_5
        }
        fbeCurrentSize += uint8b5.fbeSize

        if fbeCurrentSize + int16b0.fbeSize <= fbeStructSize {
            fbeValue.int16b0 = int16b0.get(defaults: ChronoxorEnums.EnumInt16.ENUM_VALUE_0)
        } else {
            fbeValue.int16b0 = ChronoxorEnums.EnumInt16.ENUM_VALUE_0
        }
        fbeCurrentSize += int16b0.fbeSize

        if fbeCurrentSize + int16b1.fbeSize <= fbeStructSize {
            fbeValue.int16b1 = int16b1.get(defaults: ChronoxorEnums.EnumInt16.ENUM_VALUE_1)
        } else {
            fbeValue.int16b1 = ChronoxorEnums.EnumInt16.ENUM_VALUE_1
        }
        fbeCurrentSize += int16b1.fbeSize

        if fbeCurrentSize + int16b2.fbeSize <= fbeStructSize {
            fbeValue.int16b2 = int16b2.get(defaults: ChronoxorEnums.EnumInt16.ENUM_VALUE_2)
        } else {
            fbeValue.int16b2 = ChronoxorEnums.EnumInt16.ENUM_VALUE_2
        }
        fbeCurrentSize += int16b2.fbeSize

        if fbeCurrentSize + int16b3.fbeSize <= fbeStructSize {
            fbeValue.int16b3 = int16b3.get(defaults: ChronoxorEnums.EnumInt16.ENUM_VALUE_3)
        } else {
            fbeValue.int16b3 = ChronoxorEnums.EnumInt16.ENUM_VALUE_3
        }
        fbeCurrentSize += int16b3.fbeSize

        if fbeCurrentSize + int16b4.fbeSize <= fbeStructSize {
            fbeValue.int16b4 = int16b4.get(defaults: ChronoxorEnums.EnumInt16.ENUM_VALUE_4)
        } else {
            fbeValue.int16b4 = ChronoxorEnums.EnumInt16.ENUM_VALUE_4
        }
        fbeCurrentSize += int16b4.fbeSize

        if fbeCurrentSize + int16b5.fbeSize <= fbeStructSize {
            fbeValue.int16b5 = int16b5.get(defaults: ChronoxorEnums.EnumInt16.ENUM_VALUE_5)
        } else {
            fbeValue.int16b5 = ChronoxorEnums.EnumInt16.ENUM_VALUE_5
        }
        fbeCurrentSize += int16b5.fbeSize

        if fbeCurrentSize + uint16b0.fbeSize <= fbeStructSize {
            fbeValue.uint16b0 = uint16b0.get(defaults: ChronoxorEnums.EnumUInt16.ENUM_VALUE_0)
        } else {
            fbeValue.uint16b0 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_0
        }
        fbeCurrentSize += uint16b0.fbeSize

        if fbeCurrentSize + uint16b1.fbeSize <= fbeStructSize {
            fbeValue.uint16b1 = uint16b1.get(defaults: ChronoxorEnums.EnumUInt16.ENUM_VALUE_1)
        } else {
            fbeValue.uint16b1 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_1
        }
        fbeCurrentSize += uint16b1.fbeSize

        if fbeCurrentSize + uint16b2.fbeSize <= fbeStructSize {
            fbeValue.uint16b2 = uint16b2.get(defaults: ChronoxorEnums.EnumUInt16.ENUM_VALUE_2)
        } else {
            fbeValue.uint16b2 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_2
        }
        fbeCurrentSize += uint16b2.fbeSize

        if fbeCurrentSize + uint16b3.fbeSize <= fbeStructSize {
            fbeValue.uint16b3 = uint16b3.get(defaults: ChronoxorEnums.EnumUInt16.ENUM_VALUE_3)
        } else {
            fbeValue.uint16b3 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_3
        }
        fbeCurrentSize += uint16b3.fbeSize

        if fbeCurrentSize + uint16b4.fbeSize <= fbeStructSize {
            fbeValue.uint16b4 = uint16b4.get(defaults: ChronoxorEnums.EnumUInt16.ENUM_VALUE_4)
        } else {
            fbeValue.uint16b4 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_4
        }
        fbeCurrentSize += uint16b4.fbeSize

        if fbeCurrentSize + uint16b5.fbeSize <= fbeStructSize {
            fbeValue.uint16b5 = uint16b5.get(defaults: ChronoxorEnums.EnumUInt16.ENUM_VALUE_5)
        } else {
            fbeValue.uint16b5 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_5
        }
        fbeCurrentSize += uint16b5.fbeSize

        if fbeCurrentSize + int32b0.fbeSize <= fbeStructSize {
            fbeValue.int32b0 = int32b0.get(defaults: ChronoxorEnums.EnumInt32.ENUM_VALUE_0)
        } else {
            fbeValue.int32b0 = ChronoxorEnums.EnumInt32.ENUM_VALUE_0
        }
        fbeCurrentSize += int32b0.fbeSize

        if fbeCurrentSize + int32b1.fbeSize <= fbeStructSize {
            fbeValue.int32b1 = int32b1.get(defaults: ChronoxorEnums.EnumInt32.ENUM_VALUE_1)
        } else {
            fbeValue.int32b1 = ChronoxorEnums.EnumInt32.ENUM_VALUE_1
        }
        fbeCurrentSize += int32b1.fbeSize

        if fbeCurrentSize + int32b2.fbeSize <= fbeStructSize {
            fbeValue.int32b2 = int32b2.get(defaults: ChronoxorEnums.EnumInt32.ENUM_VALUE_2)
        } else {
            fbeValue.int32b2 = ChronoxorEnums.EnumInt32.ENUM_VALUE_2
        }
        fbeCurrentSize += int32b2.fbeSize

        if fbeCurrentSize + int32b3.fbeSize <= fbeStructSize {
            fbeValue.int32b3 = int32b3.get(defaults: ChronoxorEnums.EnumInt32.ENUM_VALUE_3)
        } else {
            fbeValue.int32b3 = ChronoxorEnums.EnumInt32.ENUM_VALUE_3
        }
        fbeCurrentSize += int32b3.fbeSize

        if fbeCurrentSize + int32b4.fbeSize <= fbeStructSize {
            fbeValue.int32b4 = int32b4.get(defaults: ChronoxorEnums.EnumInt32.ENUM_VALUE_4)
        } else {
            fbeValue.int32b4 = ChronoxorEnums.EnumInt32.ENUM_VALUE_4
        }
        fbeCurrentSize += int32b4.fbeSize

        if fbeCurrentSize + int32b5.fbeSize <= fbeStructSize {
            fbeValue.int32b5 = int32b5.get(defaults: ChronoxorEnums.EnumInt32.ENUM_VALUE_5)
        } else {
            fbeValue.int32b5 = ChronoxorEnums.EnumInt32.ENUM_VALUE_5
        }
        fbeCurrentSize += int32b5.fbeSize

        if fbeCurrentSize + uint32b0.fbeSize <= fbeStructSize {
            fbeValue.uint32b0 = uint32b0.get(defaults: ChronoxorEnums.EnumUInt32.ENUM_VALUE_0)
        } else {
            fbeValue.uint32b0 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_0
        }
        fbeCurrentSize += uint32b0.fbeSize

        if fbeCurrentSize + uint32b1.fbeSize <= fbeStructSize {
            fbeValue.uint32b1 = uint32b1.get(defaults: ChronoxorEnums.EnumUInt32.ENUM_VALUE_1)
        } else {
            fbeValue.uint32b1 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_1
        }
        fbeCurrentSize += uint32b1.fbeSize

        if fbeCurrentSize + uint32b2.fbeSize <= fbeStructSize {
            fbeValue.uint32b2 = uint32b2.get(defaults: ChronoxorEnums.EnumUInt32.ENUM_VALUE_2)
        } else {
            fbeValue.uint32b2 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_2
        }
        fbeCurrentSize += uint32b2.fbeSize

        if fbeCurrentSize + uint32b3.fbeSize <= fbeStructSize {
            fbeValue.uint32b3 = uint32b3.get(defaults: ChronoxorEnums.EnumUInt32.ENUM_VALUE_3)
        } else {
            fbeValue.uint32b3 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_3
        }
        fbeCurrentSize += uint32b3.fbeSize

        if fbeCurrentSize + uint32b4.fbeSize <= fbeStructSize {
            fbeValue.uint32b4 = uint32b4.get(defaults: ChronoxorEnums.EnumUInt32.ENUM_VALUE_4)
        } else {
            fbeValue.uint32b4 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_4
        }
        fbeCurrentSize += uint32b4.fbeSize

        if fbeCurrentSize + uint32b5.fbeSize <= fbeStructSize {
            fbeValue.uint32b5 = uint32b5.get(defaults: ChronoxorEnums.EnumUInt32.ENUM_VALUE_5)
        } else {
            fbeValue.uint32b5 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_5
        }
        fbeCurrentSize += uint32b5.fbeSize

        if fbeCurrentSize + int64b0.fbeSize <= fbeStructSize {
            fbeValue.int64b0 = int64b0.get(defaults: ChronoxorEnums.EnumInt64.ENUM_VALUE_0)
        } else {
            fbeValue.int64b0 = ChronoxorEnums.EnumInt64.ENUM_VALUE_0
        }
        fbeCurrentSize += int64b0.fbeSize

        if fbeCurrentSize + int64b1.fbeSize <= fbeStructSize {
            fbeValue.int64b1 = int64b1.get(defaults: ChronoxorEnums.EnumInt64.ENUM_VALUE_1)
        } else {
            fbeValue.int64b1 = ChronoxorEnums.EnumInt64.ENUM_VALUE_1
        }
        fbeCurrentSize += int64b1.fbeSize

        if fbeCurrentSize + int64b2.fbeSize <= fbeStructSize {
            fbeValue.int64b2 = int64b2.get(defaults: ChronoxorEnums.EnumInt64.ENUM_VALUE_2)
        } else {
            fbeValue.int64b2 = ChronoxorEnums.EnumInt64.ENUM_VALUE_2
        }
        fbeCurrentSize += int64b2.fbeSize

        if fbeCurrentSize + int64b3.fbeSize <= fbeStructSize {
            fbeValue.int64b3 = int64b3.get(defaults: ChronoxorEnums.EnumInt64.ENUM_VALUE_3)
        } else {
            fbeValue.int64b3 = ChronoxorEnums.EnumInt64.ENUM_VALUE_3
        }
        fbeCurrentSize += int64b3.fbeSize

        if fbeCurrentSize + int64b4.fbeSize <= fbeStructSize {
            fbeValue.int64b4 = int64b4.get(defaults: ChronoxorEnums.EnumInt64.ENUM_VALUE_4)
        } else {
            fbeValue.int64b4 = ChronoxorEnums.EnumInt64.ENUM_VALUE_4
        }
        fbeCurrentSize += int64b4.fbeSize

        if fbeCurrentSize + int64b5.fbeSize <= fbeStructSize {
            fbeValue.int64b5 = int64b5.get(defaults: ChronoxorEnums.EnumInt64.ENUM_VALUE_5)
        } else {
            fbeValue.int64b5 = ChronoxorEnums.EnumInt64.ENUM_VALUE_5
        }
        fbeCurrentSize += int64b5.fbeSize

        if fbeCurrentSize + uint64b0.fbeSize <= fbeStructSize {
            fbeValue.uint64b0 = uint64b0.get(defaults: ChronoxorEnums.EnumUInt64.ENUM_VALUE_0)
        } else {
            fbeValue.uint64b0 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_0
        }
        fbeCurrentSize += uint64b0.fbeSize

        if fbeCurrentSize + uint64b1.fbeSize <= fbeStructSize {
            fbeValue.uint64b1 = uint64b1.get(defaults: ChronoxorEnums.EnumUInt64.ENUM_VALUE_1)
        } else {
            fbeValue.uint64b1 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_1
        }
        fbeCurrentSize += uint64b1.fbeSize

        if fbeCurrentSize + uint64b2.fbeSize <= fbeStructSize {
            fbeValue.uint64b2 = uint64b2.get(defaults: ChronoxorEnums.EnumUInt64.ENUM_VALUE_2)
        } else {
            fbeValue.uint64b2 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_2
        }
        fbeCurrentSize += uint64b2.fbeSize

        if fbeCurrentSize + uint64b3.fbeSize <= fbeStructSize {
            fbeValue.uint64b3 = uint64b3.get(defaults: ChronoxorEnums.EnumUInt64.ENUM_VALUE_3)
        } else {
            fbeValue.uint64b3 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_3
        }
        fbeCurrentSize += uint64b3.fbeSize

        if fbeCurrentSize + uint64b4.fbeSize <= fbeStructSize {
            fbeValue.uint64b4 = uint64b4.get(defaults: ChronoxorEnums.EnumUInt64.ENUM_VALUE_4)
        } else {
            fbeValue.uint64b4 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_4
        }
        fbeCurrentSize += uint64b4.fbeSize

        if fbeCurrentSize + uint64b5.fbeSize <= fbeStructSize {
            fbeValue.uint64b5 = uint64b5.get(defaults: ChronoxorEnums.EnumUInt64.ENUM_VALUE_5)
        } else {
            fbeValue.uint64b5 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_5
        }
        fbeCurrentSize += uint64b5.fbeSize
    }

    // Set the struct value (begin phase)
    func setBegin() throws -> Int {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = fbeBody
        let fbeStructOffset = try _buffer.allocate(size: fbeStructSize) - _buffer.offset
        if (fbeStructOffset <= 0) || ((_buffer.offset + fbeStructOffset + fbeStructSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        write(offset: fbeOffset, value: UInt32(fbeStructOffset))
        write(offset: fbeStructOffset, value: UInt32(fbeStructSize))
        write(offset: fbeStructOffset + 4, value: UInt32(fbeType))

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Set the struct value (end phase)
    public func setEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Set the struct value
    public func set(value fbeValue: Enums) throws {
        let fbeBegin = try setBegin()
        if fbeBegin == 0 {
            return
        }

        try setFields(fbeValue: fbeValue)
        setEnd(fbeBegin: fbeBegin)
    }

    // Set the struct fields values
    public func setFields(fbeValue: Enums) throws {
        try byte0.set(value: fbeValue.byte0)
        try byte1.set(value: fbeValue.byte1)
        try byte2.set(value: fbeValue.byte2)
        try byte3.set(value: fbeValue.byte3)
        try byte4.set(value: fbeValue.byte4)
        try byte5.set(value: fbeValue.byte5)
        try char0.set(value: fbeValue.char0)
        try char1.set(value: fbeValue.char1)
        try char2.set(value: fbeValue.char2)
        try char3.set(value: fbeValue.char3)
        try char4.set(value: fbeValue.char4)
        try char5.set(value: fbeValue.char5)
        try wchar0.set(value: fbeValue.wchar0)
        try wchar1.set(value: fbeValue.wchar1)
        try wchar2.set(value: fbeValue.wchar2)
        try wchar3.set(value: fbeValue.wchar3)
        try wchar4.set(value: fbeValue.wchar4)
        try wchar5.set(value: fbeValue.wchar5)
        try int8b0.set(value: fbeValue.int8b0)
        try int8b1.set(value: fbeValue.int8b1)
        try int8b2.set(value: fbeValue.int8b2)
        try int8b3.set(value: fbeValue.int8b3)
        try int8b4.set(value: fbeValue.int8b4)
        try int8b5.set(value: fbeValue.int8b5)
        try uint8b0.set(value: fbeValue.uint8b0)
        try uint8b1.set(value: fbeValue.uint8b1)
        try uint8b2.set(value: fbeValue.uint8b2)
        try uint8b3.set(value: fbeValue.uint8b3)
        try uint8b4.set(value: fbeValue.uint8b4)
        try uint8b5.set(value: fbeValue.uint8b5)
        try int16b0.set(value: fbeValue.int16b0)
        try int16b1.set(value: fbeValue.int16b1)
        try int16b2.set(value: fbeValue.int16b2)
        try int16b3.set(value: fbeValue.int16b3)
        try int16b4.set(value: fbeValue.int16b4)
        try int16b5.set(value: fbeValue.int16b5)
        try uint16b0.set(value: fbeValue.uint16b0)
        try uint16b1.set(value: fbeValue.uint16b1)
        try uint16b2.set(value: fbeValue.uint16b2)
        try uint16b3.set(value: fbeValue.uint16b3)
        try uint16b4.set(value: fbeValue.uint16b4)
        try uint16b5.set(value: fbeValue.uint16b5)
        try int32b0.set(value: fbeValue.int32b0)
        try int32b1.set(value: fbeValue.int32b1)
        try int32b2.set(value: fbeValue.int32b2)
        try int32b3.set(value: fbeValue.int32b3)
        try int32b4.set(value: fbeValue.int32b4)
        try int32b5.set(value: fbeValue.int32b5)
        try uint32b0.set(value: fbeValue.uint32b0)
        try uint32b1.set(value: fbeValue.uint32b1)
        try uint32b2.set(value: fbeValue.uint32b2)
        try uint32b3.set(value: fbeValue.uint32b3)
        try uint32b4.set(value: fbeValue.uint32b4)
        try uint32b5.set(value: fbeValue.uint32b5)
        try int64b0.set(value: fbeValue.int64b0)
        try int64b1.set(value: fbeValue.int64b1)
        try int64b2.set(value: fbeValue.int64b2)
        try int64b3.set(value: fbeValue.int64b3)
        try int64b4.set(value: fbeValue.int64b4)
        try int64b5.set(value: fbeValue.int64b5)
        try uint64b0.set(value: fbeValue.uint64b0)
        try uint64b1.set(value: fbeValue.uint64b1)
        try uint64b2.set(value: fbeValue.uint64b2)
        try uint64b3.set(value: fbeValue.uint64b3)
        try uint64b4.set(value: fbeValue.uint64b4)
        try uint64b5.set(value: fbeValue.uint64b5)
    }
}
