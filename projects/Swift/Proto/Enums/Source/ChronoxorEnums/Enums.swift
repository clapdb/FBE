//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe

public protocol EnumsBase {
    var byte0: EnumByte { get set }
    var byte1: EnumByte { get set }
    var byte2: EnumByte { get set }
    var byte3: EnumByte { get set }
    var byte4: EnumByte { get set }
    var byte5: EnumByte { get set }
    var char0: EnumChar { get set }
    var char1: EnumChar { get set }
    var char2: EnumChar { get set }
    var char3: EnumChar { get set }
    var char4: EnumChar { get set }
    var char5: EnumChar { get set }
    var wchar0: EnumWChar { get set }
    var wchar1: EnumWChar { get set }
    var wchar2: EnumWChar { get set }
    var wchar3: EnumWChar { get set }
    var wchar4: EnumWChar { get set }
    var wchar5: EnumWChar { get set }
    var int8b0: EnumInt8 { get set }
    var int8b1: EnumInt8 { get set }
    var int8b2: EnumInt8 { get set }
    var int8b3: EnumInt8 { get set }
    var int8b4: EnumInt8 { get set }
    var int8b5: EnumInt8 { get set }
    var uint8b0: EnumUInt8 { get set }
    var uint8b1: EnumUInt8 { get set }
    var uint8b2: EnumUInt8 { get set }
    var uint8b3: EnumUInt8 { get set }
    var uint8b4: EnumUInt8 { get set }
    var uint8b5: EnumUInt8 { get set }
    var int16b0: EnumInt16 { get set }
    var int16b1: EnumInt16 { get set }
    var int16b2: EnumInt16 { get set }
    var int16b3: EnumInt16 { get set }
    var int16b4: EnumInt16 { get set }
    var int16b5: EnumInt16 { get set }
    var uint16b0: EnumUInt16 { get set }
    var uint16b1: EnumUInt16 { get set }
    var uint16b2: EnumUInt16 { get set }
    var uint16b3: EnumUInt16 { get set }
    var uint16b4: EnumUInt16 { get set }
    var uint16b5: EnumUInt16 { get set }
    var int32b0: EnumInt32 { get set }
    var int32b1: EnumInt32 { get set }
    var int32b2: EnumInt32 { get set }
    var int32b3: EnumInt32 { get set }
    var int32b4: EnumInt32 { get set }
    var int32b5: EnumInt32 { get set }
    var uint32b0: EnumUInt32 { get set }
    var uint32b1: EnumUInt32 { get set }
    var uint32b2: EnumUInt32 { get set }
    var uint32b3: EnumUInt32 { get set }
    var uint32b4: EnumUInt32 { get set }
    var uint32b5: EnumUInt32 { get set }
    var int64b0: EnumInt64 { get set }
    var int64b1: EnumInt64 { get set }
    var int64b2: EnumInt64 { get set }
    var int64b3: EnumInt64 { get set }
    var int64b4: EnumInt64 { get set }
    var int64b5: EnumInt64 { get set }
    var uint64b0: EnumUInt64 { get set }
    var uint64b1: EnumUInt64 { get set }
    var uint64b2: EnumUInt64 { get set }
    var uint64b3: EnumUInt64 { get set }
    var uint64b4: EnumUInt64 { get set }
    var uint64b5: EnumUInt64 { get set }
}

public protocol EnumsInheritance {
    var parent: Enums { get set }
}

extension EnumsInheritance {
    public var byte0: EnumByte {
        get { return parent.byte0 }
        set { parent.byte0 = newValue }
    }
    public var byte1: EnumByte {
        get { return parent.byte1 }
        set { parent.byte1 = newValue }
    }
    public var byte2: EnumByte {
        get { return parent.byte2 }
        set { parent.byte2 = newValue }
    }
    public var byte3: EnumByte {
        get { return parent.byte3 }
        set { parent.byte3 = newValue }
    }
    public var byte4: EnumByte {
        get { return parent.byte4 }
        set { parent.byte4 = newValue }
    }
    public var byte5: EnumByte {
        get { return parent.byte5 }
        set { parent.byte5 = newValue }
    }
    public var char0: EnumChar {
        get { return parent.char0 }
        set { parent.char0 = newValue }
    }
    public var char1: EnumChar {
        get { return parent.char1 }
        set { parent.char1 = newValue }
    }
    public var char2: EnumChar {
        get { return parent.char2 }
        set { parent.char2 = newValue }
    }
    public var char3: EnumChar {
        get { return parent.char3 }
        set { parent.char3 = newValue }
    }
    public var char4: EnumChar {
        get { return parent.char4 }
        set { parent.char4 = newValue }
    }
    public var char5: EnumChar {
        get { return parent.char5 }
        set { parent.char5 = newValue }
    }
    public var wchar0: EnumWChar {
        get { return parent.wchar0 }
        set { parent.wchar0 = newValue }
    }
    public var wchar1: EnumWChar {
        get { return parent.wchar1 }
        set { parent.wchar1 = newValue }
    }
    public var wchar2: EnumWChar {
        get { return parent.wchar2 }
        set { parent.wchar2 = newValue }
    }
    public var wchar3: EnumWChar {
        get { return parent.wchar3 }
        set { parent.wchar3 = newValue }
    }
    public var wchar4: EnumWChar {
        get { return parent.wchar4 }
        set { parent.wchar4 = newValue }
    }
    public var wchar5: EnumWChar {
        get { return parent.wchar5 }
        set { parent.wchar5 = newValue }
    }
    public var int8b0: EnumInt8 {
        get { return parent.int8b0 }
        set { parent.int8b0 = newValue }
    }
    public var int8b1: EnumInt8 {
        get { return parent.int8b1 }
        set { parent.int8b1 = newValue }
    }
    public var int8b2: EnumInt8 {
        get { return parent.int8b2 }
        set { parent.int8b2 = newValue }
    }
    public var int8b3: EnumInt8 {
        get { return parent.int8b3 }
        set { parent.int8b3 = newValue }
    }
    public var int8b4: EnumInt8 {
        get { return parent.int8b4 }
        set { parent.int8b4 = newValue }
    }
    public var int8b5: EnumInt8 {
        get { return parent.int8b5 }
        set { parent.int8b5 = newValue }
    }
    public var uint8b0: EnumUInt8 {
        get { return parent.uint8b0 }
        set { parent.uint8b0 = newValue }
    }
    public var uint8b1: EnumUInt8 {
        get { return parent.uint8b1 }
        set { parent.uint8b1 = newValue }
    }
    public var uint8b2: EnumUInt8 {
        get { return parent.uint8b2 }
        set { parent.uint8b2 = newValue }
    }
    public var uint8b3: EnumUInt8 {
        get { return parent.uint8b3 }
        set { parent.uint8b3 = newValue }
    }
    public var uint8b4: EnumUInt8 {
        get { return parent.uint8b4 }
        set { parent.uint8b4 = newValue }
    }
    public var uint8b5: EnumUInt8 {
        get { return parent.uint8b5 }
        set { parent.uint8b5 = newValue }
    }
    public var int16b0: EnumInt16 {
        get { return parent.int16b0 }
        set { parent.int16b0 = newValue }
    }
    public var int16b1: EnumInt16 {
        get { return parent.int16b1 }
        set { parent.int16b1 = newValue }
    }
    public var int16b2: EnumInt16 {
        get { return parent.int16b2 }
        set { parent.int16b2 = newValue }
    }
    public var int16b3: EnumInt16 {
        get { return parent.int16b3 }
        set { parent.int16b3 = newValue }
    }
    public var int16b4: EnumInt16 {
        get { return parent.int16b4 }
        set { parent.int16b4 = newValue }
    }
    public var int16b5: EnumInt16 {
        get { return parent.int16b5 }
        set { parent.int16b5 = newValue }
    }
    public var uint16b0: EnumUInt16 {
        get { return parent.uint16b0 }
        set { parent.uint16b0 = newValue }
    }
    public var uint16b1: EnumUInt16 {
        get { return parent.uint16b1 }
        set { parent.uint16b1 = newValue }
    }
    public var uint16b2: EnumUInt16 {
        get { return parent.uint16b2 }
        set { parent.uint16b2 = newValue }
    }
    public var uint16b3: EnumUInt16 {
        get { return parent.uint16b3 }
        set { parent.uint16b3 = newValue }
    }
    public var uint16b4: EnumUInt16 {
        get { return parent.uint16b4 }
        set { parent.uint16b4 = newValue }
    }
    public var uint16b5: EnumUInt16 {
        get { return parent.uint16b5 }
        set { parent.uint16b5 = newValue }
    }
    public var int32b0: EnumInt32 {
        get { return parent.int32b0 }
        set { parent.int32b0 = newValue }
    }
    public var int32b1: EnumInt32 {
        get { return parent.int32b1 }
        set { parent.int32b1 = newValue }
    }
    public var int32b2: EnumInt32 {
        get { return parent.int32b2 }
        set { parent.int32b2 = newValue }
    }
    public var int32b3: EnumInt32 {
        get { return parent.int32b3 }
        set { parent.int32b3 = newValue }
    }
    public var int32b4: EnumInt32 {
        get { return parent.int32b4 }
        set { parent.int32b4 = newValue }
    }
    public var int32b5: EnumInt32 {
        get { return parent.int32b5 }
        set { parent.int32b5 = newValue }
    }
    public var uint32b0: EnumUInt32 {
        get { return parent.uint32b0 }
        set { parent.uint32b0 = newValue }
    }
    public var uint32b1: EnumUInt32 {
        get { return parent.uint32b1 }
        set { parent.uint32b1 = newValue }
    }
    public var uint32b2: EnumUInt32 {
        get { return parent.uint32b2 }
        set { parent.uint32b2 = newValue }
    }
    public var uint32b3: EnumUInt32 {
        get { return parent.uint32b3 }
        set { parent.uint32b3 = newValue }
    }
    public var uint32b4: EnumUInt32 {
        get { return parent.uint32b4 }
        set { parent.uint32b4 = newValue }
    }
    public var uint32b5: EnumUInt32 {
        get { return parent.uint32b5 }
        set { parent.uint32b5 = newValue }
    }
    public var int64b0: EnumInt64 {
        get { return parent.int64b0 }
        set { parent.int64b0 = newValue }
    }
    public var int64b1: EnumInt64 {
        get { return parent.int64b1 }
        set { parent.int64b1 = newValue }
    }
    public var int64b2: EnumInt64 {
        get { return parent.int64b2 }
        set { parent.int64b2 = newValue }
    }
    public var int64b3: EnumInt64 {
        get { return parent.int64b3 }
        set { parent.int64b3 = newValue }
    }
    public var int64b4: EnumInt64 {
        get { return parent.int64b4 }
        set { parent.int64b4 = newValue }
    }
    public var int64b5: EnumInt64 {
        get { return parent.int64b5 }
        set { parent.int64b5 = newValue }
    }
    public var uint64b0: EnumUInt64 {
        get { return parent.uint64b0 }
        set { parent.uint64b0 = newValue }
    }
    public var uint64b1: EnumUInt64 {
        get { return parent.uint64b1 }
        set { parent.uint64b1 = newValue }
    }
    public var uint64b2: EnumUInt64 {
        get { return parent.uint64b2 }
        set { parent.uint64b2 = newValue }
    }
    public var uint64b3: EnumUInt64 {
        get { return parent.uint64b3 }
        set { parent.uint64b3 = newValue }
    }
    public var uint64b4: EnumUInt64 {
        get { return parent.uint64b4 }
        set { parent.uint64b4 = newValue }
    }
    public var uint64b5: EnumUInt64 {
        get { return parent.uint64b5 }
        set { parent.uint64b5 = newValue }
    }
}

public struct Enums: EnumsBase, Comparable, Hashable, Codable {
    public var byte0: EnumByte = ChronoxorEnums.EnumByte.ENUM_VALUE_0
    public var byte1: EnumByte = ChronoxorEnums.EnumByte.ENUM_VALUE_1
    public var byte2: EnumByte = ChronoxorEnums.EnumByte.ENUM_VALUE_2
    public var byte3: EnumByte = ChronoxorEnums.EnumByte.ENUM_VALUE_3
    public var byte4: EnumByte = ChronoxorEnums.EnumByte.ENUM_VALUE_4
    public var byte5: EnumByte = ChronoxorEnums.EnumByte.ENUM_VALUE_5
    public var char0: EnumChar = ChronoxorEnums.EnumChar.ENUM_VALUE_0
    public var char1: EnumChar = ChronoxorEnums.EnumChar.ENUM_VALUE_1
    public var char2: EnumChar = ChronoxorEnums.EnumChar.ENUM_VALUE_2
    public var char3: EnumChar = ChronoxorEnums.EnumChar.ENUM_VALUE_3
    public var char4: EnumChar = ChronoxorEnums.EnumChar.ENUM_VALUE_4
    public var char5: EnumChar = ChronoxorEnums.EnumChar.ENUM_VALUE_5
    public var wchar0: EnumWChar = ChronoxorEnums.EnumWChar.ENUM_VALUE_0
    public var wchar1: EnumWChar = ChronoxorEnums.EnumWChar.ENUM_VALUE_1
    public var wchar2: EnumWChar = ChronoxorEnums.EnumWChar.ENUM_VALUE_2
    public var wchar3: EnumWChar = ChronoxorEnums.EnumWChar.ENUM_VALUE_3
    public var wchar4: EnumWChar = ChronoxorEnums.EnumWChar.ENUM_VALUE_4
    public var wchar5: EnumWChar = ChronoxorEnums.EnumWChar.ENUM_VALUE_5
    public var int8b0: EnumInt8 = ChronoxorEnums.EnumInt8.ENUM_VALUE_0
    public var int8b1: EnumInt8 = ChronoxorEnums.EnumInt8.ENUM_VALUE_1
    public var int8b2: EnumInt8 = ChronoxorEnums.EnumInt8.ENUM_VALUE_2
    public var int8b3: EnumInt8 = ChronoxorEnums.EnumInt8.ENUM_VALUE_3
    public var int8b4: EnumInt8 = ChronoxorEnums.EnumInt8.ENUM_VALUE_4
    public var int8b5: EnumInt8 = ChronoxorEnums.EnumInt8.ENUM_VALUE_5
    public var uint8b0: EnumUInt8 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_0
    public var uint8b1: EnumUInt8 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_1
    public var uint8b2: EnumUInt8 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_2
    public var uint8b3: EnumUInt8 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_3
    public var uint8b4: EnumUInt8 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_4
    public var uint8b5: EnumUInt8 = ChronoxorEnums.EnumUInt8.ENUM_VALUE_5
    public var int16b0: EnumInt16 = ChronoxorEnums.EnumInt16.ENUM_VALUE_0
    public var int16b1: EnumInt16 = ChronoxorEnums.EnumInt16.ENUM_VALUE_1
    public var int16b2: EnumInt16 = ChronoxorEnums.EnumInt16.ENUM_VALUE_2
    public var int16b3: EnumInt16 = ChronoxorEnums.EnumInt16.ENUM_VALUE_3
    public var int16b4: EnumInt16 = ChronoxorEnums.EnumInt16.ENUM_VALUE_4
    public var int16b5: EnumInt16 = ChronoxorEnums.EnumInt16.ENUM_VALUE_5
    public var uint16b0: EnumUInt16 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_0
    public var uint16b1: EnumUInt16 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_1
    public var uint16b2: EnumUInt16 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_2
    public var uint16b3: EnumUInt16 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_3
    public var uint16b4: EnumUInt16 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_4
    public var uint16b5: EnumUInt16 = ChronoxorEnums.EnumUInt16.ENUM_VALUE_5
    public var int32b0: EnumInt32 = ChronoxorEnums.EnumInt32.ENUM_VALUE_0
    public var int32b1: EnumInt32 = ChronoxorEnums.EnumInt32.ENUM_VALUE_1
    public var int32b2: EnumInt32 = ChronoxorEnums.EnumInt32.ENUM_VALUE_2
    public var int32b3: EnumInt32 = ChronoxorEnums.EnumInt32.ENUM_VALUE_3
    public var int32b4: EnumInt32 = ChronoxorEnums.EnumInt32.ENUM_VALUE_4
    public var int32b5: EnumInt32 = ChronoxorEnums.EnumInt32.ENUM_VALUE_5
    public var uint32b0: EnumUInt32 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_0
    public var uint32b1: EnumUInt32 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_1
    public var uint32b2: EnumUInt32 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_2
    public var uint32b3: EnumUInt32 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_3
    public var uint32b4: EnumUInt32 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_4
    public var uint32b5: EnumUInt32 = ChronoxorEnums.EnumUInt32.ENUM_VALUE_5
    public var int64b0: EnumInt64 = ChronoxorEnums.EnumInt64.ENUM_VALUE_0
    public var int64b1: EnumInt64 = ChronoxorEnums.EnumInt64.ENUM_VALUE_1
    public var int64b2: EnumInt64 = ChronoxorEnums.EnumInt64.ENUM_VALUE_2
    public var int64b3: EnumInt64 = ChronoxorEnums.EnumInt64.ENUM_VALUE_3
    public var int64b4: EnumInt64 = ChronoxorEnums.EnumInt64.ENUM_VALUE_4
    public var int64b5: EnumInt64 = ChronoxorEnums.EnumInt64.ENUM_VALUE_5
    public var uint64b0: EnumUInt64 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_0
    public var uint64b1: EnumUInt64 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_1
    public var uint64b2: EnumUInt64 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_2
    public var uint64b3: EnumUInt64 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_3
    public var uint64b4: EnumUInt64 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_4
    public var uint64b5: EnumUInt64 = ChronoxorEnums.EnumUInt64.ENUM_VALUE_5

    public init() { }
    public init(byte0: EnumByte, byte1: EnumByte, byte2: EnumByte, byte3: EnumByte, byte4: EnumByte, byte5: EnumByte, char0: EnumChar, char1: EnumChar, char2: EnumChar, char3: EnumChar, char4: EnumChar, char5: EnumChar, wchar0: EnumWChar, wchar1: EnumWChar, wchar2: EnumWChar, wchar3: EnumWChar, wchar4: EnumWChar, wchar5: EnumWChar, int8b0: EnumInt8, int8b1: EnumInt8, int8b2: EnumInt8, int8b3: EnumInt8, int8b4: EnumInt8, int8b5: EnumInt8, uint8b0: EnumUInt8, uint8b1: EnumUInt8, uint8b2: EnumUInt8, uint8b3: EnumUInt8, uint8b4: EnumUInt8, uint8b5: EnumUInt8, int16b0: EnumInt16, int16b1: EnumInt16, int16b2: EnumInt16, int16b3: EnumInt16, int16b4: EnumInt16, int16b5: EnumInt16, uint16b0: EnumUInt16, uint16b1: EnumUInt16, uint16b2: EnumUInt16, uint16b3: EnumUInt16, uint16b4: EnumUInt16, uint16b5: EnumUInt16, int32b0: EnumInt32, int32b1: EnumInt32, int32b2: EnumInt32, int32b3: EnumInt32, int32b4: EnumInt32, int32b5: EnumInt32, uint32b0: EnumUInt32, uint32b1: EnumUInt32, uint32b2: EnumUInt32, uint32b3: EnumUInt32, uint32b4: EnumUInt32, uint32b5: EnumUInt32, int64b0: EnumInt64, int64b1: EnumInt64, int64b2: EnumInt64, int64b3: EnumInt64, int64b4: EnumInt64, int64b5: EnumInt64, uint64b0: EnumUInt64, uint64b1: EnumUInt64, uint64b2: EnumUInt64, uint64b3: EnumUInt64, uint64b4: EnumUInt64, uint64b5: EnumUInt64) {

        self.byte0 = byte0
        self.byte1 = byte1
        self.byte2 = byte2
        self.byte3 = byte3
        self.byte4 = byte4
        self.byte5 = byte5
        self.char0 = char0
        self.char1 = char1
        self.char2 = char2
        self.char3 = char3
        self.char4 = char4
        self.char5 = char5
        self.wchar0 = wchar0
        self.wchar1 = wchar1
        self.wchar2 = wchar2
        self.wchar3 = wchar3
        self.wchar4 = wchar4
        self.wchar5 = wchar5
        self.int8b0 = int8b0
        self.int8b1 = int8b1
        self.int8b2 = int8b2
        self.int8b3 = int8b3
        self.int8b4 = int8b4
        self.int8b5 = int8b5
        self.uint8b0 = uint8b0
        self.uint8b1 = uint8b1
        self.uint8b2 = uint8b2
        self.uint8b3 = uint8b3
        self.uint8b4 = uint8b4
        self.uint8b5 = uint8b5
        self.int16b0 = int16b0
        self.int16b1 = int16b1
        self.int16b2 = int16b2
        self.int16b3 = int16b3
        self.int16b4 = int16b4
        self.int16b5 = int16b5
        self.uint16b0 = uint16b0
        self.uint16b1 = uint16b1
        self.uint16b2 = uint16b2
        self.uint16b3 = uint16b3
        self.uint16b4 = uint16b4
        self.uint16b5 = uint16b5
        self.int32b0 = int32b0
        self.int32b1 = int32b1
        self.int32b2 = int32b2
        self.int32b3 = int32b3
        self.int32b4 = int32b4
        self.int32b5 = int32b5
        self.uint32b0 = uint32b0
        self.uint32b1 = uint32b1
        self.uint32b2 = uint32b2
        self.uint32b3 = uint32b3
        self.uint32b4 = uint32b4
        self.uint32b5 = uint32b5
        self.int64b0 = int64b0
        self.int64b1 = int64b1
        self.int64b2 = int64b2
        self.int64b3 = int64b3
        self.int64b4 = int64b4
        self.int64b5 = int64b5
        self.uint64b0 = uint64b0
        self.uint64b1 = uint64b1
        self.uint64b2 = uint64b2
        self.uint64b3 = uint64b3
        self.uint64b4 = uint64b4
        self.uint64b5 = uint64b5
    }

    public init(other: Enums) {
        self.byte0 = other.byte0
        self.byte1 = other.byte1
        self.byte2 = other.byte2
        self.byte3 = other.byte3
        self.byte4 = other.byte4
        self.byte5 = other.byte5
        self.char0 = other.char0
        self.char1 = other.char1
        self.char2 = other.char2
        self.char3 = other.char3
        self.char4 = other.char4
        self.char5 = other.char5
        self.wchar0 = other.wchar0
        self.wchar1 = other.wchar1
        self.wchar2 = other.wchar2
        self.wchar3 = other.wchar3
        self.wchar4 = other.wchar4
        self.wchar5 = other.wchar5
        self.int8b0 = other.int8b0
        self.int8b1 = other.int8b1
        self.int8b2 = other.int8b2
        self.int8b3 = other.int8b3
        self.int8b4 = other.int8b4
        self.int8b5 = other.int8b5
        self.uint8b0 = other.uint8b0
        self.uint8b1 = other.uint8b1
        self.uint8b2 = other.uint8b2
        self.uint8b3 = other.uint8b3
        self.uint8b4 = other.uint8b4
        self.uint8b5 = other.uint8b5
        self.int16b0 = other.int16b0
        self.int16b1 = other.int16b1
        self.int16b2 = other.int16b2
        self.int16b3 = other.int16b3
        self.int16b4 = other.int16b4
        self.int16b5 = other.int16b5
        self.uint16b0 = other.uint16b0
        self.uint16b1 = other.uint16b1
        self.uint16b2 = other.uint16b2
        self.uint16b3 = other.uint16b3
        self.uint16b4 = other.uint16b4
        self.uint16b5 = other.uint16b5
        self.int32b0 = other.int32b0
        self.int32b1 = other.int32b1
        self.int32b2 = other.int32b2
        self.int32b3 = other.int32b3
        self.int32b4 = other.int32b4
        self.int32b5 = other.int32b5
        self.uint32b0 = other.uint32b0
        self.uint32b1 = other.uint32b1
        self.uint32b2 = other.uint32b2
        self.uint32b3 = other.uint32b3
        self.uint32b4 = other.uint32b4
        self.uint32b5 = other.uint32b5
        self.int64b0 = other.int64b0
        self.int64b1 = other.int64b1
        self.int64b2 = other.int64b2
        self.int64b3 = other.int64b3
        self.int64b4 = other.int64b4
        self.int64b5 = other.int64b5
        self.uint64b0 = other.uint64b0
        self.uint64b1 = other.uint64b1
        self.uint64b2 = other.uint64b2
        self.uint64b3 = other.uint64b3
        self.uint64b4 = other.uint64b4
        self.uint64b5 = other.uint64b5
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        byte0 = try container.decode(ChronoxorEnums.EnumByte.self, forKey: .byte0)
        byte1 = try container.decode(ChronoxorEnums.EnumByte.self, forKey: .byte1)
        byte2 = try container.decode(ChronoxorEnums.EnumByte.self, forKey: .byte2)
        byte3 = try container.decode(ChronoxorEnums.EnumByte.self, forKey: .byte3)
        byte4 = try container.decode(ChronoxorEnums.EnumByte.self, forKey: .byte4)
        byte5 = try container.decode(ChronoxorEnums.EnumByte.self, forKey: .byte5)
        char0 = try container.decode(ChronoxorEnums.EnumChar.self, forKey: .char0)
        char1 = try container.decode(ChronoxorEnums.EnumChar.self, forKey: .char1)
        char2 = try container.decode(ChronoxorEnums.EnumChar.self, forKey: .char2)
        char3 = try container.decode(ChronoxorEnums.EnumChar.self, forKey: .char3)
        char4 = try container.decode(ChronoxorEnums.EnumChar.self, forKey: .char4)
        char5 = try container.decode(ChronoxorEnums.EnumChar.self, forKey: .char5)
        wchar0 = try container.decode(ChronoxorEnums.EnumWChar.self, forKey: .wchar0)
        wchar1 = try container.decode(ChronoxorEnums.EnumWChar.self, forKey: .wchar1)
        wchar2 = try container.decode(ChronoxorEnums.EnumWChar.self, forKey: .wchar2)
        wchar3 = try container.decode(ChronoxorEnums.EnumWChar.self, forKey: .wchar3)
        wchar4 = try container.decode(ChronoxorEnums.EnumWChar.self, forKey: .wchar4)
        wchar5 = try container.decode(ChronoxorEnums.EnumWChar.self, forKey: .wchar5)
        int8b0 = try container.decode(ChronoxorEnums.EnumInt8.self, forKey: .int8b0)
        int8b1 = try container.decode(ChronoxorEnums.EnumInt8.self, forKey: .int8b1)
        int8b2 = try container.decode(ChronoxorEnums.EnumInt8.self, forKey: .int8b2)
        int8b3 = try container.decode(ChronoxorEnums.EnumInt8.self, forKey: .int8b3)
        int8b4 = try container.decode(ChronoxorEnums.EnumInt8.self, forKey: .int8b4)
        int8b5 = try container.decode(ChronoxorEnums.EnumInt8.self, forKey: .int8b5)
        uint8b0 = try container.decode(ChronoxorEnums.EnumUInt8.self, forKey: .uint8b0)
        uint8b1 = try container.decode(ChronoxorEnums.EnumUInt8.self, forKey: .uint8b1)
        uint8b2 = try container.decode(ChronoxorEnums.EnumUInt8.self, forKey: .uint8b2)
        uint8b3 = try container.decode(ChronoxorEnums.EnumUInt8.self, forKey: .uint8b3)
        uint8b4 = try container.decode(ChronoxorEnums.EnumUInt8.self, forKey: .uint8b4)
        uint8b5 = try container.decode(ChronoxorEnums.EnumUInt8.self, forKey: .uint8b5)
        int16b0 = try container.decode(ChronoxorEnums.EnumInt16.self, forKey: .int16b0)
        int16b1 = try container.decode(ChronoxorEnums.EnumInt16.self, forKey: .int16b1)
        int16b2 = try container.decode(ChronoxorEnums.EnumInt16.self, forKey: .int16b2)
        int16b3 = try container.decode(ChronoxorEnums.EnumInt16.self, forKey: .int16b3)
        int16b4 = try container.decode(ChronoxorEnums.EnumInt16.self, forKey: .int16b4)
        int16b5 = try container.decode(ChronoxorEnums.EnumInt16.self, forKey: .int16b5)
        uint16b0 = try container.decode(ChronoxorEnums.EnumUInt16.self, forKey: .uint16b0)
        uint16b1 = try container.decode(ChronoxorEnums.EnumUInt16.self, forKey: .uint16b1)
        uint16b2 = try container.decode(ChronoxorEnums.EnumUInt16.self, forKey: .uint16b2)
        uint16b3 = try container.decode(ChronoxorEnums.EnumUInt16.self, forKey: .uint16b3)
        uint16b4 = try container.decode(ChronoxorEnums.EnumUInt16.self, forKey: .uint16b4)
        uint16b5 = try container.decode(ChronoxorEnums.EnumUInt16.self, forKey: .uint16b5)
        int32b0 = try container.decode(ChronoxorEnums.EnumInt32.self, forKey: .int32b0)
        int32b1 = try container.decode(ChronoxorEnums.EnumInt32.self, forKey: .int32b1)
        int32b2 = try container.decode(ChronoxorEnums.EnumInt32.self, forKey: .int32b2)
        int32b3 = try container.decode(ChronoxorEnums.EnumInt32.self, forKey: .int32b3)
        int32b4 = try container.decode(ChronoxorEnums.EnumInt32.self, forKey: .int32b4)
        int32b5 = try container.decode(ChronoxorEnums.EnumInt32.self, forKey: .int32b5)
        uint32b0 = try container.decode(ChronoxorEnums.EnumUInt32.self, forKey: .uint32b0)
        uint32b1 = try container.decode(ChronoxorEnums.EnumUInt32.self, forKey: .uint32b1)
        uint32b2 = try container.decode(ChronoxorEnums.EnumUInt32.self, forKey: .uint32b2)
        uint32b3 = try container.decode(ChronoxorEnums.EnumUInt32.self, forKey: .uint32b3)
        uint32b4 = try container.decode(ChronoxorEnums.EnumUInt32.self, forKey: .uint32b4)
        uint32b5 = try container.decode(ChronoxorEnums.EnumUInt32.self, forKey: .uint32b5)
        int64b0 = try container.decode(ChronoxorEnums.EnumInt64.self, forKey: .int64b0)
        int64b1 = try container.decode(ChronoxorEnums.EnumInt64.self, forKey: .int64b1)
        int64b2 = try container.decode(ChronoxorEnums.EnumInt64.self, forKey: .int64b2)
        int64b3 = try container.decode(ChronoxorEnums.EnumInt64.self, forKey: .int64b3)
        int64b4 = try container.decode(ChronoxorEnums.EnumInt64.self, forKey: .int64b4)
        int64b5 = try container.decode(ChronoxorEnums.EnumInt64.self, forKey: .int64b5)
        uint64b0 = try container.decode(ChronoxorEnums.EnumUInt64.self, forKey: .uint64b0)
        uint64b1 = try container.decode(ChronoxorEnums.EnumUInt64.self, forKey: .uint64b1)
        uint64b2 = try container.decode(ChronoxorEnums.EnumUInt64.self, forKey: .uint64b2)
        uint64b3 = try container.decode(ChronoxorEnums.EnumUInt64.self, forKey: .uint64b3)
        uint64b4 = try container.decode(ChronoxorEnums.EnumUInt64.self, forKey: .uint64b4)
        uint64b5 = try container.decode(ChronoxorEnums.EnumUInt64.self, forKey: .uint64b5)
    }

    public func clone() throws -> Enums {
        // Serialize the struct to the FBE stream
        let writer = EnumsModel()
        try _ = writer.serialize(value: self)

        // Deserialize the struct from the FBE stream
        let reader = EnumsModel()
        reader.attach(buffer: writer.buffer)
        return reader.deserialize()
    }

    public static func < (lhs: Enums, rhs: Enums) -> Bool {
        return true
    }

    public static func == (lhs: Enums, rhs: Enums) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
    }

    public var description: String {
        var sb = String()
        sb.append("Enums(")
        sb.append("byte0="); sb.append(byte0.description)
        sb.append(",byte1="); sb.append(byte1.description)
        sb.append(",byte2="); sb.append(byte2.description)
        sb.append(",byte3="); sb.append(byte3.description)
        sb.append(",byte4="); sb.append(byte4.description)
        sb.append(",byte5="); sb.append(byte5.description)
        sb.append(",char0="); sb.append(char0.description)
        sb.append(",char1="); sb.append(char1.description)
        sb.append(",char2="); sb.append(char2.description)
        sb.append(",char3="); sb.append(char3.description)
        sb.append(",char4="); sb.append(char4.description)
        sb.append(",char5="); sb.append(char5.description)
        sb.append(",wchar0="); sb.append(wchar0.description)
        sb.append(",wchar1="); sb.append(wchar1.description)
        sb.append(",wchar2="); sb.append(wchar2.description)
        sb.append(",wchar3="); sb.append(wchar3.description)
        sb.append(",wchar4="); sb.append(wchar4.description)
        sb.append(",wchar5="); sb.append(wchar5.description)
        sb.append(",int8b0="); sb.append(int8b0.description)
        sb.append(",int8b1="); sb.append(int8b1.description)
        sb.append(",int8b2="); sb.append(int8b2.description)
        sb.append(",int8b3="); sb.append(int8b3.description)
        sb.append(",int8b4="); sb.append(int8b4.description)
        sb.append(",int8b5="); sb.append(int8b5.description)
        sb.append(",uint8b0="); sb.append(uint8b0.description)
        sb.append(",uint8b1="); sb.append(uint8b1.description)
        sb.append(",uint8b2="); sb.append(uint8b2.description)
        sb.append(",uint8b3="); sb.append(uint8b3.description)
        sb.append(",uint8b4="); sb.append(uint8b4.description)
        sb.append(",uint8b5="); sb.append(uint8b5.description)
        sb.append(",int16b0="); sb.append(int16b0.description)
        sb.append(",int16b1="); sb.append(int16b1.description)
        sb.append(",int16b2="); sb.append(int16b2.description)
        sb.append(",int16b3="); sb.append(int16b3.description)
        sb.append(",int16b4="); sb.append(int16b4.description)
        sb.append(",int16b5="); sb.append(int16b5.description)
        sb.append(",uint16b0="); sb.append(uint16b0.description)
        sb.append(",uint16b1="); sb.append(uint16b1.description)
        sb.append(",uint16b2="); sb.append(uint16b2.description)
        sb.append(",uint16b3="); sb.append(uint16b3.description)
        sb.append(",uint16b4="); sb.append(uint16b4.description)
        sb.append(",uint16b5="); sb.append(uint16b5.description)
        sb.append(",int32b0="); sb.append(int32b0.description)
        sb.append(",int32b1="); sb.append(int32b1.description)
        sb.append(",int32b2="); sb.append(int32b2.description)
        sb.append(",int32b3="); sb.append(int32b3.description)
        sb.append(",int32b4="); sb.append(int32b4.description)
        sb.append(",int32b5="); sb.append(int32b5.description)
        sb.append(",uint32b0="); sb.append(uint32b0.description)
        sb.append(",uint32b1="); sb.append(uint32b1.description)
        sb.append(",uint32b2="); sb.append(uint32b2.description)
        sb.append(",uint32b3="); sb.append(uint32b3.description)
        sb.append(",uint32b4="); sb.append(uint32b4.description)
        sb.append(",uint32b5="); sb.append(uint32b5.description)
        sb.append(",int64b0="); sb.append(int64b0.description)
        sb.append(",int64b1="); sb.append(int64b1.description)
        sb.append(",int64b2="); sb.append(int64b2.description)
        sb.append(",int64b3="); sb.append(int64b3.description)
        sb.append(",int64b4="); sb.append(int64b4.description)
        sb.append(",int64b5="); sb.append(int64b5.description)
        sb.append(",uint64b0="); sb.append(uint64b0.description)
        sb.append(",uint64b1="); sb.append(uint64b1.description)
        sb.append(",uint64b2="); sb.append(uint64b2.description)
        sb.append(",uint64b3="); sb.append(uint64b3.description)
        sb.append(",uint64b4="); sb.append(uint64b4.description)
        sb.append(",uint64b5="); sb.append(uint64b5.description)
        sb.append(")")
        return sb
    }
    private enum CodingKeys: String, CodingKey {
        case byte0
        case byte1
        case byte2
        case byte3
        case byte4
        case byte5
        case char0
        case char1
        case char2
        case char3
        case char4
        case char5
        case wchar0
        case wchar1
        case wchar2
        case wchar3
        case wchar4
        case wchar5
        case int8b0
        case int8b1
        case int8b2
        case int8b3
        case int8b4
        case int8b5
        case uint8b0
        case uint8b1
        case uint8b2
        case uint8b3
        case uint8b4
        case uint8b5
        case int16b0
        case int16b1
        case int16b2
        case int16b3
        case int16b4
        case int16b5
        case uint16b0
        case uint16b1
        case uint16b2
        case uint16b3
        case uint16b4
        case uint16b5
        case int32b0
        case int32b1
        case int32b2
        case int32b3
        case int32b4
        case int32b5
        case uint32b0
        case uint32b1
        case uint32b2
        case uint32b3
        case uint32b4
        case uint32b5
        case int64b0
        case int64b1
        case int64b2
        case int64b3
        case int64b4
        case int64b5
        case uint64b0
        case uint64b1
        case uint64b2
        case uint64b3
        case uint64b4
        case uint64b5
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(byte0, forKey: .byte0)
        try container.encode(byte1, forKey: .byte1)
        try container.encode(byte2, forKey: .byte2)
        try container.encode(byte3, forKey: .byte3)
        try container.encode(byte4, forKey: .byte4)
        try container.encode(byte5, forKey: .byte5)
        try container.encode(char0, forKey: .char0)
        try container.encode(char1, forKey: .char1)
        try container.encode(char2, forKey: .char2)
        try container.encode(char3, forKey: .char3)
        try container.encode(char4, forKey: .char4)
        try container.encode(char5, forKey: .char5)
        try container.encode(wchar0, forKey: .wchar0)
        try container.encode(wchar1, forKey: .wchar1)
        try container.encode(wchar2, forKey: .wchar2)
        try container.encode(wchar3, forKey: .wchar3)
        try container.encode(wchar4, forKey: .wchar4)
        try container.encode(wchar5, forKey: .wchar5)
        try container.encode(int8b0, forKey: .int8b0)
        try container.encode(int8b1, forKey: .int8b1)
        try container.encode(int8b2, forKey: .int8b2)
        try container.encode(int8b3, forKey: .int8b3)
        try container.encode(int8b4, forKey: .int8b4)
        try container.encode(int8b5, forKey: .int8b5)
        try container.encode(uint8b0, forKey: .uint8b0)
        try container.encode(uint8b1, forKey: .uint8b1)
        try container.encode(uint8b2, forKey: .uint8b2)
        try container.encode(uint8b3, forKey: .uint8b3)
        try container.encode(uint8b4, forKey: .uint8b4)
        try container.encode(uint8b5, forKey: .uint8b5)
        try container.encode(int16b0, forKey: .int16b0)
        try container.encode(int16b1, forKey: .int16b1)
        try container.encode(int16b2, forKey: .int16b2)
        try container.encode(int16b3, forKey: .int16b3)
        try container.encode(int16b4, forKey: .int16b4)
        try container.encode(int16b5, forKey: .int16b5)
        try container.encode(uint16b0, forKey: .uint16b0)
        try container.encode(uint16b1, forKey: .uint16b1)
        try container.encode(uint16b2, forKey: .uint16b2)
        try container.encode(uint16b3, forKey: .uint16b3)
        try container.encode(uint16b4, forKey: .uint16b4)
        try container.encode(uint16b5, forKey: .uint16b5)
        try container.encode(int32b0, forKey: .int32b0)
        try container.encode(int32b1, forKey: .int32b1)
        try container.encode(int32b2, forKey: .int32b2)
        try container.encode(int32b3, forKey: .int32b3)
        try container.encode(int32b4, forKey: .int32b4)
        try container.encode(int32b5, forKey: .int32b5)
        try container.encode(uint32b0, forKey: .uint32b0)
        try container.encode(uint32b1, forKey: .uint32b1)
        try container.encode(uint32b2, forKey: .uint32b2)
        try container.encode(uint32b3, forKey: .uint32b3)
        try container.encode(uint32b4, forKey: .uint32b4)
        try container.encode(uint32b5, forKey: .uint32b5)
        try container.encode(int64b0, forKey: .int64b0)
        try container.encode(int64b1, forKey: .int64b1)
        try container.encode(int64b2, forKey: .int64b2)
        try container.encode(int64b3, forKey: .int64b3)
        try container.encode(int64b4, forKey: .int64b4)
        try container.encode(int64b5, forKey: .int64b5)
        try container.encode(uint64b0, forKey: .uint64b0)
        try container.encode(uint64b1, forKey: .uint64b1)
        try container.encode(uint64b2, forKey: .uint64b2)
        try container.encode(uint64b3, forKey: .uint64b3)
        try container.encode(uint64b4, forKey: .uint64b4)
        try container.encode(uint64b5, forKey: .uint64b5)
    }

    public func toJson() throws -> String {
        return String(data: try JSONEncoder().encode(self), encoding: .utf8)!
    }

    public static func fromJson(_ json: String) throws -> Enums {
        return try JSONDecoder().decode(Enums.self, from: json.data(using: .utf8)!)
    }
}
