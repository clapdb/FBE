//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation

public struct FlagsSimple: Comparable, Hashable, Codable {
    typealias RawValue = Int32
    public static let FLAG_VALUE_0 = FlagsSimple(value: .FLAG_VALUE_0)
    public static let FLAG_VALUE_1 = FlagsSimple(value: .FLAG_VALUE_1)
    public static let FLAG_VALUE_2 = FlagsSimple(value: .FLAG_VALUE_2)
    public static let FLAG_VALUE_3 = FlagsSimple(value: .FLAG_VALUE_3)
    public static let FLAG_VALUE_4 = FlagsSimple(value: .FLAG_VALUE_4)
    public static let FLAG_VALUE_5 = FlagsSimple(value: .FLAG_VALUE_5)

    public static func fromSet(set: FlagsSimpleEnum) -> FlagsSimple {
        var result = NSNumber(value: 0).intValue
        if set.contains(FlagsSimple.FLAG_VALUE_0.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: FlagsSimple.FLAG_VALUE_0.raw).intValue
        }
        if set.contains(FlagsSimple.FLAG_VALUE_1.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: FlagsSimple.FLAG_VALUE_1.raw).intValue
        }
        if set.contains(FlagsSimple.FLAG_VALUE_2.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: FlagsSimple.FLAG_VALUE_2.raw).intValue
        }
        if set.contains(FlagsSimple.FLAG_VALUE_3.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: FlagsSimple.FLAG_VALUE_3.raw).intValue
        }
        if set.contains(FlagsSimple.FLAG_VALUE_4.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: FlagsSimple.FLAG_VALUE_4.raw).intValue
        }
        if set.contains(FlagsSimple.FLAG_VALUE_5.value!) {
            result = NSNumber(value: result).intValue | NSNumber(value: FlagsSimple.FLAG_VALUE_5.raw).intValue
        }
        return FlagsSimple(value: NSNumber(value: result).int32Value)
    }

    public private(set) var value: FlagsSimpleEnum?

    public private(set) var raw: Int32 = 0

    public init() { setDefaults() }
    public init(value: Int32) { setEnum(value: value) }
    public init(value: FlagsSimpleEnum) { setEnum(value: value) }
    public init(value: FlagsSimple) { setEnum(value: value) }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        setEnum(value: try container.decode(RawValue.self))
    }

    public mutating func setDefaults() { setEnum(value: 0) }

    public mutating func setEnum(value: Int32) { self.raw = value; self.value = FlagsSimpleEnum.mapValue(value: value) }
    public mutating func setEnum(value: FlagsSimpleEnum) { self.raw = value.rawValue; self.value = value }
    public mutating func setEnum(value: FlagsSimple) { self.raw = value.raw; self.value = value.value }

    public func hasFlags(flags: Int32) -> Bool { return (NSNumber(value: raw).intValue & NSNumber(value: flags).intValue != 0) && ((NSNumber(value: raw).intValue & NSNumber(value: flags).intValue) == NSNumber(value: flags).intValue) }
    public func hasFlags(flags: FlagsSimpleEnum) -> Bool { return hasFlags(flags: flags.rawValue) }
    public func hasFlags(flags: FlagsSimple) -> Bool { return hasFlags(flags: flags.raw) }

    public mutating func setFlags(flags: Int32) -> FlagsSimple { setEnum(value: NSNumber(value: NSNumber(value: raw).intValue | NSNumber(value: flags).intValue).int32Value); return self }
    public mutating func setFlags(flags: FlagsSimpleEnum) -> FlagsSimple { _ = setFlags(flags: flags.rawValue); return self }
    public mutating func setFlags(flags: FlagsSimple) -> FlagsSimple { _ = setFlags(flags: flags.raw); return self }

    public mutating func removeFlags(flags: Int32) -> FlagsSimple { setEnum(value: NSNumber(value: NSNumber(value: raw).intValue | NSNumber(value: flags).intValue.byteSwapped).int32Value); return self }
    public mutating func removeFlags(flags: FlagsSimpleEnum) -> FlagsSimple { _ = removeFlags(flags: flags.rawValue); return self }
    public mutating func removeFlags(flags: FlagsSimple) -> FlagsSimple { _ = removeFlags(flags: flags.raw); return self }

    public var allSet: FlagsSimpleEnum { return .allSet }
    public var noneSet: FlagsSimpleEnum { return .noneSet }
    public var currentSet: FlagsSimpleEnum { return value!.currentSet }

    public static func < (lhs: FlagsSimple, rhs: FlagsSimple) -> Bool {
        return lhs.raw < rhs.raw
    }

    public static func == (lhs: FlagsSimple, rhs: FlagsSimple) -> Bool {
        return lhs.raw == rhs.raw
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(raw)
    }

    public var description: String {
        var sb = String()
        var first = true
        if hasFlags(flags: FlagsSimple.FLAG_VALUE_0.raw) {
            sb.append(first ? "" : "|"); sb.append("FLAG_VALUE_0")
            first = false
        }
        if hasFlags(flags: FlagsSimple.FLAG_VALUE_1.raw) {
            sb.append(first ? "" : "|"); sb.append("FLAG_VALUE_1")
            first = false
        }
        if hasFlags(flags: FlagsSimple.FLAG_VALUE_2.raw) {
            sb.append(first ? "" : "|"); sb.append("FLAG_VALUE_2")
            first = false
        }
        if hasFlags(flags: FlagsSimple.FLAG_VALUE_3.raw) {
            sb.append(first ? "" : "|"); sb.append("FLAG_VALUE_3")
            first = false
        }
        if hasFlags(flags: FlagsSimple.FLAG_VALUE_4.raw) {
            sb.append(first ? "" : "|"); sb.append("FLAG_VALUE_4")
            first = false
        }
        if hasFlags(flags: FlagsSimple.FLAG_VALUE_5.raw) {
            sb.append(first ? "" : "|"); sb.append("FLAG_VALUE_5")
            first = false
        }
        return sb
    }
    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        try container.encode(raw)
    }

    public func toJson() throws -> String {
        return String(data: try JSONEncoder().encode(self), encoding: .utf8)!
    }

    public static func fromJson(_ json: String) throws -> FlagsSimple {
        return try JSONDecoder().decode(FlagsSimple.self, from: json.data(using: .utf8)!)
    }
}
