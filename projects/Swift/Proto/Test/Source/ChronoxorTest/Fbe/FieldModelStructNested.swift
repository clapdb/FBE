//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe
import ChronoxorProto

// Fast Binary Encoding StructNested field model
public class FieldModelStructNested: FieldModel {

    public var _buffer: Buffer
    public var _offset: Int

    let parent: FieldModelStructOptional

    let f1000: FieldModelEnumSimple
    let f1001: FieldModelOptionalEnumSimple
    let f1002: FieldModelEnumTyped
    let f1003: FieldModelOptionalEnumTyped
    let f1004: FieldModelFlagsSimple
    let f1005: FieldModelOptionalFlagsSimple
    let f1006: FieldModelFlagsTyped
    let f1007: FieldModelOptionalFlagsTyped
    let f1008: FieldModelStructSimple
    let f1009: FieldModelOptionalStructSimple
    let f1010: FieldModelStructOptional
    let f1011: FieldModelOptionalStructOptional

    // Field size
    public let fbeSize: Int = 4

    // Field body size
    public let fbeBody: Int

    // Set the struct value (end phase)
    public required init() {
        let buffer = Buffer()
        let offset = 0

        _buffer = buffer
        _offset = offset

        parent = FieldModelStructOptional(buffer: buffer, offset: 4 + 4)

        f1000 = FieldModelEnumSimple(buffer: buffer, offset: parent.fbeOffset + parent.fbeBody - 4 - 4)
        f1001 = FieldModelOptionalEnumSimple(buffer: buffer, offset: f1000.fbeOffset + f1000.fbeSize)
        f1002 = FieldModelEnumTyped(buffer: buffer, offset: f1001.fbeOffset + f1001.fbeSize)
        f1003 = FieldModelOptionalEnumTyped(buffer: buffer, offset: f1002.fbeOffset + f1002.fbeSize)
        f1004 = FieldModelFlagsSimple(buffer: buffer, offset: f1003.fbeOffset + f1003.fbeSize)
        f1005 = FieldModelOptionalFlagsSimple(buffer: buffer, offset: f1004.fbeOffset + f1004.fbeSize)
        f1006 = FieldModelFlagsTyped(buffer: buffer, offset: f1005.fbeOffset + f1005.fbeSize)
        f1007 = FieldModelOptionalFlagsTyped(buffer: buffer, offset: f1006.fbeOffset + f1006.fbeSize)
        f1008 = FieldModelStructSimple(buffer: buffer, offset: f1007.fbeOffset + f1007.fbeSize)
        f1009 = FieldModelOptionalStructSimple(buffer: buffer, offset: f1008.fbeOffset + f1008.fbeSize)
        f1010 = FieldModelStructOptional(buffer: buffer, offset: f1009.fbeOffset + f1009.fbeSize)
        f1011 = FieldModelOptionalStructOptional(buffer: buffer, offset: f1010.fbeOffset + f1010.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += parent.fbeBody - 4 - 4
            fbeBody += f1000.fbeSize
            fbeBody += f1001.fbeSize
            fbeBody += f1002.fbeSize
            fbeBody += f1003.fbeSize
            fbeBody += f1004.fbeSize
            fbeBody += f1005.fbeSize
            fbeBody += f1006.fbeSize
            fbeBody += f1007.fbeSize
            fbeBody += f1008.fbeSize
            fbeBody += f1009.fbeSize
            fbeBody += f1010.fbeSize
            fbeBody += f1011.fbeSize
        self.fbeBody = fbeBody
    }

    // 
    public required init(buffer: Buffer = Buffer(), offset: Int = 0) {
        _buffer = buffer
        _offset = offset

        parent = FieldModelStructOptional(buffer: buffer, offset: 4 + 4)
        f1000 = FieldModelEnumSimple(buffer: buffer, offset: parent.fbeOffset + parent.fbeBody - 4 - 4)
        f1001 = FieldModelOptionalEnumSimple(buffer: buffer, offset: f1000.fbeOffset + f1000.fbeSize)
        f1002 = FieldModelEnumTyped(buffer: buffer, offset: f1001.fbeOffset + f1001.fbeSize)
        f1003 = FieldModelOptionalEnumTyped(buffer: buffer, offset: f1002.fbeOffset + f1002.fbeSize)
        f1004 = FieldModelFlagsSimple(buffer: buffer, offset: f1003.fbeOffset + f1003.fbeSize)
        f1005 = FieldModelOptionalFlagsSimple(buffer: buffer, offset: f1004.fbeOffset + f1004.fbeSize)
        f1006 = FieldModelFlagsTyped(buffer: buffer, offset: f1005.fbeOffset + f1005.fbeSize)
        f1007 = FieldModelOptionalFlagsTyped(buffer: buffer, offset: f1006.fbeOffset + f1006.fbeSize)
        f1008 = FieldModelStructSimple(buffer: buffer, offset: f1007.fbeOffset + f1007.fbeSize)
        f1009 = FieldModelOptionalStructSimple(buffer: buffer, offset: f1008.fbeOffset + f1008.fbeSize)
        f1010 = FieldModelStructOptional(buffer: buffer, offset: f1009.fbeOffset + f1009.fbeSize)
        f1011 = FieldModelOptionalStructOptional(buffer: buffer, offset: f1010.fbeOffset + f1010.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += parent.fbeBody - 4 - 4
            fbeBody += f1000.fbeSize
            fbeBody += f1001.fbeSize
            fbeBody += f1002.fbeSize
            fbeBody += f1003.fbeSize
            fbeBody += f1004.fbeSize
            fbeBody += f1005.fbeSize
            fbeBody += f1006.fbeSize
            fbeBody += f1007.fbeSize
            fbeBody += f1008.fbeSize
            fbeBody += f1009.fbeSize
            fbeBody += f1010.fbeSize
            fbeBody += f1011.fbeSize
        self.fbeBody = fbeBody
    }

    // Field extra size
    public var fbeExtra: Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4) > _buffer.size) {
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)

        var fbeResult = fbeBody
            fbeResult += parent.fbeExtra
            fbeResult += f1000.fbeExtra
            fbeResult += f1001.fbeExtra
            fbeResult += f1002.fbeExtra
            fbeResult += f1003.fbeExtra
            fbeResult += f1004.fbeExtra
            fbeResult += f1005.fbeExtra
            fbeResult += f1006.fbeExtra
            fbeResult += f1007.fbeExtra
            fbeResult += f1008.fbeExtra
            fbeResult += f1009.fbeExtra
            fbeResult += f1010.fbeExtra
            fbeResult += f1011.fbeExtra

        _buffer.unshift(offset: fbeStructOffset)

        return fbeResult
    }

    // Field type
    public var fbeType: Int = fbeTypeConst
    public static let fbeTypeConst: Int = 112

    // Check if the struct value is valid
    func verify(fbeVerifyType: Bool = true) -> Bool {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            return true
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            return false
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < (4 + 4) {
            return false
        }

        let fbeStructType = Int(readUInt32(offset: fbeStructOffset + 4))
        if fbeVerifyType && (fbeStructType != fbeType) {
            return false
        }

        _buffer.shift(offset: fbeStructOffset)
        let fbeResult = verifyFields(fbeStructSize: fbeStructSize)
        _buffer.unshift(offset: fbeStructOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    public func verifyFields(fbeStructSize: Int) -> Bool {
        var fbeCurrentSize = 4 + 4

        if fbeCurrentSize + parent.fbeBody - 4 - 4 > fbeStructSize {
            return true
        }
        if !parent.verifyFields(fbeStructSize: fbeStructSize) {
            return false
        }
        fbeCurrentSize += parent.fbeBody - 4 - 4

        if (fbeCurrentSize + f1000.fbeSize) > fbeStructSize {
            return true
        }
        if !f1000.verify() {
            return false
        }
        fbeCurrentSize += f1000.fbeSize

        if (fbeCurrentSize + f1001.fbeSize) > fbeStructSize {
            return true
        }
        if !f1001.verify() {
            return false
        }
        fbeCurrentSize += f1001.fbeSize

        if (fbeCurrentSize + f1002.fbeSize) > fbeStructSize {
            return true
        }
        if !f1002.verify() {
            return false
        }
        fbeCurrentSize += f1002.fbeSize

        if (fbeCurrentSize + f1003.fbeSize) > fbeStructSize {
            return true
        }
        if !f1003.verify() {
            return false
        }
        fbeCurrentSize += f1003.fbeSize

        if (fbeCurrentSize + f1004.fbeSize) > fbeStructSize {
            return true
        }
        if !f1004.verify() {
            return false
        }
        fbeCurrentSize += f1004.fbeSize

        if (fbeCurrentSize + f1005.fbeSize) > fbeStructSize {
            return true
        }
        if !f1005.verify() {
            return false
        }
        fbeCurrentSize += f1005.fbeSize

        if (fbeCurrentSize + f1006.fbeSize) > fbeStructSize {
            return true
        }
        if !f1006.verify() {
            return false
        }
        fbeCurrentSize += f1006.fbeSize

        if (fbeCurrentSize + f1007.fbeSize) > fbeStructSize {
            return true
        }
        if !f1007.verify() {
            return false
        }
        fbeCurrentSize += f1007.fbeSize

        if (fbeCurrentSize + f1008.fbeSize) > fbeStructSize {
            return true
        }
        if !f1008.verify() {
            return false
        }
        fbeCurrentSize += f1008.fbeSize

        if (fbeCurrentSize + f1009.fbeSize) > fbeStructSize {
            return true
        }
        if !f1009.verify() {
            return false
        }
        fbeCurrentSize += f1009.fbeSize

        if (fbeCurrentSize + f1010.fbeSize) > fbeStructSize {
            return true
        }
        if !f1010.verify() {
            return false
        }
        fbeCurrentSize += f1010.fbeSize

        if (fbeCurrentSize + f1011.fbeSize) > fbeStructSize {
            return true
        }
        if !f1011.verify() {
            return false
        }
        fbeCurrentSize += f1011.fbeSize

        return true
    }

    // Get the struct value (begin phase)
    func getBegin() -> Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < 4 + 4 {
            assertionFailure("Model is broken!")
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Get the struct value (end phase)
    func getEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Get the struct value
    public func get() -> StructNested {
        var fbeValue = StructNested()
        return get(fbeValue: &fbeValue)
    }

    public func get(fbeValue: inout StructNested) -> StructNested {
        let fbeBegin = getBegin()
        if fbeBegin == 0 {
            return fbeValue
        }

        let fbeStructSize = Int(readUInt32(offset: 0))
        getFields(fbeValue: &fbeValue, fbeStructSize: fbeStructSize)
        getEnd(fbeBegin: fbeBegin)
        return fbeValue
    }

    // Get the struct fields values
    public func getFields(fbeValue: inout StructNested, fbeStructSize: Int) {
        var fbeCurrentSize = 4 + 4

        if fbeCurrentSize + parent.fbeBody - 4 - 4 <= fbeStructSize {
            parent.getFields(fbeValue: &fbeValue.parent, fbeStructSize: fbeStructSize)
        }
        fbeCurrentSize += parent.fbeBody - 4 - 4

        if fbeCurrentSize + f1000.fbeSize <= fbeStructSize {
            fbeValue.f1000 = f1000.get()
        } else {
            fbeValue.f1000 = ChronoxorTest.EnumSimple()
        }
        fbeCurrentSize += f1000.fbeSize

        if fbeCurrentSize + f1001.fbeSize <= fbeStructSize {
            fbeValue.f1001 = f1001.get()
        } else {
            fbeValue.f1001 = nil
        }
        fbeCurrentSize += f1001.fbeSize

        if fbeCurrentSize + f1002.fbeSize <= fbeStructSize {
            fbeValue.f1002 = f1002.get(defaults: ChronoxorTest.EnumTyped.ENUM_VALUE_2)
        } else {
            fbeValue.f1002 = ChronoxorTest.EnumTyped.ENUM_VALUE_2
        }
        fbeCurrentSize += f1002.fbeSize

        if fbeCurrentSize + f1003.fbeSize <= fbeStructSize {
            fbeValue.f1003 = f1003.get(defaults: nil)
        } else {
            fbeValue.f1003 = nil
        }
        fbeCurrentSize += f1003.fbeSize

        if fbeCurrentSize + f1004.fbeSize <= fbeStructSize {
            fbeValue.f1004 = f1004.get()
        } else {
            fbeValue.f1004 = ChronoxorTest.FlagsSimple()
        }
        fbeCurrentSize += f1004.fbeSize

        if fbeCurrentSize + f1005.fbeSize <= fbeStructSize {
            fbeValue.f1005 = f1005.get()
        } else {
            fbeValue.f1005 = nil
        }
        fbeCurrentSize += f1005.fbeSize

        if fbeCurrentSize + f1006.fbeSize <= fbeStructSize {
            fbeValue.f1006 = f1006.get(defaults: FlagsTyped.fromSet(set: [FlagsTyped.FLAG_VALUE_2.value!, FlagsTyped.FLAG_VALUE_4.value!, FlagsTyped.FLAG_VALUE_6.value!]))
        } else {
            fbeValue.f1006 = FlagsTyped.fromSet(set: [FlagsTyped.FLAG_VALUE_2.value!, FlagsTyped.FLAG_VALUE_4.value!, FlagsTyped.FLAG_VALUE_6.value!])
        }
        fbeCurrentSize += f1006.fbeSize

        if fbeCurrentSize + f1007.fbeSize <= fbeStructSize {
            fbeValue.f1007 = f1007.get(defaults: nil)
        } else {
            fbeValue.f1007 = nil
        }
        fbeCurrentSize += f1007.fbeSize

        if fbeCurrentSize + f1008.fbeSize <= fbeStructSize {
            fbeValue.f1008 = f1008.get()
        } else {
            fbeValue.f1008 = ChronoxorTest.StructSimple()
        }
        fbeCurrentSize += f1008.fbeSize

        if fbeCurrentSize + f1009.fbeSize <= fbeStructSize {
            fbeValue.f1009 = f1009.get()
        } else {
            fbeValue.f1009 = nil
        }
        fbeCurrentSize += f1009.fbeSize

        if fbeCurrentSize + f1010.fbeSize <= fbeStructSize {
            fbeValue.f1010 = f1010.get()
        } else {
            fbeValue.f1010 = ChronoxorTest.StructOptional()
        }
        fbeCurrentSize += f1010.fbeSize

        if fbeCurrentSize + f1011.fbeSize <= fbeStructSize {
            fbeValue.f1011 = f1011.get(defaults: nil)
        } else {
            fbeValue.f1011 = nil
        }
        fbeCurrentSize += f1011.fbeSize
    }

    // Set the struct value (begin phase)
    func setBegin() throws -> Int {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = fbeBody
        let fbeStructOffset = try _buffer.allocate(size: fbeStructSize) - _buffer.offset
        if (fbeStructOffset <= 0) || ((_buffer.offset + fbeStructOffset + fbeStructSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        write(offset: fbeOffset, value: UInt32(fbeStructOffset))
        write(offset: fbeStructOffset, value: UInt32(fbeStructSize))
        write(offset: fbeStructOffset + 4, value: UInt32(fbeType))

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Set the struct value (end phase)
    public func setEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Set the struct value
    public func set(value fbeValue: StructNested) throws {
        let fbeBegin = try setBegin()
        if fbeBegin == 0 {
            return
        }

        try setFields(fbeValue: fbeValue)
        setEnd(fbeBegin: fbeBegin)
    }

    // Set the struct fields values
    public func setFields(fbeValue: StructNested) throws {
        try parent.setFields(fbeValue: fbeValue.parent)
        try f1000.set(value: fbeValue.f1000)
        try f1001.set(value: fbeValue.f1001)
        try f1002.set(value: fbeValue.f1002)
        try f1003.set(value: fbeValue.f1003)
        try f1004.set(value: fbeValue.f1004)
        try f1005.set(value: fbeValue.f1005)
        try f1006.set(value: fbeValue.f1006)
        try f1007.set(value: fbeValue.f1007)
        try f1008.set(value: fbeValue.f1008)
        try f1009.set(value: fbeValue.f1009)
        try f1010.set(value: fbeValue.f1010)
        try f1011.set(value: fbeValue.f1011)
    }
}
