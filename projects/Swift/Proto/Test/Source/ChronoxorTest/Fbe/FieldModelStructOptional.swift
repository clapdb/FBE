//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe
import ChronoxorProto

// Fast Binary Encoding StructOptional field model
public class FieldModelStructOptional: FieldModel {

    public var _buffer: Buffer
    public var _offset: Int

    let parent: FieldModelStructSimple

    let f100: FieldModelOptionalBoolean
    let f101: FieldModelOptionalBoolean
    let f102: FieldModelOptionalBoolean
    let f103: FieldModelOptionalUInt8
    let f104: FieldModelOptionalUInt8
    let f105: FieldModelOptionalUInt8
    let f106: FieldModelOptionalChar
    let f107: FieldModelOptionalChar
    let f108: FieldModelOptionalChar
    let f109: FieldModelOptionalWChar
    let f110: FieldModelOptionalWChar
    let f111: FieldModelOptionalWChar
    let f112: FieldModelOptionalInt8
    let f113: FieldModelOptionalInt8
    let f114: FieldModelOptionalInt8
    let f115: FieldModelOptionalUInt8
    let f116: FieldModelOptionalUInt8
    let f117: FieldModelOptionalUInt8
    let f118: FieldModelOptionalInt16
    let f119: FieldModelOptionalInt16
    let f120: FieldModelOptionalInt16
    let f121: FieldModelOptionalUInt16
    let f122: FieldModelOptionalUInt16
    let f123: FieldModelOptionalUInt16
    let f124: FieldModelOptionalInt32
    let f125: FieldModelOptionalInt32
    let f126: FieldModelOptionalInt32
    let f127: FieldModelOptionalUInt32
    let f128: FieldModelOptionalUInt32
    let f129: FieldModelOptionalUInt32
    let f130: FieldModelOptionalInt64
    let f131: FieldModelOptionalInt64
    let f132: FieldModelOptionalInt64
    let f133: FieldModelOptionalUInt64
    let f134: FieldModelOptionalUInt64
    let f135: FieldModelOptionalUInt64
    let f136: FieldModelOptionalFloat
    let f137: FieldModelOptionalFloat
    let f138: FieldModelOptionalFloat
    let f139: FieldModelOptionalDouble
    let f140: FieldModelOptionalDouble
    let f141: FieldModelOptionalDouble
    let f142: FieldModelOptionalDecimal
    let f143: FieldModelOptionalDecimal
    let f144: FieldModelOptionalDecimal
    let f145: FieldModelOptionalString
    let f146: FieldModelOptionalString
    let f147: FieldModelOptionalString
    let f148: FieldModelOptionalTimestamp
    let f149: FieldModelOptionalTimestamp
    let f150: FieldModelOptionalTimestamp
    let f151: FieldModelOptionalUUID
    let f152: FieldModelOptionalUUID
    let f153: FieldModelOptionalUUID
    let f154: FieldModelOptionalOrderSide
    let f155: FieldModelOptionalOrderSide
    let f156: FieldModelOptionalOrderType
    let f157: FieldModelOptionalOrderType
    let f158: FieldModelOptionalOrder
    let f159: FieldModelOptionalOrder
    let f160: FieldModelOptionalBalance
    let f161: FieldModelOptionalBalance
    let f162: FieldModelOptionalState
    let f163: FieldModelOptionalState
    let f164: FieldModelOptionalAccount
    let f165: FieldModelOptionalAccount

    // Field size
    public let fbeSize: Int = 4

    // Field body size
    public let fbeBody: Int

    // Set the struct value (end phase)
    public required init() {
        let buffer = Buffer()
        let offset = 0

        _buffer = buffer
        _offset = offset

        parent = FieldModelStructSimple(buffer: buffer, offset: 4 + 4)

        f100 = FieldModelOptionalBoolean(buffer: buffer, offset: parent.fbeOffset + parent.fbeBody - 4 - 4)
        f101 = FieldModelOptionalBoolean(buffer: buffer, offset: f100.fbeOffset + f100.fbeSize)
        f102 = FieldModelOptionalBoolean(buffer: buffer, offset: f101.fbeOffset + f101.fbeSize)
        f103 = FieldModelOptionalUInt8(buffer: buffer, offset: f102.fbeOffset + f102.fbeSize)
        f104 = FieldModelOptionalUInt8(buffer: buffer, offset: f103.fbeOffset + f103.fbeSize)
        f105 = FieldModelOptionalUInt8(buffer: buffer, offset: f104.fbeOffset + f104.fbeSize)
        f106 = FieldModelOptionalChar(buffer: buffer, offset: f105.fbeOffset + f105.fbeSize)
        f107 = FieldModelOptionalChar(buffer: buffer, offset: f106.fbeOffset + f106.fbeSize)
        f108 = FieldModelOptionalChar(buffer: buffer, offset: f107.fbeOffset + f107.fbeSize)
        f109 = FieldModelOptionalWChar(buffer: buffer, offset: f108.fbeOffset + f108.fbeSize)
        f110 = FieldModelOptionalWChar(buffer: buffer, offset: f109.fbeOffset + f109.fbeSize)
        f111 = FieldModelOptionalWChar(buffer: buffer, offset: f110.fbeOffset + f110.fbeSize)
        f112 = FieldModelOptionalInt8(buffer: buffer, offset: f111.fbeOffset + f111.fbeSize)
        f113 = FieldModelOptionalInt8(buffer: buffer, offset: f112.fbeOffset + f112.fbeSize)
        f114 = FieldModelOptionalInt8(buffer: buffer, offset: f113.fbeOffset + f113.fbeSize)
        f115 = FieldModelOptionalUInt8(buffer: buffer, offset: f114.fbeOffset + f114.fbeSize)
        f116 = FieldModelOptionalUInt8(buffer: buffer, offset: f115.fbeOffset + f115.fbeSize)
        f117 = FieldModelOptionalUInt8(buffer: buffer, offset: f116.fbeOffset + f116.fbeSize)
        f118 = FieldModelOptionalInt16(buffer: buffer, offset: f117.fbeOffset + f117.fbeSize)
        f119 = FieldModelOptionalInt16(buffer: buffer, offset: f118.fbeOffset + f118.fbeSize)
        f120 = FieldModelOptionalInt16(buffer: buffer, offset: f119.fbeOffset + f119.fbeSize)
        f121 = FieldModelOptionalUInt16(buffer: buffer, offset: f120.fbeOffset + f120.fbeSize)
        f122 = FieldModelOptionalUInt16(buffer: buffer, offset: f121.fbeOffset + f121.fbeSize)
        f123 = FieldModelOptionalUInt16(buffer: buffer, offset: f122.fbeOffset + f122.fbeSize)
        f124 = FieldModelOptionalInt32(buffer: buffer, offset: f123.fbeOffset + f123.fbeSize)
        f125 = FieldModelOptionalInt32(buffer: buffer, offset: f124.fbeOffset + f124.fbeSize)
        f126 = FieldModelOptionalInt32(buffer: buffer, offset: f125.fbeOffset + f125.fbeSize)
        f127 = FieldModelOptionalUInt32(buffer: buffer, offset: f126.fbeOffset + f126.fbeSize)
        f128 = FieldModelOptionalUInt32(buffer: buffer, offset: f127.fbeOffset + f127.fbeSize)
        f129 = FieldModelOptionalUInt32(buffer: buffer, offset: f128.fbeOffset + f128.fbeSize)
        f130 = FieldModelOptionalInt64(buffer: buffer, offset: f129.fbeOffset + f129.fbeSize)
        f131 = FieldModelOptionalInt64(buffer: buffer, offset: f130.fbeOffset + f130.fbeSize)
        f132 = FieldModelOptionalInt64(buffer: buffer, offset: f131.fbeOffset + f131.fbeSize)
        f133 = FieldModelOptionalUInt64(buffer: buffer, offset: f132.fbeOffset + f132.fbeSize)
        f134 = FieldModelOptionalUInt64(buffer: buffer, offset: f133.fbeOffset + f133.fbeSize)
        f135 = FieldModelOptionalUInt64(buffer: buffer, offset: f134.fbeOffset + f134.fbeSize)
        f136 = FieldModelOptionalFloat(buffer: buffer, offset: f135.fbeOffset + f135.fbeSize)
        f137 = FieldModelOptionalFloat(buffer: buffer, offset: f136.fbeOffset + f136.fbeSize)
        f138 = FieldModelOptionalFloat(buffer: buffer, offset: f137.fbeOffset + f137.fbeSize)
        f139 = FieldModelOptionalDouble(buffer: buffer, offset: f138.fbeOffset + f138.fbeSize)
        f140 = FieldModelOptionalDouble(buffer: buffer, offset: f139.fbeOffset + f139.fbeSize)
        f141 = FieldModelOptionalDouble(buffer: buffer, offset: f140.fbeOffset + f140.fbeSize)
        f142 = FieldModelOptionalDecimal(buffer: buffer, offset: f141.fbeOffset + f141.fbeSize)
        f143 = FieldModelOptionalDecimal(buffer: buffer, offset: f142.fbeOffset + f142.fbeSize)
        f144 = FieldModelOptionalDecimal(buffer: buffer, offset: f143.fbeOffset + f143.fbeSize)
        f145 = FieldModelOptionalString(buffer: buffer, offset: f144.fbeOffset + f144.fbeSize)
        f146 = FieldModelOptionalString(buffer: buffer, offset: f145.fbeOffset + f145.fbeSize)
        f147 = FieldModelOptionalString(buffer: buffer, offset: f146.fbeOffset + f146.fbeSize)
        f148 = FieldModelOptionalTimestamp(buffer: buffer, offset: f147.fbeOffset + f147.fbeSize)
        f149 = FieldModelOptionalTimestamp(buffer: buffer, offset: f148.fbeOffset + f148.fbeSize)
        f150 = FieldModelOptionalTimestamp(buffer: buffer, offset: f149.fbeOffset + f149.fbeSize)
        f151 = FieldModelOptionalUUID(buffer: buffer, offset: f150.fbeOffset + f150.fbeSize)
        f152 = FieldModelOptionalUUID(buffer: buffer, offset: f151.fbeOffset + f151.fbeSize)
        f153 = FieldModelOptionalUUID(buffer: buffer, offset: f152.fbeOffset + f152.fbeSize)
        f154 = FieldModelOptionalOrderSide(buffer: buffer, offset: f153.fbeOffset + f153.fbeSize)
        f155 = FieldModelOptionalOrderSide(buffer: buffer, offset: f154.fbeOffset + f154.fbeSize)
        f156 = FieldModelOptionalOrderType(buffer: buffer, offset: f155.fbeOffset + f155.fbeSize)
        f157 = FieldModelOptionalOrderType(buffer: buffer, offset: f156.fbeOffset + f156.fbeSize)
        f158 = FieldModelOptionalOrder(buffer: buffer, offset: f157.fbeOffset + f157.fbeSize)
        f159 = FieldModelOptionalOrder(buffer: buffer, offset: f158.fbeOffset + f158.fbeSize)
        f160 = FieldModelOptionalBalance(buffer: buffer, offset: f159.fbeOffset + f159.fbeSize)
        f161 = FieldModelOptionalBalance(buffer: buffer, offset: f160.fbeOffset + f160.fbeSize)
        f162 = FieldModelOptionalState(buffer: buffer, offset: f161.fbeOffset + f161.fbeSize)
        f163 = FieldModelOptionalState(buffer: buffer, offset: f162.fbeOffset + f162.fbeSize)
        f164 = FieldModelOptionalAccount(buffer: buffer, offset: f163.fbeOffset + f163.fbeSize)
        f165 = FieldModelOptionalAccount(buffer: buffer, offset: f164.fbeOffset + f164.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += parent.fbeBody - 4 - 4
            fbeBody += f100.fbeSize
            fbeBody += f101.fbeSize
            fbeBody += f102.fbeSize
            fbeBody += f103.fbeSize
            fbeBody += f104.fbeSize
            fbeBody += f105.fbeSize
            fbeBody += f106.fbeSize
            fbeBody += f107.fbeSize
            fbeBody += f108.fbeSize
            fbeBody += f109.fbeSize
            fbeBody += f110.fbeSize
            fbeBody += f111.fbeSize
            fbeBody += f112.fbeSize
            fbeBody += f113.fbeSize
            fbeBody += f114.fbeSize
            fbeBody += f115.fbeSize
            fbeBody += f116.fbeSize
            fbeBody += f117.fbeSize
            fbeBody += f118.fbeSize
            fbeBody += f119.fbeSize
            fbeBody += f120.fbeSize
            fbeBody += f121.fbeSize
            fbeBody += f122.fbeSize
            fbeBody += f123.fbeSize
            fbeBody += f124.fbeSize
            fbeBody += f125.fbeSize
            fbeBody += f126.fbeSize
            fbeBody += f127.fbeSize
            fbeBody += f128.fbeSize
            fbeBody += f129.fbeSize
            fbeBody += f130.fbeSize
            fbeBody += f131.fbeSize
            fbeBody += f132.fbeSize
            fbeBody += f133.fbeSize
            fbeBody += f134.fbeSize
            fbeBody += f135.fbeSize
            fbeBody += f136.fbeSize
            fbeBody += f137.fbeSize
            fbeBody += f138.fbeSize
            fbeBody += f139.fbeSize
            fbeBody += f140.fbeSize
            fbeBody += f141.fbeSize
            fbeBody += f142.fbeSize
            fbeBody += f143.fbeSize
            fbeBody += f144.fbeSize
            fbeBody += f145.fbeSize
            fbeBody += f146.fbeSize
            fbeBody += f147.fbeSize
            fbeBody += f148.fbeSize
            fbeBody += f149.fbeSize
            fbeBody += f150.fbeSize
            fbeBody += f151.fbeSize
            fbeBody += f152.fbeSize
            fbeBody += f153.fbeSize
            fbeBody += f154.fbeSize
            fbeBody += f155.fbeSize
            fbeBody += f156.fbeSize
            fbeBody += f157.fbeSize
            fbeBody += f158.fbeSize
            fbeBody += f159.fbeSize
            fbeBody += f160.fbeSize
            fbeBody += f161.fbeSize
            fbeBody += f162.fbeSize
            fbeBody += f163.fbeSize
            fbeBody += f164.fbeSize
            fbeBody += f165.fbeSize
        self.fbeBody = fbeBody
    }

    // 
    public required init(buffer: Buffer = Buffer(), offset: Int = 0) {
        _buffer = buffer
        _offset = offset

        parent = FieldModelStructSimple(buffer: buffer, offset: 4 + 4)
        f100 = FieldModelOptionalBoolean(buffer: buffer, offset: parent.fbeOffset + parent.fbeBody - 4 - 4)
        f101 = FieldModelOptionalBoolean(buffer: buffer, offset: f100.fbeOffset + f100.fbeSize)
        f102 = FieldModelOptionalBoolean(buffer: buffer, offset: f101.fbeOffset + f101.fbeSize)
        f103 = FieldModelOptionalUInt8(buffer: buffer, offset: f102.fbeOffset + f102.fbeSize)
        f104 = FieldModelOptionalUInt8(buffer: buffer, offset: f103.fbeOffset + f103.fbeSize)
        f105 = FieldModelOptionalUInt8(buffer: buffer, offset: f104.fbeOffset + f104.fbeSize)
        f106 = FieldModelOptionalChar(buffer: buffer, offset: f105.fbeOffset + f105.fbeSize)
        f107 = FieldModelOptionalChar(buffer: buffer, offset: f106.fbeOffset + f106.fbeSize)
        f108 = FieldModelOptionalChar(buffer: buffer, offset: f107.fbeOffset + f107.fbeSize)
        f109 = FieldModelOptionalWChar(buffer: buffer, offset: f108.fbeOffset + f108.fbeSize)
        f110 = FieldModelOptionalWChar(buffer: buffer, offset: f109.fbeOffset + f109.fbeSize)
        f111 = FieldModelOptionalWChar(buffer: buffer, offset: f110.fbeOffset + f110.fbeSize)
        f112 = FieldModelOptionalInt8(buffer: buffer, offset: f111.fbeOffset + f111.fbeSize)
        f113 = FieldModelOptionalInt8(buffer: buffer, offset: f112.fbeOffset + f112.fbeSize)
        f114 = FieldModelOptionalInt8(buffer: buffer, offset: f113.fbeOffset + f113.fbeSize)
        f115 = FieldModelOptionalUInt8(buffer: buffer, offset: f114.fbeOffset + f114.fbeSize)
        f116 = FieldModelOptionalUInt8(buffer: buffer, offset: f115.fbeOffset + f115.fbeSize)
        f117 = FieldModelOptionalUInt8(buffer: buffer, offset: f116.fbeOffset + f116.fbeSize)
        f118 = FieldModelOptionalInt16(buffer: buffer, offset: f117.fbeOffset + f117.fbeSize)
        f119 = FieldModelOptionalInt16(buffer: buffer, offset: f118.fbeOffset + f118.fbeSize)
        f120 = FieldModelOptionalInt16(buffer: buffer, offset: f119.fbeOffset + f119.fbeSize)
        f121 = FieldModelOptionalUInt16(buffer: buffer, offset: f120.fbeOffset + f120.fbeSize)
        f122 = FieldModelOptionalUInt16(buffer: buffer, offset: f121.fbeOffset + f121.fbeSize)
        f123 = FieldModelOptionalUInt16(buffer: buffer, offset: f122.fbeOffset + f122.fbeSize)
        f124 = FieldModelOptionalInt32(buffer: buffer, offset: f123.fbeOffset + f123.fbeSize)
        f125 = FieldModelOptionalInt32(buffer: buffer, offset: f124.fbeOffset + f124.fbeSize)
        f126 = FieldModelOptionalInt32(buffer: buffer, offset: f125.fbeOffset + f125.fbeSize)
        f127 = FieldModelOptionalUInt32(buffer: buffer, offset: f126.fbeOffset + f126.fbeSize)
        f128 = FieldModelOptionalUInt32(buffer: buffer, offset: f127.fbeOffset + f127.fbeSize)
        f129 = FieldModelOptionalUInt32(buffer: buffer, offset: f128.fbeOffset + f128.fbeSize)
        f130 = FieldModelOptionalInt64(buffer: buffer, offset: f129.fbeOffset + f129.fbeSize)
        f131 = FieldModelOptionalInt64(buffer: buffer, offset: f130.fbeOffset + f130.fbeSize)
        f132 = FieldModelOptionalInt64(buffer: buffer, offset: f131.fbeOffset + f131.fbeSize)
        f133 = FieldModelOptionalUInt64(buffer: buffer, offset: f132.fbeOffset + f132.fbeSize)
        f134 = FieldModelOptionalUInt64(buffer: buffer, offset: f133.fbeOffset + f133.fbeSize)
        f135 = FieldModelOptionalUInt64(buffer: buffer, offset: f134.fbeOffset + f134.fbeSize)
        f136 = FieldModelOptionalFloat(buffer: buffer, offset: f135.fbeOffset + f135.fbeSize)
        f137 = FieldModelOptionalFloat(buffer: buffer, offset: f136.fbeOffset + f136.fbeSize)
        f138 = FieldModelOptionalFloat(buffer: buffer, offset: f137.fbeOffset + f137.fbeSize)
        f139 = FieldModelOptionalDouble(buffer: buffer, offset: f138.fbeOffset + f138.fbeSize)
        f140 = FieldModelOptionalDouble(buffer: buffer, offset: f139.fbeOffset + f139.fbeSize)
        f141 = FieldModelOptionalDouble(buffer: buffer, offset: f140.fbeOffset + f140.fbeSize)
        f142 = FieldModelOptionalDecimal(buffer: buffer, offset: f141.fbeOffset + f141.fbeSize)
        f143 = FieldModelOptionalDecimal(buffer: buffer, offset: f142.fbeOffset + f142.fbeSize)
        f144 = FieldModelOptionalDecimal(buffer: buffer, offset: f143.fbeOffset + f143.fbeSize)
        f145 = FieldModelOptionalString(buffer: buffer, offset: f144.fbeOffset + f144.fbeSize)
        f146 = FieldModelOptionalString(buffer: buffer, offset: f145.fbeOffset + f145.fbeSize)
        f147 = FieldModelOptionalString(buffer: buffer, offset: f146.fbeOffset + f146.fbeSize)
        f148 = FieldModelOptionalTimestamp(buffer: buffer, offset: f147.fbeOffset + f147.fbeSize)
        f149 = FieldModelOptionalTimestamp(buffer: buffer, offset: f148.fbeOffset + f148.fbeSize)
        f150 = FieldModelOptionalTimestamp(buffer: buffer, offset: f149.fbeOffset + f149.fbeSize)
        f151 = FieldModelOptionalUUID(buffer: buffer, offset: f150.fbeOffset + f150.fbeSize)
        f152 = FieldModelOptionalUUID(buffer: buffer, offset: f151.fbeOffset + f151.fbeSize)
        f153 = FieldModelOptionalUUID(buffer: buffer, offset: f152.fbeOffset + f152.fbeSize)
        f154 = FieldModelOptionalOrderSide(buffer: buffer, offset: f153.fbeOffset + f153.fbeSize)
        f155 = FieldModelOptionalOrderSide(buffer: buffer, offset: f154.fbeOffset + f154.fbeSize)
        f156 = FieldModelOptionalOrderType(buffer: buffer, offset: f155.fbeOffset + f155.fbeSize)
        f157 = FieldModelOptionalOrderType(buffer: buffer, offset: f156.fbeOffset + f156.fbeSize)
        f158 = FieldModelOptionalOrder(buffer: buffer, offset: f157.fbeOffset + f157.fbeSize)
        f159 = FieldModelOptionalOrder(buffer: buffer, offset: f158.fbeOffset + f158.fbeSize)
        f160 = FieldModelOptionalBalance(buffer: buffer, offset: f159.fbeOffset + f159.fbeSize)
        f161 = FieldModelOptionalBalance(buffer: buffer, offset: f160.fbeOffset + f160.fbeSize)
        f162 = FieldModelOptionalState(buffer: buffer, offset: f161.fbeOffset + f161.fbeSize)
        f163 = FieldModelOptionalState(buffer: buffer, offset: f162.fbeOffset + f162.fbeSize)
        f164 = FieldModelOptionalAccount(buffer: buffer, offset: f163.fbeOffset + f163.fbeSize)
        f165 = FieldModelOptionalAccount(buffer: buffer, offset: f164.fbeOffset + f164.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += parent.fbeBody - 4 - 4
            fbeBody += f100.fbeSize
            fbeBody += f101.fbeSize
            fbeBody += f102.fbeSize
            fbeBody += f103.fbeSize
            fbeBody += f104.fbeSize
            fbeBody += f105.fbeSize
            fbeBody += f106.fbeSize
            fbeBody += f107.fbeSize
            fbeBody += f108.fbeSize
            fbeBody += f109.fbeSize
            fbeBody += f110.fbeSize
            fbeBody += f111.fbeSize
            fbeBody += f112.fbeSize
            fbeBody += f113.fbeSize
            fbeBody += f114.fbeSize
            fbeBody += f115.fbeSize
            fbeBody += f116.fbeSize
            fbeBody += f117.fbeSize
            fbeBody += f118.fbeSize
            fbeBody += f119.fbeSize
            fbeBody += f120.fbeSize
            fbeBody += f121.fbeSize
            fbeBody += f122.fbeSize
            fbeBody += f123.fbeSize
            fbeBody += f124.fbeSize
            fbeBody += f125.fbeSize
            fbeBody += f126.fbeSize
            fbeBody += f127.fbeSize
            fbeBody += f128.fbeSize
            fbeBody += f129.fbeSize
            fbeBody += f130.fbeSize
            fbeBody += f131.fbeSize
            fbeBody += f132.fbeSize
            fbeBody += f133.fbeSize
            fbeBody += f134.fbeSize
            fbeBody += f135.fbeSize
            fbeBody += f136.fbeSize
            fbeBody += f137.fbeSize
            fbeBody += f138.fbeSize
            fbeBody += f139.fbeSize
            fbeBody += f140.fbeSize
            fbeBody += f141.fbeSize
            fbeBody += f142.fbeSize
            fbeBody += f143.fbeSize
            fbeBody += f144.fbeSize
            fbeBody += f145.fbeSize
            fbeBody += f146.fbeSize
            fbeBody += f147.fbeSize
            fbeBody += f148.fbeSize
            fbeBody += f149.fbeSize
            fbeBody += f150.fbeSize
            fbeBody += f151.fbeSize
            fbeBody += f152.fbeSize
            fbeBody += f153.fbeSize
            fbeBody += f154.fbeSize
            fbeBody += f155.fbeSize
            fbeBody += f156.fbeSize
            fbeBody += f157.fbeSize
            fbeBody += f158.fbeSize
            fbeBody += f159.fbeSize
            fbeBody += f160.fbeSize
            fbeBody += f161.fbeSize
            fbeBody += f162.fbeSize
            fbeBody += f163.fbeSize
            fbeBody += f164.fbeSize
            fbeBody += f165.fbeSize
        self.fbeBody = fbeBody
    }

    // Field extra size
    public var fbeExtra: Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4) > _buffer.size) {
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)

        var fbeResult = fbeBody
            fbeResult += parent.fbeExtra
            fbeResult += f100.fbeExtra
            fbeResult += f101.fbeExtra
            fbeResult += f102.fbeExtra
            fbeResult += f103.fbeExtra
            fbeResult += f104.fbeExtra
            fbeResult += f105.fbeExtra
            fbeResult += f106.fbeExtra
            fbeResult += f107.fbeExtra
            fbeResult += f108.fbeExtra
            fbeResult += f109.fbeExtra
            fbeResult += f110.fbeExtra
            fbeResult += f111.fbeExtra
            fbeResult += f112.fbeExtra
            fbeResult += f113.fbeExtra
            fbeResult += f114.fbeExtra
            fbeResult += f115.fbeExtra
            fbeResult += f116.fbeExtra
            fbeResult += f117.fbeExtra
            fbeResult += f118.fbeExtra
            fbeResult += f119.fbeExtra
            fbeResult += f120.fbeExtra
            fbeResult += f121.fbeExtra
            fbeResult += f122.fbeExtra
            fbeResult += f123.fbeExtra
            fbeResult += f124.fbeExtra
            fbeResult += f125.fbeExtra
            fbeResult += f126.fbeExtra
            fbeResult += f127.fbeExtra
            fbeResult += f128.fbeExtra
            fbeResult += f129.fbeExtra
            fbeResult += f130.fbeExtra
            fbeResult += f131.fbeExtra
            fbeResult += f132.fbeExtra
            fbeResult += f133.fbeExtra
            fbeResult += f134.fbeExtra
            fbeResult += f135.fbeExtra
            fbeResult += f136.fbeExtra
            fbeResult += f137.fbeExtra
            fbeResult += f138.fbeExtra
            fbeResult += f139.fbeExtra
            fbeResult += f140.fbeExtra
            fbeResult += f141.fbeExtra
            fbeResult += f142.fbeExtra
            fbeResult += f143.fbeExtra
            fbeResult += f144.fbeExtra
            fbeResult += f145.fbeExtra
            fbeResult += f146.fbeExtra
            fbeResult += f147.fbeExtra
            fbeResult += f148.fbeExtra
            fbeResult += f149.fbeExtra
            fbeResult += f150.fbeExtra
            fbeResult += f151.fbeExtra
            fbeResult += f152.fbeExtra
            fbeResult += f153.fbeExtra
            fbeResult += f154.fbeExtra
            fbeResult += f155.fbeExtra
            fbeResult += f156.fbeExtra
            fbeResult += f157.fbeExtra
            fbeResult += f158.fbeExtra
            fbeResult += f159.fbeExtra
            fbeResult += f160.fbeExtra
            fbeResult += f161.fbeExtra
            fbeResult += f162.fbeExtra
            fbeResult += f163.fbeExtra
            fbeResult += f164.fbeExtra
            fbeResult += f165.fbeExtra

        _buffer.unshift(offset: fbeStructOffset)

        return fbeResult
    }

    // Field type
    public var fbeType: Int = fbeTypeConst
    public static let fbeTypeConst: Int = 111

    // Check if the struct value is valid
    func verify(fbeVerifyType: Bool = true) -> Bool {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            return true
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            return false
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < (4 + 4) {
            return false
        }

        let fbeStructType = Int(readUInt32(offset: fbeStructOffset + 4))
        if fbeVerifyType && (fbeStructType != fbeType) {
            return false
        }

        _buffer.shift(offset: fbeStructOffset)
        let fbeResult = verifyFields(fbeStructSize: fbeStructSize)
        _buffer.unshift(offset: fbeStructOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    public func verifyFields(fbeStructSize: Int) -> Bool {
        var fbeCurrentSize = 4 + 4

        if fbeCurrentSize + parent.fbeBody - 4 - 4 > fbeStructSize {
            return true
        }
        if !parent.verifyFields(fbeStructSize: fbeStructSize) {
            return false
        }
        fbeCurrentSize += parent.fbeBody - 4 - 4

        if (fbeCurrentSize + f100.fbeSize) > fbeStructSize {
            return true
        }
        if !f100.verify() {
            return false
        }
        fbeCurrentSize += f100.fbeSize

        if (fbeCurrentSize + f101.fbeSize) > fbeStructSize {
            return true
        }
        if !f101.verify() {
            return false
        }
        fbeCurrentSize += f101.fbeSize

        if (fbeCurrentSize + f102.fbeSize) > fbeStructSize {
            return true
        }
        if !f102.verify() {
            return false
        }
        fbeCurrentSize += f102.fbeSize

        if (fbeCurrentSize + f103.fbeSize) > fbeStructSize {
            return true
        }
        if !f103.verify() {
            return false
        }
        fbeCurrentSize += f103.fbeSize

        if (fbeCurrentSize + f104.fbeSize) > fbeStructSize {
            return true
        }
        if !f104.verify() {
            return false
        }
        fbeCurrentSize += f104.fbeSize

        if (fbeCurrentSize + f105.fbeSize) > fbeStructSize {
            return true
        }
        if !f105.verify() {
            return false
        }
        fbeCurrentSize += f105.fbeSize

        if (fbeCurrentSize + f106.fbeSize) > fbeStructSize {
            return true
        }
        if !f106.verify() {
            return false
        }
        fbeCurrentSize += f106.fbeSize

        if (fbeCurrentSize + f107.fbeSize) > fbeStructSize {
            return true
        }
        if !f107.verify() {
            return false
        }
        fbeCurrentSize += f107.fbeSize

        if (fbeCurrentSize + f108.fbeSize) > fbeStructSize {
            return true
        }
        if !f108.verify() {
            return false
        }
        fbeCurrentSize += f108.fbeSize

        if (fbeCurrentSize + f109.fbeSize) > fbeStructSize {
            return true
        }
        if !f109.verify() {
            return false
        }
        fbeCurrentSize += f109.fbeSize

        if (fbeCurrentSize + f110.fbeSize) > fbeStructSize {
            return true
        }
        if !f110.verify() {
            return false
        }
        fbeCurrentSize += f110.fbeSize

        if (fbeCurrentSize + f111.fbeSize) > fbeStructSize {
            return true
        }
        if !f111.verify() {
            return false
        }
        fbeCurrentSize += f111.fbeSize

        if (fbeCurrentSize + f112.fbeSize) > fbeStructSize {
            return true
        }
        if !f112.verify() {
            return false
        }
        fbeCurrentSize += f112.fbeSize

        if (fbeCurrentSize + f113.fbeSize) > fbeStructSize {
            return true
        }
        if !f113.verify() {
            return false
        }
        fbeCurrentSize += f113.fbeSize

        if (fbeCurrentSize + f114.fbeSize) > fbeStructSize {
            return true
        }
        if !f114.verify() {
            return false
        }
        fbeCurrentSize += f114.fbeSize

        if (fbeCurrentSize + f115.fbeSize) > fbeStructSize {
            return true
        }
        if !f115.verify() {
            return false
        }
        fbeCurrentSize += f115.fbeSize

        if (fbeCurrentSize + f116.fbeSize) > fbeStructSize {
            return true
        }
        if !f116.verify() {
            return false
        }
        fbeCurrentSize += f116.fbeSize

        if (fbeCurrentSize + f117.fbeSize) > fbeStructSize {
            return true
        }
        if !f117.verify() {
            return false
        }
        fbeCurrentSize += f117.fbeSize

        if (fbeCurrentSize + f118.fbeSize) > fbeStructSize {
            return true
        }
        if !f118.verify() {
            return false
        }
        fbeCurrentSize += f118.fbeSize

        if (fbeCurrentSize + f119.fbeSize) > fbeStructSize {
            return true
        }
        if !f119.verify() {
            return false
        }
        fbeCurrentSize += f119.fbeSize

        if (fbeCurrentSize + f120.fbeSize) > fbeStructSize {
            return true
        }
        if !f120.verify() {
            return false
        }
        fbeCurrentSize += f120.fbeSize

        if (fbeCurrentSize + f121.fbeSize) > fbeStructSize {
            return true
        }
        if !f121.verify() {
            return false
        }
        fbeCurrentSize += f121.fbeSize

        if (fbeCurrentSize + f122.fbeSize) > fbeStructSize {
            return true
        }
        if !f122.verify() {
            return false
        }
        fbeCurrentSize += f122.fbeSize

        if (fbeCurrentSize + f123.fbeSize) > fbeStructSize {
            return true
        }
        if !f123.verify() {
            return false
        }
        fbeCurrentSize += f123.fbeSize

        if (fbeCurrentSize + f124.fbeSize) > fbeStructSize {
            return true
        }
        if !f124.verify() {
            return false
        }
        fbeCurrentSize += f124.fbeSize

        if (fbeCurrentSize + f125.fbeSize) > fbeStructSize {
            return true
        }
        if !f125.verify() {
            return false
        }
        fbeCurrentSize += f125.fbeSize

        if (fbeCurrentSize + f126.fbeSize) > fbeStructSize {
            return true
        }
        if !f126.verify() {
            return false
        }
        fbeCurrentSize += f126.fbeSize

        if (fbeCurrentSize + f127.fbeSize) > fbeStructSize {
            return true
        }
        if !f127.verify() {
            return false
        }
        fbeCurrentSize += f127.fbeSize

        if (fbeCurrentSize + f128.fbeSize) > fbeStructSize {
            return true
        }
        if !f128.verify() {
            return false
        }
        fbeCurrentSize += f128.fbeSize

        if (fbeCurrentSize + f129.fbeSize) > fbeStructSize {
            return true
        }
        if !f129.verify() {
            return false
        }
        fbeCurrentSize += f129.fbeSize

        if (fbeCurrentSize + f130.fbeSize) > fbeStructSize {
            return true
        }
        if !f130.verify() {
            return false
        }
        fbeCurrentSize += f130.fbeSize

        if (fbeCurrentSize + f131.fbeSize) > fbeStructSize {
            return true
        }
        if !f131.verify() {
            return false
        }
        fbeCurrentSize += f131.fbeSize

        if (fbeCurrentSize + f132.fbeSize) > fbeStructSize {
            return true
        }
        if !f132.verify() {
            return false
        }
        fbeCurrentSize += f132.fbeSize

        if (fbeCurrentSize + f133.fbeSize) > fbeStructSize {
            return true
        }
        if !f133.verify() {
            return false
        }
        fbeCurrentSize += f133.fbeSize

        if (fbeCurrentSize + f134.fbeSize) > fbeStructSize {
            return true
        }
        if !f134.verify() {
            return false
        }
        fbeCurrentSize += f134.fbeSize

        if (fbeCurrentSize + f135.fbeSize) > fbeStructSize {
            return true
        }
        if !f135.verify() {
            return false
        }
        fbeCurrentSize += f135.fbeSize

        if (fbeCurrentSize + f136.fbeSize) > fbeStructSize {
            return true
        }
        if !f136.verify() {
            return false
        }
        fbeCurrentSize += f136.fbeSize

        if (fbeCurrentSize + f137.fbeSize) > fbeStructSize {
            return true
        }
        if !f137.verify() {
            return false
        }
        fbeCurrentSize += f137.fbeSize

        if (fbeCurrentSize + f138.fbeSize) > fbeStructSize {
            return true
        }
        if !f138.verify() {
            return false
        }
        fbeCurrentSize += f138.fbeSize

        if (fbeCurrentSize + f139.fbeSize) > fbeStructSize {
            return true
        }
        if !f139.verify() {
            return false
        }
        fbeCurrentSize += f139.fbeSize

        if (fbeCurrentSize + f140.fbeSize) > fbeStructSize {
            return true
        }
        if !f140.verify() {
            return false
        }
        fbeCurrentSize += f140.fbeSize

        if (fbeCurrentSize + f141.fbeSize) > fbeStructSize {
            return true
        }
        if !f141.verify() {
            return false
        }
        fbeCurrentSize += f141.fbeSize

        if (fbeCurrentSize + f142.fbeSize) > fbeStructSize {
            return true
        }
        if !f142.verify() {
            return false
        }
        fbeCurrentSize += f142.fbeSize

        if (fbeCurrentSize + f143.fbeSize) > fbeStructSize {
            return true
        }
        if !f143.verify() {
            return false
        }
        fbeCurrentSize += f143.fbeSize

        if (fbeCurrentSize + f144.fbeSize) > fbeStructSize {
            return true
        }
        if !f144.verify() {
            return false
        }
        fbeCurrentSize += f144.fbeSize

        if (fbeCurrentSize + f145.fbeSize) > fbeStructSize {
            return true
        }
        if !f145.verify() {
            return false
        }
        fbeCurrentSize += f145.fbeSize

        if (fbeCurrentSize + f146.fbeSize) > fbeStructSize {
            return true
        }
        if !f146.verify() {
            return false
        }
        fbeCurrentSize += f146.fbeSize

        if (fbeCurrentSize + f147.fbeSize) > fbeStructSize {
            return true
        }
        if !f147.verify() {
            return false
        }
        fbeCurrentSize += f147.fbeSize

        if (fbeCurrentSize + f148.fbeSize) > fbeStructSize {
            return true
        }
        if !f148.verify() {
            return false
        }
        fbeCurrentSize += f148.fbeSize

        if (fbeCurrentSize + f149.fbeSize) > fbeStructSize {
            return true
        }
        if !f149.verify() {
            return false
        }
        fbeCurrentSize += f149.fbeSize

        if (fbeCurrentSize + f150.fbeSize) > fbeStructSize {
            return true
        }
        if !f150.verify() {
            return false
        }
        fbeCurrentSize += f150.fbeSize

        if (fbeCurrentSize + f151.fbeSize) > fbeStructSize {
            return true
        }
        if !f151.verify() {
            return false
        }
        fbeCurrentSize += f151.fbeSize

        if (fbeCurrentSize + f152.fbeSize) > fbeStructSize {
            return true
        }
        if !f152.verify() {
            return false
        }
        fbeCurrentSize += f152.fbeSize

        if (fbeCurrentSize + f153.fbeSize) > fbeStructSize {
            return true
        }
        if !f153.verify() {
            return false
        }
        fbeCurrentSize += f153.fbeSize

        if (fbeCurrentSize + f154.fbeSize) > fbeStructSize {
            return true
        }
        if !f154.verify() {
            return false
        }
        fbeCurrentSize += f154.fbeSize

        if (fbeCurrentSize + f155.fbeSize) > fbeStructSize {
            return true
        }
        if !f155.verify() {
            return false
        }
        fbeCurrentSize += f155.fbeSize

        if (fbeCurrentSize + f156.fbeSize) > fbeStructSize {
            return true
        }
        if !f156.verify() {
            return false
        }
        fbeCurrentSize += f156.fbeSize

        if (fbeCurrentSize + f157.fbeSize) > fbeStructSize {
            return true
        }
        if !f157.verify() {
            return false
        }
        fbeCurrentSize += f157.fbeSize

        if (fbeCurrentSize + f158.fbeSize) > fbeStructSize {
            return true
        }
        if !f158.verify() {
            return false
        }
        fbeCurrentSize += f158.fbeSize

        if (fbeCurrentSize + f159.fbeSize) > fbeStructSize {
            return true
        }
        if !f159.verify() {
            return false
        }
        fbeCurrentSize += f159.fbeSize

        if (fbeCurrentSize + f160.fbeSize) > fbeStructSize {
            return true
        }
        if !f160.verify() {
            return false
        }
        fbeCurrentSize += f160.fbeSize

        if (fbeCurrentSize + f161.fbeSize) > fbeStructSize {
            return true
        }
        if !f161.verify() {
            return false
        }
        fbeCurrentSize += f161.fbeSize

        if (fbeCurrentSize + f162.fbeSize) > fbeStructSize {
            return true
        }
        if !f162.verify() {
            return false
        }
        fbeCurrentSize += f162.fbeSize

        if (fbeCurrentSize + f163.fbeSize) > fbeStructSize {
            return true
        }
        if !f163.verify() {
            return false
        }
        fbeCurrentSize += f163.fbeSize

        if (fbeCurrentSize + f164.fbeSize) > fbeStructSize {
            return true
        }
        if !f164.verify() {
            return false
        }
        fbeCurrentSize += f164.fbeSize

        if (fbeCurrentSize + f165.fbeSize) > fbeStructSize {
            return true
        }
        if !f165.verify() {
            return false
        }
        fbeCurrentSize += f165.fbeSize

        return true
    }

    // Get the struct value (begin phase)
    func getBegin() -> Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < 4 + 4 {
            assertionFailure("Model is broken!")
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Get the struct value (end phase)
    func getEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Get the struct value
    public func get() -> StructOptional {
        var fbeValue = StructOptional()
        return get(fbeValue: &fbeValue)
    }

    public func get(fbeValue: inout StructOptional) -> StructOptional {
        let fbeBegin = getBegin()
        if fbeBegin == 0 {
            return fbeValue
        }

        let fbeStructSize = Int(readUInt32(offset: 0))
        getFields(fbeValue: &fbeValue, fbeStructSize: fbeStructSize)
        getEnd(fbeBegin: fbeBegin)
        return fbeValue
    }

    // Get the struct fields values
    public func getFields(fbeValue: inout StructOptional, fbeStructSize: Int) {
        var fbeCurrentSize = 4 + 4

        if fbeCurrentSize + parent.fbeBody - 4 - 4 <= fbeStructSize {
            parent.getFields(fbeValue: &fbeValue.parent, fbeStructSize: fbeStructSize)
        }
        fbeCurrentSize += parent.fbeBody - 4 - 4

        if fbeCurrentSize + f100.fbeSize <= fbeStructSize {
            fbeValue.f100 = f100.get()
        } else {
            fbeValue.f100 = nil
        }
        fbeCurrentSize += f100.fbeSize

        if fbeCurrentSize + f101.fbeSize <= fbeStructSize {
            fbeValue.f101 = f101.get(defaults: true)
        } else {
            fbeValue.f101 = true
        }
        fbeCurrentSize += f101.fbeSize

        if fbeCurrentSize + f102.fbeSize <= fbeStructSize {
            fbeValue.f102 = f102.get(defaults: nil)
        } else {
            fbeValue.f102 = nil
        }
        fbeCurrentSize += f102.fbeSize

        if fbeCurrentSize + f103.fbeSize <= fbeStructSize {
            fbeValue.f103 = f103.get()
        } else {
            fbeValue.f103 = nil
        }
        fbeCurrentSize += f103.fbeSize

        if fbeCurrentSize + f104.fbeSize <= fbeStructSize {
            fbeValue.f104 = f104.get(defaults: 0xFF)
        } else {
            fbeValue.f104 = 0xFF
        }
        fbeCurrentSize += f104.fbeSize

        if fbeCurrentSize + f105.fbeSize <= fbeStructSize {
            fbeValue.f105 = f105.get(defaults: nil)
        } else {
            fbeValue.f105 = nil
        }
        fbeCurrentSize += f105.fbeSize

        if fbeCurrentSize + f106.fbeSize <= fbeStructSize {
            fbeValue.f106 = f106.get()
        } else {
            fbeValue.f106 = nil
        }
        fbeCurrentSize += f106.fbeSize

        if fbeCurrentSize + f107.fbeSize <= fbeStructSize {
            fbeValue.f107 = f107.get(defaults: "!")
        } else {
            fbeValue.f107 = "!"
        }
        fbeCurrentSize += f107.fbeSize

        if fbeCurrentSize + f108.fbeSize <= fbeStructSize {
            fbeValue.f108 = f108.get(defaults: nil)
        } else {
            fbeValue.f108 = nil
        }
        fbeCurrentSize += f108.fbeSize

        if fbeCurrentSize + f109.fbeSize <= fbeStructSize {
            fbeValue.f109 = f109.get()
        } else {
            fbeValue.f109 = nil
        }
        fbeCurrentSize += f109.fbeSize

        if fbeCurrentSize + f110.fbeSize <= fbeStructSize {
            fbeValue.f110 = f110.get(defaults: Character(UnicodeScalar(0x0444)!))
        } else {
            fbeValue.f110 = Character(UnicodeScalar(0x0444)!)
        }
        fbeCurrentSize += f110.fbeSize

        if fbeCurrentSize + f111.fbeSize <= fbeStructSize {
            fbeValue.f111 = f111.get(defaults: nil)
        } else {
            fbeValue.f111 = nil
        }
        fbeCurrentSize += f111.fbeSize

        if fbeCurrentSize + f112.fbeSize <= fbeStructSize {
            fbeValue.f112 = f112.get()
        } else {
            fbeValue.f112 = nil
        }
        fbeCurrentSize += f112.fbeSize

        if fbeCurrentSize + f113.fbeSize <= fbeStructSize {
            fbeValue.f113 = f113.get(defaults: Int8.max)
        } else {
            fbeValue.f113 = Int8.max
        }
        fbeCurrentSize += f113.fbeSize

        if fbeCurrentSize + f114.fbeSize <= fbeStructSize {
            fbeValue.f114 = f114.get(defaults: nil)
        } else {
            fbeValue.f114 = nil
        }
        fbeCurrentSize += f114.fbeSize

        if fbeCurrentSize + f115.fbeSize <= fbeStructSize {
            fbeValue.f115 = f115.get()
        } else {
            fbeValue.f115 = nil
        }
        fbeCurrentSize += f115.fbeSize

        if fbeCurrentSize + f116.fbeSize <= fbeStructSize {
            fbeValue.f116 = f116.get(defaults: UInt8.max)
        } else {
            fbeValue.f116 = UInt8.max
        }
        fbeCurrentSize += f116.fbeSize

        if fbeCurrentSize + f117.fbeSize <= fbeStructSize {
            fbeValue.f117 = f117.get(defaults: nil)
        } else {
            fbeValue.f117 = nil
        }
        fbeCurrentSize += f117.fbeSize

        if fbeCurrentSize + f118.fbeSize <= fbeStructSize {
            fbeValue.f118 = f118.get()
        } else {
            fbeValue.f118 = nil
        }
        fbeCurrentSize += f118.fbeSize

        if fbeCurrentSize + f119.fbeSize <= fbeStructSize {
            fbeValue.f119 = f119.get(defaults: Int16.max)
        } else {
            fbeValue.f119 = Int16.max
        }
        fbeCurrentSize += f119.fbeSize

        if fbeCurrentSize + f120.fbeSize <= fbeStructSize {
            fbeValue.f120 = f120.get(defaults: nil)
        } else {
            fbeValue.f120 = nil
        }
        fbeCurrentSize += f120.fbeSize

        if fbeCurrentSize + f121.fbeSize <= fbeStructSize {
            fbeValue.f121 = f121.get()
        } else {
            fbeValue.f121 = nil
        }
        fbeCurrentSize += f121.fbeSize

        if fbeCurrentSize + f122.fbeSize <= fbeStructSize {
            fbeValue.f122 = f122.get(defaults: UInt16.max)
        } else {
            fbeValue.f122 = UInt16.max
        }
        fbeCurrentSize += f122.fbeSize

        if fbeCurrentSize + f123.fbeSize <= fbeStructSize {
            fbeValue.f123 = f123.get(defaults: nil)
        } else {
            fbeValue.f123 = nil
        }
        fbeCurrentSize += f123.fbeSize

        if fbeCurrentSize + f124.fbeSize <= fbeStructSize {
            fbeValue.f124 = f124.get()
        } else {
            fbeValue.f124 = nil
        }
        fbeCurrentSize += f124.fbeSize

        if fbeCurrentSize + f125.fbeSize <= fbeStructSize {
            fbeValue.f125 = f125.get(defaults: Int32.max)
        } else {
            fbeValue.f125 = Int32.max
        }
        fbeCurrentSize += f125.fbeSize

        if fbeCurrentSize + f126.fbeSize <= fbeStructSize {
            fbeValue.f126 = f126.get(defaults: nil)
        } else {
            fbeValue.f126 = nil
        }
        fbeCurrentSize += f126.fbeSize

        if fbeCurrentSize + f127.fbeSize <= fbeStructSize {
            fbeValue.f127 = f127.get()
        } else {
            fbeValue.f127 = nil
        }
        fbeCurrentSize += f127.fbeSize

        if fbeCurrentSize + f128.fbeSize <= fbeStructSize {
            fbeValue.f128 = f128.get(defaults: UInt32.max)
        } else {
            fbeValue.f128 = UInt32.max
        }
        fbeCurrentSize += f128.fbeSize

        if fbeCurrentSize + f129.fbeSize <= fbeStructSize {
            fbeValue.f129 = f129.get(defaults: nil)
        } else {
            fbeValue.f129 = nil
        }
        fbeCurrentSize += f129.fbeSize

        if fbeCurrentSize + f130.fbeSize <= fbeStructSize {
            fbeValue.f130 = f130.get()
        } else {
            fbeValue.f130 = nil
        }
        fbeCurrentSize += f130.fbeSize

        if fbeCurrentSize + f131.fbeSize <= fbeStructSize {
            fbeValue.f131 = f131.get(defaults: Int64.max)
        } else {
            fbeValue.f131 = Int64.max
        }
        fbeCurrentSize += f131.fbeSize

        if fbeCurrentSize + f132.fbeSize <= fbeStructSize {
            fbeValue.f132 = f132.get(defaults: nil)
        } else {
            fbeValue.f132 = nil
        }
        fbeCurrentSize += f132.fbeSize

        if fbeCurrentSize + f133.fbeSize <= fbeStructSize {
            fbeValue.f133 = f133.get()
        } else {
            fbeValue.f133 = nil
        }
        fbeCurrentSize += f133.fbeSize

        if fbeCurrentSize + f134.fbeSize <= fbeStructSize {
            fbeValue.f134 = f134.get(defaults: UInt64.max)
        } else {
            fbeValue.f134 = UInt64.max
        }
        fbeCurrentSize += f134.fbeSize

        if fbeCurrentSize + f135.fbeSize <= fbeStructSize {
            fbeValue.f135 = f135.get(defaults: nil)
        } else {
            fbeValue.f135 = nil
        }
        fbeCurrentSize += f135.fbeSize

        if fbeCurrentSize + f136.fbeSize <= fbeStructSize {
            fbeValue.f136 = f136.get()
        } else {
            fbeValue.f136 = nil
        }
        fbeCurrentSize += f136.fbeSize

        if fbeCurrentSize + f137.fbeSize <= fbeStructSize {
            fbeValue.f137 = f137.get(defaults: 123.456)
        } else {
            fbeValue.f137 = 123.456
        }
        fbeCurrentSize += f137.fbeSize

        if fbeCurrentSize + f138.fbeSize <= fbeStructSize {
            fbeValue.f138 = f138.get(defaults: nil)
        } else {
            fbeValue.f138 = nil
        }
        fbeCurrentSize += f138.fbeSize

        if fbeCurrentSize + f139.fbeSize <= fbeStructSize {
            fbeValue.f139 = f139.get()
        } else {
            fbeValue.f139 = nil
        }
        fbeCurrentSize += f139.fbeSize

        if fbeCurrentSize + f140.fbeSize <= fbeStructSize {
            fbeValue.f140 = f140.get(defaults: -123.456e+123)
        } else {
            fbeValue.f140 = -123.456e+123
        }
        fbeCurrentSize += f140.fbeSize

        if fbeCurrentSize + f141.fbeSize <= fbeStructSize {
            fbeValue.f141 = f141.get(defaults: nil)
        } else {
            fbeValue.f141 = nil
        }
        fbeCurrentSize += f141.fbeSize

        if fbeCurrentSize + f142.fbeSize <= fbeStructSize {
            fbeValue.f142 = f142.get()
        } else {
            fbeValue.f142 = nil
        }
        fbeCurrentSize += f142.fbeSize

        if fbeCurrentSize + f143.fbeSize <= fbeStructSize {
            fbeValue.f143 = f143.get(defaults: Decimal(string: "123456.123456")!)
        } else {
            fbeValue.f143 = Decimal(string: "123456.123456")!
        }
        fbeCurrentSize += f143.fbeSize

        if fbeCurrentSize + f144.fbeSize <= fbeStructSize {
            fbeValue.f144 = f144.get(defaults: nil)
        } else {
            fbeValue.f144 = nil
        }
        fbeCurrentSize += f144.fbeSize

        if fbeCurrentSize + f145.fbeSize <= fbeStructSize {
            fbeValue.f145 = f145.get()
        } else {
            fbeValue.f145 = nil
        }
        fbeCurrentSize += f145.fbeSize

        if fbeCurrentSize + f146.fbeSize <= fbeStructSize {
            fbeValue.f146 = f146.get(defaults: "Initial string!")
        } else {
            fbeValue.f146 = "Initial string!"
        }
        fbeCurrentSize += f146.fbeSize

        if fbeCurrentSize + f147.fbeSize <= fbeStructSize {
            fbeValue.f147 = f147.get(defaults: nil)
        } else {
            fbeValue.f147 = nil
        }
        fbeCurrentSize += f147.fbeSize

        if fbeCurrentSize + f148.fbeSize <= fbeStructSize {
            fbeValue.f148 = f148.get()
        } else {
            fbeValue.f148 = nil
        }
        fbeCurrentSize += f148.fbeSize

        if fbeCurrentSize + f149.fbeSize <= fbeStructSize {
            fbeValue.f149 = f149.get(defaults: Date())
        } else {
            fbeValue.f149 = Date()
        }
        fbeCurrentSize += f149.fbeSize

        if fbeCurrentSize + f150.fbeSize <= fbeStructSize {
            fbeValue.f150 = f150.get(defaults: nil)
        } else {
            fbeValue.f150 = nil
        }
        fbeCurrentSize += f150.fbeSize

        if fbeCurrentSize + f151.fbeSize <= fbeStructSize {
            fbeValue.f151 = f151.get()
        } else {
            fbeValue.f151 = nil
        }
        fbeCurrentSize += f151.fbeSize

        if fbeCurrentSize + f152.fbeSize <= fbeStructSize {
            fbeValue.f152 = f152.get(defaults: UUID(uuidString: "123e4567-e89b-12d3-a456-426655440000")!)
        } else {
            fbeValue.f152 = UUID(uuidString: "123e4567-e89b-12d3-a456-426655440000")!
        }
        fbeCurrentSize += f152.fbeSize

        if fbeCurrentSize + f153.fbeSize <= fbeStructSize {
            fbeValue.f153 = f153.get(defaults: nil)
        } else {
            fbeValue.f153 = nil
        }
        fbeCurrentSize += f153.fbeSize

        if fbeCurrentSize + f154.fbeSize <= fbeStructSize {
            fbeValue.f154 = f154.get()
        } else {
            fbeValue.f154 = nil
        }
        fbeCurrentSize += f154.fbeSize

        if fbeCurrentSize + f155.fbeSize <= fbeStructSize {
            fbeValue.f155 = f155.get(defaults: nil)
        } else {
            fbeValue.f155 = nil
        }
        fbeCurrentSize += f155.fbeSize

        if fbeCurrentSize + f156.fbeSize <= fbeStructSize {
            fbeValue.f156 = f156.get()
        } else {
            fbeValue.f156 = nil
        }
        fbeCurrentSize += f156.fbeSize

        if fbeCurrentSize + f157.fbeSize <= fbeStructSize {
            fbeValue.f157 = f157.get(defaults: nil)
        } else {
            fbeValue.f157 = nil
        }
        fbeCurrentSize += f157.fbeSize

        if fbeCurrentSize + f158.fbeSize <= fbeStructSize {
            fbeValue.f158 = f158.get()
        } else {
            fbeValue.f158 = nil
        }
        fbeCurrentSize += f158.fbeSize

        if fbeCurrentSize + f159.fbeSize <= fbeStructSize {
            fbeValue.f159 = f159.get(defaults: nil)
        } else {
            fbeValue.f159 = nil
        }
        fbeCurrentSize += f159.fbeSize

        if fbeCurrentSize + f160.fbeSize <= fbeStructSize {
            fbeValue.f160 = f160.get()
        } else {
            fbeValue.f160 = nil
        }
        fbeCurrentSize += f160.fbeSize

        if fbeCurrentSize + f161.fbeSize <= fbeStructSize {
            fbeValue.f161 = f161.get(defaults: nil)
        } else {
            fbeValue.f161 = nil
        }
        fbeCurrentSize += f161.fbeSize

        if fbeCurrentSize + f162.fbeSize <= fbeStructSize {
            fbeValue.f162 = f162.get()
        } else {
            fbeValue.f162 = nil
        }
        fbeCurrentSize += f162.fbeSize

        if fbeCurrentSize + f163.fbeSize <= fbeStructSize {
            fbeValue.f163 = f163.get(defaults: nil)
        } else {
            fbeValue.f163 = nil
        }
        fbeCurrentSize += f163.fbeSize

        if fbeCurrentSize + f164.fbeSize <= fbeStructSize {
            fbeValue.f164 = f164.get()
        } else {
            fbeValue.f164 = nil
        }
        fbeCurrentSize += f164.fbeSize

        if fbeCurrentSize + f165.fbeSize <= fbeStructSize {
            fbeValue.f165 = f165.get(defaults: nil)
        } else {
            fbeValue.f165 = nil
        }
        fbeCurrentSize += f165.fbeSize
    }

    // Set the struct value (begin phase)
    func setBegin() throws -> Int {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = fbeBody
        let fbeStructOffset = try _buffer.allocate(size: fbeStructSize) - _buffer.offset
        if (fbeStructOffset <= 0) || ((_buffer.offset + fbeStructOffset + fbeStructSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        write(offset: fbeOffset, value: UInt32(fbeStructOffset))
        write(offset: fbeStructOffset, value: UInt32(fbeStructSize))
        write(offset: fbeStructOffset + 4, value: UInt32(fbeType))

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Set the struct value (end phase)
    public func setEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Set the struct value
    public func set(value fbeValue: StructOptional) throws {
        let fbeBegin = try setBegin()
        if fbeBegin == 0 {
            return
        }

        try setFields(fbeValue: fbeValue)
        setEnd(fbeBegin: fbeBegin)
    }

    // Set the struct fields values
    public func setFields(fbeValue: StructOptional) throws {
        try parent.setFields(fbeValue: fbeValue.parent)
        try f100.set(value: fbeValue.f100)
        try f101.set(value: fbeValue.f101)
        try f102.set(value: fbeValue.f102)
        try f103.set(value: fbeValue.f103)
        try f104.set(value: fbeValue.f104)
        try f105.set(value: fbeValue.f105)
        try f106.set(value: fbeValue.f106)
        try f107.set(value: fbeValue.f107)
        try f108.set(value: fbeValue.f108)
        try f109.set(value: fbeValue.f109)
        try f110.set(value: fbeValue.f110)
        try f111.set(value: fbeValue.f111)
        try f112.set(value: fbeValue.f112)
        try f113.set(value: fbeValue.f113)
        try f114.set(value: fbeValue.f114)
        try f115.set(value: fbeValue.f115)
        try f116.set(value: fbeValue.f116)
        try f117.set(value: fbeValue.f117)
        try f118.set(value: fbeValue.f118)
        try f119.set(value: fbeValue.f119)
        try f120.set(value: fbeValue.f120)
        try f121.set(value: fbeValue.f121)
        try f122.set(value: fbeValue.f122)
        try f123.set(value: fbeValue.f123)
        try f124.set(value: fbeValue.f124)
        try f125.set(value: fbeValue.f125)
        try f126.set(value: fbeValue.f126)
        try f127.set(value: fbeValue.f127)
        try f128.set(value: fbeValue.f128)
        try f129.set(value: fbeValue.f129)
        try f130.set(value: fbeValue.f130)
        try f131.set(value: fbeValue.f131)
        try f132.set(value: fbeValue.f132)
        try f133.set(value: fbeValue.f133)
        try f134.set(value: fbeValue.f134)
        try f135.set(value: fbeValue.f135)
        try f136.set(value: fbeValue.f136)
        try f137.set(value: fbeValue.f137)
        try f138.set(value: fbeValue.f138)
        try f139.set(value: fbeValue.f139)
        try f140.set(value: fbeValue.f140)
        try f141.set(value: fbeValue.f141)
        try f142.set(value: fbeValue.f142)
        try f143.set(value: fbeValue.f143)
        try f144.set(value: fbeValue.f144)
        try f145.set(value: fbeValue.f145)
        try f146.set(value: fbeValue.f146)
        try f147.set(value: fbeValue.f147)
        try f148.set(value: fbeValue.f148)
        try f149.set(value: fbeValue.f149)
        try f150.set(value: fbeValue.f150)
        try f151.set(value: fbeValue.f151)
        try f152.set(value: fbeValue.f152)
        try f153.set(value: fbeValue.f153)
        try f154.set(value: fbeValue.f154)
        try f155.set(value: fbeValue.f155)
        try f156.set(value: fbeValue.f156)
        try f157.set(value: fbeValue.f157)
        try f158.set(value: fbeValue.f158)
        try f159.set(value: fbeValue.f159)
        try f160.set(value: fbeValue.f160)
        try f161.set(value: fbeValue.f161)
        try f162.set(value: fbeValue.f162)
        try f163.set(value: fbeValue.f163)
        try f164.set(value: fbeValue.f164)
        try f165.set(value: fbeValue.f165)
    }
}
