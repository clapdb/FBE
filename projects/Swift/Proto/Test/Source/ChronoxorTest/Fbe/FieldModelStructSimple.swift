//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe
import ChronoxorProto

// Fast Binary Encoding StructSimple field model
public class FieldModelStructSimple: FieldModel {

    public var _buffer: Buffer
    public var _offset: Int

    let id: ChronoxorFbe.FieldModelInt32
    let f1: ChronoxorFbe.FieldModelBoolean
    let f2: ChronoxorFbe.FieldModelBoolean
    let f3: ChronoxorFbe.FieldModelUInt8
    let f4: ChronoxorFbe.FieldModelUInt8
    let f5: ChronoxorFbe.FieldModelChar
    let f6: ChronoxorFbe.FieldModelChar
    let f7: ChronoxorFbe.FieldModelWChar
    let f8: ChronoxorFbe.FieldModelWChar
    let f9: ChronoxorFbe.FieldModelInt8
    let f10: ChronoxorFbe.FieldModelInt8
    let f11: ChronoxorFbe.FieldModelUInt8
    let f12: ChronoxorFbe.FieldModelUInt8
    let f13: ChronoxorFbe.FieldModelInt16
    let f14: ChronoxorFbe.FieldModelInt16
    let f15: ChronoxorFbe.FieldModelUInt16
    let f16: ChronoxorFbe.FieldModelUInt16
    let f17: ChronoxorFbe.FieldModelInt32
    let f18: ChronoxorFbe.FieldModelInt32
    let f19: ChronoxorFbe.FieldModelUInt32
    let f20: ChronoxorFbe.FieldModelUInt32
    let f21: ChronoxorFbe.FieldModelInt64
    let f22: ChronoxorFbe.FieldModelInt64
    let f23: ChronoxorFbe.FieldModelUInt64
    let f24: ChronoxorFbe.FieldModelUInt64
    let f25: ChronoxorFbe.FieldModelFloat
    let f26: ChronoxorFbe.FieldModelFloat
    let f27: ChronoxorFbe.FieldModelDouble
    let f28: ChronoxorFbe.FieldModelDouble
    let f29: ChronoxorFbe.FieldModelDecimal
    let f30: ChronoxorFbe.FieldModelDecimal
    let f31: ChronoxorFbe.FieldModelString
    let f32: ChronoxorFbe.FieldModelString
    let f33: ChronoxorFbe.FieldModelTimestamp
    let f34: ChronoxorFbe.FieldModelTimestamp
    let f35: ChronoxorFbe.FieldModelTimestamp
    let f36: ChronoxorFbe.FieldModelUUID
    let f37: ChronoxorFbe.FieldModelUUID
    let f38: ChronoxorFbe.FieldModelUUID
    let f39: ChronoxorProto.FieldModelOrderSide
    let f40: ChronoxorProto.FieldModelOrderType
    let f41: ChronoxorProto.FieldModelOrder
    let f42: ChronoxorProto.FieldModelBalance
    let f43: ChronoxorProto.FieldModelState
    let f44: ChronoxorProto.FieldModelAccount

    // Field size
    public let fbeSize: Int = 4

    // Field body size
    public let fbeBody: Int

    // Set the struct value (end phase)
    public required init() {
        let buffer = Buffer()
        let offset = 0

        _buffer = buffer
        _offset = offset

        id = FieldModelInt32(buffer: buffer, offset: 4 + 4)
        f1 = FieldModelBoolean(buffer: buffer, offset: id.fbeOffset + id.fbeSize)
        f2 = FieldModelBoolean(buffer: buffer, offset: f1.fbeOffset + f1.fbeSize)
        f3 = FieldModelUInt8(buffer: buffer, offset: f2.fbeOffset + f2.fbeSize)
        f4 = FieldModelUInt8(buffer: buffer, offset: f3.fbeOffset + f3.fbeSize)
        f5 = FieldModelChar(buffer: buffer, offset: f4.fbeOffset + f4.fbeSize)
        f6 = FieldModelChar(buffer: buffer, offset: f5.fbeOffset + f5.fbeSize)
        f7 = FieldModelWChar(buffer: buffer, offset: f6.fbeOffset + f6.fbeSize)
        f8 = FieldModelWChar(buffer: buffer, offset: f7.fbeOffset + f7.fbeSize)
        f9 = FieldModelInt8(buffer: buffer, offset: f8.fbeOffset + f8.fbeSize)
        f10 = FieldModelInt8(buffer: buffer, offset: f9.fbeOffset + f9.fbeSize)
        f11 = FieldModelUInt8(buffer: buffer, offset: f10.fbeOffset + f10.fbeSize)
        f12 = FieldModelUInt8(buffer: buffer, offset: f11.fbeOffset + f11.fbeSize)
        f13 = FieldModelInt16(buffer: buffer, offset: f12.fbeOffset + f12.fbeSize)
        f14 = FieldModelInt16(buffer: buffer, offset: f13.fbeOffset + f13.fbeSize)
        f15 = FieldModelUInt16(buffer: buffer, offset: f14.fbeOffset + f14.fbeSize)
        f16 = FieldModelUInt16(buffer: buffer, offset: f15.fbeOffset + f15.fbeSize)
        f17 = FieldModelInt32(buffer: buffer, offset: f16.fbeOffset + f16.fbeSize)
        f18 = FieldModelInt32(buffer: buffer, offset: f17.fbeOffset + f17.fbeSize)
        f19 = FieldModelUInt32(buffer: buffer, offset: f18.fbeOffset + f18.fbeSize)
        f20 = FieldModelUInt32(buffer: buffer, offset: f19.fbeOffset + f19.fbeSize)
        f21 = FieldModelInt64(buffer: buffer, offset: f20.fbeOffset + f20.fbeSize)
        f22 = FieldModelInt64(buffer: buffer, offset: f21.fbeOffset + f21.fbeSize)
        f23 = FieldModelUInt64(buffer: buffer, offset: f22.fbeOffset + f22.fbeSize)
        f24 = FieldModelUInt64(buffer: buffer, offset: f23.fbeOffset + f23.fbeSize)
        f25 = FieldModelFloat(buffer: buffer, offset: f24.fbeOffset + f24.fbeSize)
        f26 = FieldModelFloat(buffer: buffer, offset: f25.fbeOffset + f25.fbeSize)
        f27 = FieldModelDouble(buffer: buffer, offset: f26.fbeOffset + f26.fbeSize)
        f28 = FieldModelDouble(buffer: buffer, offset: f27.fbeOffset + f27.fbeSize)
        f29 = FieldModelDecimal(buffer: buffer, offset: f28.fbeOffset + f28.fbeSize)
        f30 = FieldModelDecimal(buffer: buffer, offset: f29.fbeOffset + f29.fbeSize)
        f31 = FieldModelString(buffer: buffer, offset: f30.fbeOffset + f30.fbeSize)
        f32 = FieldModelString(buffer: buffer, offset: f31.fbeOffset + f31.fbeSize)
        f33 = FieldModelTimestamp(buffer: buffer, offset: f32.fbeOffset + f32.fbeSize)
        f34 = FieldModelTimestamp(buffer: buffer, offset: f33.fbeOffset + f33.fbeSize)
        f35 = FieldModelTimestamp(buffer: buffer, offset: f34.fbeOffset + f34.fbeSize)
        f36 = FieldModelUUID(buffer: buffer, offset: f35.fbeOffset + f35.fbeSize)
        f37 = FieldModelUUID(buffer: buffer, offset: f36.fbeOffset + f36.fbeSize)
        f38 = FieldModelUUID(buffer: buffer, offset: f37.fbeOffset + f37.fbeSize)
        f39 = ChronoxorProto.FieldModelOrderSide(buffer: buffer, offset: f38.fbeOffset + f38.fbeSize)
        f40 = ChronoxorProto.FieldModelOrderType(buffer: buffer, offset: f39.fbeOffset + f39.fbeSize)
        f41 = ChronoxorProto.FieldModelOrder(buffer: buffer, offset: f40.fbeOffset + f40.fbeSize)
        f42 = ChronoxorProto.FieldModelBalance(buffer: buffer, offset: f41.fbeOffset + f41.fbeSize)
        f43 = ChronoxorProto.FieldModelState(buffer: buffer, offset: f42.fbeOffset + f42.fbeSize)
        f44 = ChronoxorProto.FieldModelAccount(buffer: buffer, offset: f43.fbeOffset + f43.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += id.fbeSize
            fbeBody += f1.fbeSize
            fbeBody += f2.fbeSize
            fbeBody += f3.fbeSize
            fbeBody += f4.fbeSize
            fbeBody += f5.fbeSize
            fbeBody += f6.fbeSize
            fbeBody += f7.fbeSize
            fbeBody += f8.fbeSize
            fbeBody += f9.fbeSize
            fbeBody += f10.fbeSize
            fbeBody += f11.fbeSize
            fbeBody += f12.fbeSize
            fbeBody += f13.fbeSize
            fbeBody += f14.fbeSize
            fbeBody += f15.fbeSize
            fbeBody += f16.fbeSize
            fbeBody += f17.fbeSize
            fbeBody += f18.fbeSize
            fbeBody += f19.fbeSize
            fbeBody += f20.fbeSize
            fbeBody += f21.fbeSize
            fbeBody += f22.fbeSize
            fbeBody += f23.fbeSize
            fbeBody += f24.fbeSize
            fbeBody += f25.fbeSize
            fbeBody += f26.fbeSize
            fbeBody += f27.fbeSize
            fbeBody += f28.fbeSize
            fbeBody += f29.fbeSize
            fbeBody += f30.fbeSize
            fbeBody += f31.fbeSize
            fbeBody += f32.fbeSize
            fbeBody += f33.fbeSize
            fbeBody += f34.fbeSize
            fbeBody += f35.fbeSize
            fbeBody += f36.fbeSize
            fbeBody += f37.fbeSize
            fbeBody += f38.fbeSize
            fbeBody += f39.fbeSize
            fbeBody += f40.fbeSize
            fbeBody += f41.fbeSize
            fbeBody += f42.fbeSize
            fbeBody += f43.fbeSize
            fbeBody += f44.fbeSize
        self.fbeBody = fbeBody
    }

    // 
    public required init(buffer: Buffer = Buffer(), offset: Int = 0) {
        _buffer = buffer
        _offset = offset

        id = FieldModelInt32(buffer: buffer, offset: 4 + 4)
        f1 = FieldModelBoolean(buffer: buffer, offset: id.fbeOffset + id.fbeSize)
        f2 = FieldModelBoolean(buffer: buffer, offset: f1.fbeOffset + f1.fbeSize)
        f3 = FieldModelUInt8(buffer: buffer, offset: f2.fbeOffset + f2.fbeSize)
        f4 = FieldModelUInt8(buffer: buffer, offset: f3.fbeOffset + f3.fbeSize)
        f5 = FieldModelChar(buffer: buffer, offset: f4.fbeOffset + f4.fbeSize)
        f6 = FieldModelChar(buffer: buffer, offset: f5.fbeOffset + f5.fbeSize)
        f7 = FieldModelWChar(buffer: buffer, offset: f6.fbeOffset + f6.fbeSize)
        f8 = FieldModelWChar(buffer: buffer, offset: f7.fbeOffset + f7.fbeSize)
        f9 = FieldModelInt8(buffer: buffer, offset: f8.fbeOffset + f8.fbeSize)
        f10 = FieldModelInt8(buffer: buffer, offset: f9.fbeOffset + f9.fbeSize)
        f11 = FieldModelUInt8(buffer: buffer, offset: f10.fbeOffset + f10.fbeSize)
        f12 = FieldModelUInt8(buffer: buffer, offset: f11.fbeOffset + f11.fbeSize)
        f13 = FieldModelInt16(buffer: buffer, offset: f12.fbeOffset + f12.fbeSize)
        f14 = FieldModelInt16(buffer: buffer, offset: f13.fbeOffset + f13.fbeSize)
        f15 = FieldModelUInt16(buffer: buffer, offset: f14.fbeOffset + f14.fbeSize)
        f16 = FieldModelUInt16(buffer: buffer, offset: f15.fbeOffset + f15.fbeSize)
        f17 = FieldModelInt32(buffer: buffer, offset: f16.fbeOffset + f16.fbeSize)
        f18 = FieldModelInt32(buffer: buffer, offset: f17.fbeOffset + f17.fbeSize)
        f19 = FieldModelUInt32(buffer: buffer, offset: f18.fbeOffset + f18.fbeSize)
        f20 = FieldModelUInt32(buffer: buffer, offset: f19.fbeOffset + f19.fbeSize)
        f21 = FieldModelInt64(buffer: buffer, offset: f20.fbeOffset + f20.fbeSize)
        f22 = FieldModelInt64(buffer: buffer, offset: f21.fbeOffset + f21.fbeSize)
        f23 = FieldModelUInt64(buffer: buffer, offset: f22.fbeOffset + f22.fbeSize)
        f24 = FieldModelUInt64(buffer: buffer, offset: f23.fbeOffset + f23.fbeSize)
        f25 = FieldModelFloat(buffer: buffer, offset: f24.fbeOffset + f24.fbeSize)
        f26 = FieldModelFloat(buffer: buffer, offset: f25.fbeOffset + f25.fbeSize)
        f27 = FieldModelDouble(buffer: buffer, offset: f26.fbeOffset + f26.fbeSize)
        f28 = FieldModelDouble(buffer: buffer, offset: f27.fbeOffset + f27.fbeSize)
        f29 = FieldModelDecimal(buffer: buffer, offset: f28.fbeOffset + f28.fbeSize)
        f30 = FieldModelDecimal(buffer: buffer, offset: f29.fbeOffset + f29.fbeSize)
        f31 = FieldModelString(buffer: buffer, offset: f30.fbeOffset + f30.fbeSize)
        f32 = FieldModelString(buffer: buffer, offset: f31.fbeOffset + f31.fbeSize)
        f33 = FieldModelTimestamp(buffer: buffer, offset: f32.fbeOffset + f32.fbeSize)
        f34 = FieldModelTimestamp(buffer: buffer, offset: f33.fbeOffset + f33.fbeSize)
        f35 = FieldModelTimestamp(buffer: buffer, offset: f34.fbeOffset + f34.fbeSize)
        f36 = FieldModelUUID(buffer: buffer, offset: f35.fbeOffset + f35.fbeSize)
        f37 = FieldModelUUID(buffer: buffer, offset: f36.fbeOffset + f36.fbeSize)
        f38 = FieldModelUUID(buffer: buffer, offset: f37.fbeOffset + f37.fbeSize)
        f39 = ChronoxorProto.FieldModelOrderSide(buffer: buffer, offset: f38.fbeOffset + f38.fbeSize)
        f40 = ChronoxorProto.FieldModelOrderType(buffer: buffer, offset: f39.fbeOffset + f39.fbeSize)
        f41 = ChronoxorProto.FieldModelOrder(buffer: buffer, offset: f40.fbeOffset + f40.fbeSize)
        f42 = ChronoxorProto.FieldModelBalance(buffer: buffer, offset: f41.fbeOffset + f41.fbeSize)
        f43 = ChronoxorProto.FieldModelState(buffer: buffer, offset: f42.fbeOffset + f42.fbeSize)
        f44 = ChronoxorProto.FieldModelAccount(buffer: buffer, offset: f43.fbeOffset + f43.fbeSize)

        var fbeBody = (4 + 4)
            fbeBody += id.fbeSize
            fbeBody += f1.fbeSize
            fbeBody += f2.fbeSize
            fbeBody += f3.fbeSize
            fbeBody += f4.fbeSize
            fbeBody += f5.fbeSize
            fbeBody += f6.fbeSize
            fbeBody += f7.fbeSize
            fbeBody += f8.fbeSize
            fbeBody += f9.fbeSize
            fbeBody += f10.fbeSize
            fbeBody += f11.fbeSize
            fbeBody += f12.fbeSize
            fbeBody += f13.fbeSize
            fbeBody += f14.fbeSize
            fbeBody += f15.fbeSize
            fbeBody += f16.fbeSize
            fbeBody += f17.fbeSize
            fbeBody += f18.fbeSize
            fbeBody += f19.fbeSize
            fbeBody += f20.fbeSize
            fbeBody += f21.fbeSize
            fbeBody += f22.fbeSize
            fbeBody += f23.fbeSize
            fbeBody += f24.fbeSize
            fbeBody += f25.fbeSize
            fbeBody += f26.fbeSize
            fbeBody += f27.fbeSize
            fbeBody += f28.fbeSize
            fbeBody += f29.fbeSize
            fbeBody += f30.fbeSize
            fbeBody += f31.fbeSize
            fbeBody += f32.fbeSize
            fbeBody += f33.fbeSize
            fbeBody += f34.fbeSize
            fbeBody += f35.fbeSize
            fbeBody += f36.fbeSize
            fbeBody += f37.fbeSize
            fbeBody += f38.fbeSize
            fbeBody += f39.fbeSize
            fbeBody += f40.fbeSize
            fbeBody += f41.fbeSize
            fbeBody += f42.fbeSize
            fbeBody += f43.fbeSize
            fbeBody += f44.fbeSize
        self.fbeBody = fbeBody
    }

    // Field extra size
    public var fbeExtra: Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4) > _buffer.size) {
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)

        var fbeResult = fbeBody
            fbeResult += id.fbeExtra
            fbeResult += f1.fbeExtra
            fbeResult += f2.fbeExtra
            fbeResult += f3.fbeExtra
            fbeResult += f4.fbeExtra
            fbeResult += f5.fbeExtra
            fbeResult += f6.fbeExtra
            fbeResult += f7.fbeExtra
            fbeResult += f8.fbeExtra
            fbeResult += f9.fbeExtra
            fbeResult += f10.fbeExtra
            fbeResult += f11.fbeExtra
            fbeResult += f12.fbeExtra
            fbeResult += f13.fbeExtra
            fbeResult += f14.fbeExtra
            fbeResult += f15.fbeExtra
            fbeResult += f16.fbeExtra
            fbeResult += f17.fbeExtra
            fbeResult += f18.fbeExtra
            fbeResult += f19.fbeExtra
            fbeResult += f20.fbeExtra
            fbeResult += f21.fbeExtra
            fbeResult += f22.fbeExtra
            fbeResult += f23.fbeExtra
            fbeResult += f24.fbeExtra
            fbeResult += f25.fbeExtra
            fbeResult += f26.fbeExtra
            fbeResult += f27.fbeExtra
            fbeResult += f28.fbeExtra
            fbeResult += f29.fbeExtra
            fbeResult += f30.fbeExtra
            fbeResult += f31.fbeExtra
            fbeResult += f32.fbeExtra
            fbeResult += f33.fbeExtra
            fbeResult += f34.fbeExtra
            fbeResult += f35.fbeExtra
            fbeResult += f36.fbeExtra
            fbeResult += f37.fbeExtra
            fbeResult += f38.fbeExtra
            fbeResult += f39.fbeExtra
            fbeResult += f40.fbeExtra
            fbeResult += f41.fbeExtra
            fbeResult += f42.fbeExtra
            fbeResult += f43.fbeExtra
            fbeResult += f44.fbeExtra

        _buffer.unshift(offset: fbeStructOffset)

        return fbeResult
    }

    // Field type
    public var fbeType: Int = fbeTypeConst
    public static let fbeTypeConst: Int = 110

    // Check if the struct value is valid
    func verify(fbeVerifyType: Bool = true) -> Bool {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            return true
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            return false
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < (4 + 4) {
            return false
        }

        let fbeStructType = Int(readUInt32(offset: fbeStructOffset + 4))
        if fbeVerifyType && (fbeStructType != fbeType) {
            return false
        }

        _buffer.shift(offset: fbeStructOffset)
        let fbeResult = verifyFields(fbeStructSize: fbeStructSize)
        _buffer.unshift(offset: fbeStructOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    public func verifyFields(fbeStructSize: Int) -> Bool {
        var fbeCurrentSize = 4 + 4

        if (fbeCurrentSize + id.fbeSize) > fbeStructSize {
            return true
        }
        if !id.verify() {
            return false
        }
        fbeCurrentSize += id.fbeSize

        if (fbeCurrentSize + f1.fbeSize) > fbeStructSize {
            return true
        }
        if !f1.verify() {
            return false
        }
        fbeCurrentSize += f1.fbeSize

        if (fbeCurrentSize + f2.fbeSize) > fbeStructSize {
            return true
        }
        if !f2.verify() {
            return false
        }
        fbeCurrentSize += f2.fbeSize

        if (fbeCurrentSize + f3.fbeSize) > fbeStructSize {
            return true
        }
        if !f3.verify() {
            return false
        }
        fbeCurrentSize += f3.fbeSize

        if (fbeCurrentSize + f4.fbeSize) > fbeStructSize {
            return true
        }
        if !f4.verify() {
            return false
        }
        fbeCurrentSize += f4.fbeSize

        if (fbeCurrentSize + f5.fbeSize) > fbeStructSize {
            return true
        }
        if !f5.verify() {
            return false
        }
        fbeCurrentSize += f5.fbeSize

        if (fbeCurrentSize + f6.fbeSize) > fbeStructSize {
            return true
        }
        if !f6.verify() {
            return false
        }
        fbeCurrentSize += f6.fbeSize

        if (fbeCurrentSize + f7.fbeSize) > fbeStructSize {
            return true
        }
        if !f7.verify() {
            return false
        }
        fbeCurrentSize += f7.fbeSize

        if (fbeCurrentSize + f8.fbeSize) > fbeStructSize {
            return true
        }
        if !f8.verify() {
            return false
        }
        fbeCurrentSize += f8.fbeSize

        if (fbeCurrentSize + f9.fbeSize) > fbeStructSize {
            return true
        }
        if !f9.verify() {
            return false
        }
        fbeCurrentSize += f9.fbeSize

        if (fbeCurrentSize + f10.fbeSize) > fbeStructSize {
            return true
        }
        if !f10.verify() {
            return false
        }
        fbeCurrentSize += f10.fbeSize

        if (fbeCurrentSize + f11.fbeSize) > fbeStructSize {
            return true
        }
        if !f11.verify() {
            return false
        }
        fbeCurrentSize += f11.fbeSize

        if (fbeCurrentSize + f12.fbeSize) > fbeStructSize {
            return true
        }
        if !f12.verify() {
            return false
        }
        fbeCurrentSize += f12.fbeSize

        if (fbeCurrentSize + f13.fbeSize) > fbeStructSize {
            return true
        }
        if !f13.verify() {
            return false
        }
        fbeCurrentSize += f13.fbeSize

        if (fbeCurrentSize + f14.fbeSize) > fbeStructSize {
            return true
        }
        if !f14.verify() {
            return false
        }
        fbeCurrentSize += f14.fbeSize

        if (fbeCurrentSize + f15.fbeSize) > fbeStructSize {
            return true
        }
        if !f15.verify() {
            return false
        }
        fbeCurrentSize += f15.fbeSize

        if (fbeCurrentSize + f16.fbeSize) > fbeStructSize {
            return true
        }
        if !f16.verify() {
            return false
        }
        fbeCurrentSize += f16.fbeSize

        if (fbeCurrentSize + f17.fbeSize) > fbeStructSize {
            return true
        }
        if !f17.verify() {
            return false
        }
        fbeCurrentSize += f17.fbeSize

        if (fbeCurrentSize + f18.fbeSize) > fbeStructSize {
            return true
        }
        if !f18.verify() {
            return false
        }
        fbeCurrentSize += f18.fbeSize

        if (fbeCurrentSize + f19.fbeSize) > fbeStructSize {
            return true
        }
        if !f19.verify() {
            return false
        }
        fbeCurrentSize += f19.fbeSize

        if (fbeCurrentSize + f20.fbeSize) > fbeStructSize {
            return true
        }
        if !f20.verify() {
            return false
        }
        fbeCurrentSize += f20.fbeSize

        if (fbeCurrentSize + f21.fbeSize) > fbeStructSize {
            return true
        }
        if !f21.verify() {
            return false
        }
        fbeCurrentSize += f21.fbeSize

        if (fbeCurrentSize + f22.fbeSize) > fbeStructSize {
            return true
        }
        if !f22.verify() {
            return false
        }
        fbeCurrentSize += f22.fbeSize

        if (fbeCurrentSize + f23.fbeSize) > fbeStructSize {
            return true
        }
        if !f23.verify() {
            return false
        }
        fbeCurrentSize += f23.fbeSize

        if (fbeCurrentSize + f24.fbeSize) > fbeStructSize {
            return true
        }
        if !f24.verify() {
            return false
        }
        fbeCurrentSize += f24.fbeSize

        if (fbeCurrentSize + f25.fbeSize) > fbeStructSize {
            return true
        }
        if !f25.verify() {
            return false
        }
        fbeCurrentSize += f25.fbeSize

        if (fbeCurrentSize + f26.fbeSize) > fbeStructSize {
            return true
        }
        if !f26.verify() {
            return false
        }
        fbeCurrentSize += f26.fbeSize

        if (fbeCurrentSize + f27.fbeSize) > fbeStructSize {
            return true
        }
        if !f27.verify() {
            return false
        }
        fbeCurrentSize += f27.fbeSize

        if (fbeCurrentSize + f28.fbeSize) > fbeStructSize {
            return true
        }
        if !f28.verify() {
            return false
        }
        fbeCurrentSize += f28.fbeSize

        if (fbeCurrentSize + f29.fbeSize) > fbeStructSize {
            return true
        }
        if !f29.verify() {
            return false
        }
        fbeCurrentSize += f29.fbeSize

        if (fbeCurrentSize + f30.fbeSize) > fbeStructSize {
            return true
        }
        if !f30.verify() {
            return false
        }
        fbeCurrentSize += f30.fbeSize

        if (fbeCurrentSize + f31.fbeSize) > fbeStructSize {
            return true
        }
        if !f31.verify() {
            return false
        }
        fbeCurrentSize += f31.fbeSize

        if (fbeCurrentSize + f32.fbeSize) > fbeStructSize {
            return true
        }
        if !f32.verify() {
            return false
        }
        fbeCurrentSize += f32.fbeSize

        if (fbeCurrentSize + f33.fbeSize) > fbeStructSize {
            return true
        }
        if !f33.verify() {
            return false
        }
        fbeCurrentSize += f33.fbeSize

        if (fbeCurrentSize + f34.fbeSize) > fbeStructSize {
            return true
        }
        if !f34.verify() {
            return false
        }
        fbeCurrentSize += f34.fbeSize

        if (fbeCurrentSize + f35.fbeSize) > fbeStructSize {
            return true
        }
        if !f35.verify() {
            return false
        }
        fbeCurrentSize += f35.fbeSize

        if (fbeCurrentSize + f36.fbeSize) > fbeStructSize {
            return true
        }
        if !f36.verify() {
            return false
        }
        fbeCurrentSize += f36.fbeSize

        if (fbeCurrentSize + f37.fbeSize) > fbeStructSize {
            return true
        }
        if !f37.verify() {
            return false
        }
        fbeCurrentSize += f37.fbeSize

        if (fbeCurrentSize + f38.fbeSize) > fbeStructSize {
            return true
        }
        if !f38.verify() {
            return false
        }
        fbeCurrentSize += f38.fbeSize

        if (fbeCurrentSize + f39.fbeSize) > fbeStructSize {
            return true
        }
        if !f39.verify() {
            return false
        }
        fbeCurrentSize += f39.fbeSize

        if (fbeCurrentSize + f40.fbeSize) > fbeStructSize {
            return true
        }
        if !f40.verify() {
            return false
        }
        fbeCurrentSize += f40.fbeSize

        if (fbeCurrentSize + f41.fbeSize) > fbeStructSize {
            return true
        }
        if !f41.verify() {
            return false
        }
        fbeCurrentSize += f41.fbeSize

        if (fbeCurrentSize + f42.fbeSize) > fbeStructSize {
            return true
        }
        if !f42.verify() {
            return false
        }
        fbeCurrentSize += f42.fbeSize

        if (fbeCurrentSize + f43.fbeSize) > fbeStructSize {
            return true
        }
        if !f43.verify() {
            return false
        }
        fbeCurrentSize += f43.fbeSize

        if (fbeCurrentSize + f44.fbeSize) > fbeStructSize {
            return true
        }
        if !f44.verify() {
            return false
        }
        fbeCurrentSize += f44.fbeSize

        return true
    }

    // Get the struct value (begin phase)
    func getBegin() -> Int {
        if _buffer.offset + fbeOffset + fbeSize > _buffer.size {
            return 0
        }

        let fbeStructOffset = Int(readUInt32(offset: fbeOffset))
        if (fbeStructOffset == 0) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = Int(readUInt32(offset: fbeStructOffset))
        if fbeStructSize < 4 + 4 {
            assertionFailure("Model is broken!")
            return 0
        }

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Get the struct value (end phase)
    func getEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Get the struct value
    public func get() -> StructSimple {
        var fbeValue = StructSimple()
        return get(fbeValue: &fbeValue)
    }

    public func get(fbeValue: inout StructSimple) -> StructSimple {
        let fbeBegin = getBegin()
        if fbeBegin == 0 {
            return fbeValue
        }

        let fbeStructSize = Int(readUInt32(offset: 0))
        getFields(fbeValue: &fbeValue, fbeStructSize: fbeStructSize)
        getEnd(fbeBegin: fbeBegin)
        return fbeValue
    }

    // Get the struct fields values
    public func getFields(fbeValue: inout StructSimple, fbeStructSize: Int) {
        var fbeCurrentSize = 4 + 4

        if fbeCurrentSize + id.fbeSize <= fbeStructSize {
            fbeValue.id = id.get()
        } else {
            fbeValue.id = 0
        }
        fbeCurrentSize += id.fbeSize

        if fbeCurrentSize + f1.fbeSize <= fbeStructSize {
            fbeValue.f1 = f1.get()
        } else {
            fbeValue.f1 = false
        }
        fbeCurrentSize += f1.fbeSize

        if fbeCurrentSize + f2.fbeSize <= fbeStructSize {
            fbeValue.f2 = f2.get(defaults: true)
        } else {
            fbeValue.f2 = true
        }
        fbeCurrentSize += f2.fbeSize

        if fbeCurrentSize + f3.fbeSize <= fbeStructSize {
            fbeValue.f3 = f3.get()
        } else {
            fbeValue.f3 = 0
        }
        fbeCurrentSize += f3.fbeSize

        if fbeCurrentSize + f4.fbeSize <= fbeStructSize {
            fbeValue.f4 = f4.get(defaults: 0xFF)
        } else {
            fbeValue.f4 = 0xFF
        }
        fbeCurrentSize += f4.fbeSize

        if fbeCurrentSize + f5.fbeSize <= fbeStructSize {
            fbeValue.f5 = f5.get()
        } else {
            fbeValue.f5 = "\0"
        }
        fbeCurrentSize += f5.fbeSize

        if fbeCurrentSize + f6.fbeSize <= fbeStructSize {
            fbeValue.f6 = f6.get(defaults: "!")
        } else {
            fbeValue.f6 = "!"
        }
        fbeCurrentSize += f6.fbeSize

        if fbeCurrentSize + f7.fbeSize <= fbeStructSize {
            fbeValue.f7 = f7.get()
        } else {
            fbeValue.f7 = Character(UnicodeScalar(0)!)
        }
        fbeCurrentSize += f7.fbeSize

        if fbeCurrentSize + f8.fbeSize <= fbeStructSize {
            fbeValue.f8 = f8.get(defaults: Character(UnicodeScalar(0x0444)!))
        } else {
            fbeValue.f8 = Character(UnicodeScalar(0x0444)!)
        }
        fbeCurrentSize += f8.fbeSize

        if fbeCurrentSize + f9.fbeSize <= fbeStructSize {
            fbeValue.f9 = f9.get()
        } else {
            fbeValue.f9 = 0
        }
        fbeCurrentSize += f9.fbeSize

        if fbeCurrentSize + f10.fbeSize <= fbeStructSize {
            fbeValue.f10 = f10.get(defaults: Int8.max)
        } else {
            fbeValue.f10 = Int8.max
        }
        fbeCurrentSize += f10.fbeSize

        if fbeCurrentSize + f11.fbeSize <= fbeStructSize {
            fbeValue.f11 = f11.get(defaults: UInt8.min)
        } else {
            fbeValue.f11 = UInt8.min
        }
        fbeCurrentSize += f11.fbeSize

        if fbeCurrentSize + f12.fbeSize <= fbeStructSize {
            fbeValue.f12 = f12.get(defaults: UInt8.max)
        } else {
            fbeValue.f12 = UInt8.max
        }
        fbeCurrentSize += f12.fbeSize

        if fbeCurrentSize + f13.fbeSize <= fbeStructSize {
            fbeValue.f13 = f13.get()
        } else {
            fbeValue.f13 = 0
        }
        fbeCurrentSize += f13.fbeSize

        if fbeCurrentSize + f14.fbeSize <= fbeStructSize {
            fbeValue.f14 = f14.get(defaults: Int16.max)
        } else {
            fbeValue.f14 = Int16.max
        }
        fbeCurrentSize += f14.fbeSize

        if fbeCurrentSize + f15.fbeSize <= fbeStructSize {
            fbeValue.f15 = f15.get(defaults: UInt16.min)
        } else {
            fbeValue.f15 = UInt16.min
        }
        fbeCurrentSize += f15.fbeSize

        if fbeCurrentSize + f16.fbeSize <= fbeStructSize {
            fbeValue.f16 = f16.get(defaults: UInt16.max)
        } else {
            fbeValue.f16 = UInt16.max
        }
        fbeCurrentSize += f16.fbeSize

        if fbeCurrentSize + f17.fbeSize <= fbeStructSize {
            fbeValue.f17 = f17.get()
        } else {
            fbeValue.f17 = 0
        }
        fbeCurrentSize += f17.fbeSize

        if fbeCurrentSize + f18.fbeSize <= fbeStructSize {
            fbeValue.f18 = f18.get(defaults: Int32.max)
        } else {
            fbeValue.f18 = Int32.max
        }
        fbeCurrentSize += f18.fbeSize

        if fbeCurrentSize + f19.fbeSize <= fbeStructSize {
            fbeValue.f19 = f19.get(defaults: UInt32.min)
        } else {
            fbeValue.f19 = UInt32.min
        }
        fbeCurrentSize += f19.fbeSize

        if fbeCurrentSize + f20.fbeSize <= fbeStructSize {
            fbeValue.f20 = f20.get(defaults: UInt32.max)
        } else {
            fbeValue.f20 = UInt32.max
        }
        fbeCurrentSize += f20.fbeSize

        if fbeCurrentSize + f21.fbeSize <= fbeStructSize {
            fbeValue.f21 = f21.get()
        } else {
            fbeValue.f21 = 0
        }
        fbeCurrentSize += f21.fbeSize

        if fbeCurrentSize + f22.fbeSize <= fbeStructSize {
            fbeValue.f22 = f22.get(defaults: Int64.max)
        } else {
            fbeValue.f22 = Int64.max
        }
        fbeCurrentSize += f22.fbeSize

        if fbeCurrentSize + f23.fbeSize <= fbeStructSize {
            fbeValue.f23 = f23.get(defaults: UInt64.min)
        } else {
            fbeValue.f23 = UInt64.min
        }
        fbeCurrentSize += f23.fbeSize

        if fbeCurrentSize + f24.fbeSize <= fbeStructSize {
            fbeValue.f24 = f24.get(defaults: UInt64.max)
        } else {
            fbeValue.f24 = UInt64.max
        }
        fbeCurrentSize += f24.fbeSize

        if fbeCurrentSize + f25.fbeSize <= fbeStructSize {
            fbeValue.f25 = f25.get()
        } else {
            fbeValue.f25 = 0.0
        }
        fbeCurrentSize += f25.fbeSize

        if fbeCurrentSize + f26.fbeSize <= fbeStructSize {
            fbeValue.f26 = f26.get(defaults: 123.456)
        } else {
            fbeValue.f26 = 123.456
        }
        fbeCurrentSize += f26.fbeSize

        if fbeCurrentSize + f27.fbeSize <= fbeStructSize {
            fbeValue.f27 = f27.get()
        } else {
            fbeValue.f27 = 0.0
        }
        fbeCurrentSize += f27.fbeSize

        if fbeCurrentSize + f28.fbeSize <= fbeStructSize {
            fbeValue.f28 = f28.get(defaults: -123.456e+123)
        } else {
            fbeValue.f28 = -123.456e+123
        }
        fbeCurrentSize += f28.fbeSize

        if fbeCurrentSize + f29.fbeSize <= fbeStructSize {
            fbeValue.f29 = f29.get()
        } else {
            fbeValue.f29 = Decimal.zero
        }
        fbeCurrentSize += f29.fbeSize

        if fbeCurrentSize + f30.fbeSize <= fbeStructSize {
            fbeValue.f30 = f30.get(defaults: Decimal(string: "123456.123456")!)
        } else {
            fbeValue.f30 = Decimal(string: "123456.123456")!
        }
        fbeCurrentSize += f30.fbeSize

        if fbeCurrentSize + f31.fbeSize <= fbeStructSize {
            fbeValue.f31 = f31.get()
        } else {
            fbeValue.f31 = ""
        }
        fbeCurrentSize += f31.fbeSize

        if fbeCurrentSize + f32.fbeSize <= fbeStructSize {
            fbeValue.f32 = f32.get(defaults: "Initial string!")
        } else {
            fbeValue.f32 = "Initial string!"
        }
        fbeCurrentSize += f32.fbeSize

        if fbeCurrentSize + f33.fbeSize <= fbeStructSize {
            fbeValue.f33 = f33.get()
        } else {
            fbeValue.f33 = Date(timeIntervalSince1970: 0)
        }
        fbeCurrentSize += f33.fbeSize

        if fbeCurrentSize + f34.fbeSize <= fbeStructSize {
            fbeValue.f34 = f34.get(defaults: Date(timeIntervalSince1970: 0))
        } else {
            fbeValue.f34 = Date(timeIntervalSince1970: 0)
        }
        fbeCurrentSize += f34.fbeSize

        if fbeCurrentSize + f35.fbeSize <= fbeStructSize {
            fbeValue.f35 = f35.get(defaults: Date())
        } else {
            fbeValue.f35 = Date()
        }
        fbeCurrentSize += f35.fbeSize

        if fbeCurrentSize + f36.fbeSize <= fbeStructSize {
            fbeValue.f36 = f36.get()
        } else {
            fbeValue.f36 = ChronoxorFbe.UUIDGenerator.nil()
        }
        fbeCurrentSize += f36.fbeSize

        if fbeCurrentSize + f37.fbeSize <= fbeStructSize {
            fbeValue.f37 = f37.get(defaults: ChronoxorFbe.UUIDGenerator.sequential())
        } else {
            fbeValue.f37 = ChronoxorFbe.UUIDGenerator.sequential()
        }
        fbeCurrentSize += f37.fbeSize

        if fbeCurrentSize + f38.fbeSize <= fbeStructSize {
            fbeValue.f38 = f38.get(defaults: UUID(uuidString: "123e4567-e89b-12d3-a456-426655440000")!)
        } else {
            fbeValue.f38 = UUID(uuidString: "123e4567-e89b-12d3-a456-426655440000")!
        }
        fbeCurrentSize += f38.fbeSize

        if fbeCurrentSize + f39.fbeSize <= fbeStructSize {
            fbeValue.f39 = f39.get()
        } else {
            fbeValue.f39 = ChronoxorProto.OrderSide()
        }
        fbeCurrentSize += f39.fbeSize

        if fbeCurrentSize + f40.fbeSize <= fbeStructSize {
            fbeValue.f40 = f40.get()
        } else {
            fbeValue.f40 = ChronoxorProto.OrderType()
        }
        fbeCurrentSize += f40.fbeSize

        if fbeCurrentSize + f41.fbeSize <= fbeStructSize {
            fbeValue.f41 = f41.get()
        } else {
            fbeValue.f41 = ChronoxorProto.Order()
        }
        fbeCurrentSize += f41.fbeSize

        if fbeCurrentSize + f42.fbeSize <= fbeStructSize {
            fbeValue.f42 = f42.get()
        } else {
            fbeValue.f42 = ChronoxorProto.Balance()
        }
        fbeCurrentSize += f42.fbeSize

        if fbeCurrentSize + f43.fbeSize <= fbeStructSize {
            fbeValue.f43 = f43.get()
        } else {
            fbeValue.f43 = ChronoxorProto.State()
        }
        fbeCurrentSize += f43.fbeSize

        if fbeCurrentSize + f44.fbeSize <= fbeStructSize {
            fbeValue.f44 = f44.get()
        } else {
            fbeValue.f44 = ChronoxorProto.Account()
        }
        fbeCurrentSize += f44.fbeSize
    }

    // Set the struct value (begin phase)
    func setBegin() throws -> Int {
        if (_buffer.offset + fbeOffset + fbeSize) > _buffer.size {
            assertionFailure("Model is broken!")
            return 0
        }

        let fbeStructSize = fbeBody
        let fbeStructOffset = try _buffer.allocate(size: fbeStructSize) - _buffer.offset
        if (fbeStructOffset <= 0) || ((_buffer.offset + fbeStructOffset + fbeStructSize) > _buffer.size) {
            assertionFailure("Model is broken!")
            return 0
        }

        write(offset: fbeOffset, value: UInt32(fbeStructOffset))
        write(offset: fbeStructOffset, value: UInt32(fbeStructSize))
        write(offset: fbeStructOffset + 4, value: UInt32(fbeType))

        _buffer.shift(offset: fbeStructOffset)
        return fbeStructOffset
    }

    // Set the struct value (end phase)
    public func setEnd(fbeBegin: Int) {
        _buffer.unshift(offset: fbeBegin)
    }

    // Set the struct value
    public func set(value fbeValue: StructSimple) throws {
        let fbeBegin = try setBegin()
        if fbeBegin == 0 {
            return
        }

        try setFields(fbeValue: fbeValue)
        setEnd(fbeBegin: fbeBegin)
    }

    // Set the struct fields values
    public func setFields(fbeValue: StructSimple) throws {
        try id.set(value: fbeValue.id)
        try f1.set(value: fbeValue.f1)
        try f2.set(value: fbeValue.f2)
        try f3.set(value: fbeValue.f3)
        try f4.set(value: fbeValue.f4)
        try f5.set(value: fbeValue.f5)
        try f6.set(value: fbeValue.f6)
        try f7.set(value: fbeValue.f7)
        try f8.set(value: fbeValue.f8)
        try f9.set(value: fbeValue.f9)
        try f10.set(value: fbeValue.f10)
        try f11.set(value: fbeValue.f11)
        try f12.set(value: fbeValue.f12)
        try f13.set(value: fbeValue.f13)
        try f14.set(value: fbeValue.f14)
        try f15.set(value: fbeValue.f15)
        try f16.set(value: fbeValue.f16)
        try f17.set(value: fbeValue.f17)
        try f18.set(value: fbeValue.f18)
        try f19.set(value: fbeValue.f19)
        try f20.set(value: fbeValue.f20)
        try f21.set(value: fbeValue.f21)
        try f22.set(value: fbeValue.f22)
        try f23.set(value: fbeValue.f23)
        try f24.set(value: fbeValue.f24)
        try f25.set(value: fbeValue.f25)
        try f26.set(value: fbeValue.f26)
        try f27.set(value: fbeValue.f27)
        try f28.set(value: fbeValue.f28)
        try f29.set(value: fbeValue.f29)
        try f30.set(value: fbeValue.f30)
        try f31.set(value: fbeValue.f31)
        try f32.set(value: fbeValue.f32)
        try f33.set(value: fbeValue.f33)
        try f34.set(value: fbeValue.f34)
        try f35.set(value: fbeValue.f35)
        try f36.set(value: fbeValue.f36)
        try f37.set(value: fbeValue.f37)
        try f38.set(value: fbeValue.f38)
        try f39.set(value: fbeValue.f39)
        try f40.set(value: fbeValue.f40)
        try f41.set(value: fbeValue.f41)
        try f42.set(value: fbeValue.f42)
        try f43.set(value: fbeValue.f43)
        try f44.set(value: fbeValue.f44)
    }
}
