//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe
import ChronoxorProto

public protocol StructOptionalBase: StructSimpleBase {
    var f100: Bool? { get set }
    var f101: Bool? { get set }
    var f102: Bool? { get set }
    var f103: UInt8? { get set }
    var f104: UInt8? { get set }
    var f105: UInt8? { get set }
    var f106: Character? { get set }
    var f107: Character? { get set }
    var f108: Character? { get set }
    var f109: Character? { get set }
    var f110: Character? { get set }
    var f111: Character? { get set }
    var f112: Int8? { get set }
    var f113: Int8? { get set }
    var f114: Int8? { get set }
    var f115: UInt8? { get set }
    var f116: UInt8? { get set }
    var f117: UInt8? { get set }
    var f118: Int16? { get set }
    var f119: Int16? { get set }
    var f120: Int16? { get set }
    var f121: UInt16? { get set }
    var f122: UInt16? { get set }
    var f123: UInt16? { get set }
    var f124: Int32? { get set }
    var f125: Int32? { get set }
    var f126: Int32? { get set }
    var f127: UInt32? { get set }
    var f128: UInt32? { get set }
    var f129: UInt32? { get set }
    var f130: Int64? { get set }
    var f131: Int64? { get set }
    var f132: Int64? { get set }
    var f133: UInt64? { get set }
    var f134: UInt64? { get set }
    var f135: UInt64? { get set }
    var f136: Float? { get set }
    var f137: Float? { get set }
    var f138: Float? { get set }
    var f139: Double? { get set }
    var f140: Double? { get set }
    var f141: Double? { get set }
    var f142: Decimal? { get set }
    var f143: Decimal? { get set }
    var f144: Decimal? { get set }
    var f145: String? { get set }
    var f146: String? { get set }
    var f147: String? { get set }
    var f148: Date? { get set }
    var f149: Date? { get set }
    var f150: Date? { get set }
    var f151: UUID? { get set }
    var f152: UUID? { get set }
    var f153: UUID? { get set }
    var f154: ChronoxorProto.OrderSide? { get set }
    var f155: ChronoxorProto.OrderSide? { get set }
    var f156: ChronoxorProto.OrderType? { get set }
    var f157: ChronoxorProto.OrderType? { get set }
    var f158: ChronoxorProto.Order? { get set }
    var f159: ChronoxorProto.Order? { get set }
    var f160: ChronoxorProto.Balance? { get set }
    var f161: ChronoxorProto.Balance? { get set }
    var f162: ChronoxorProto.State? { get set }
    var f163: ChronoxorProto.State? { get set }
    var f164: ChronoxorProto.Account? { get set }
    var f165: ChronoxorProto.Account? { get set }
}

public protocol StructOptionalInheritance: StructSimpleInheritance {
    var parent: StructOptional { get set }
}

extension StructOptionalInheritance {
    public var parent: StructSimple {
        get { return parent.parent }
        set { parent.parent = newValue }
    }
    public var f100: Bool? {
        get { return parent.f100 }
        set { parent.f100 = newValue }
    }
    public var f101: Bool? {
        get { return parent.f101 }
        set { parent.f101 = newValue }
    }
    public var f102: Bool? {
        get { return parent.f102 }
        set { parent.f102 = newValue }
    }
    public var f103: UInt8? {
        get { return parent.f103 }
        set { parent.f103 = newValue }
    }
    public var f104: UInt8? {
        get { return parent.f104 }
        set { parent.f104 = newValue }
    }
    public var f105: UInt8? {
        get { return parent.f105 }
        set { parent.f105 = newValue }
    }
    public var f106: Character? {
        get { return parent.f106 }
        set { parent.f106 = newValue }
    }
    public var f107: Character? {
        get { return parent.f107 }
        set { parent.f107 = newValue }
    }
    public var f108: Character? {
        get { return parent.f108 }
        set { parent.f108 = newValue }
    }
    public var f109: Character? {
        get { return parent.f109 }
        set { parent.f109 = newValue }
    }
    public var f110: Character? {
        get { return parent.f110 }
        set { parent.f110 = newValue }
    }
    public var f111: Character? {
        get { return parent.f111 }
        set { parent.f111 = newValue }
    }
    public var f112: Int8? {
        get { return parent.f112 }
        set { parent.f112 = newValue }
    }
    public var f113: Int8? {
        get { return parent.f113 }
        set { parent.f113 = newValue }
    }
    public var f114: Int8? {
        get { return parent.f114 }
        set { parent.f114 = newValue }
    }
    public var f115: UInt8? {
        get { return parent.f115 }
        set { parent.f115 = newValue }
    }
    public var f116: UInt8? {
        get { return parent.f116 }
        set { parent.f116 = newValue }
    }
    public var f117: UInt8? {
        get { return parent.f117 }
        set { parent.f117 = newValue }
    }
    public var f118: Int16? {
        get { return parent.f118 }
        set { parent.f118 = newValue }
    }
    public var f119: Int16? {
        get { return parent.f119 }
        set { parent.f119 = newValue }
    }
    public var f120: Int16? {
        get { return parent.f120 }
        set { parent.f120 = newValue }
    }
    public var f121: UInt16? {
        get { return parent.f121 }
        set { parent.f121 = newValue }
    }
    public var f122: UInt16? {
        get { return parent.f122 }
        set { parent.f122 = newValue }
    }
    public var f123: UInt16? {
        get { return parent.f123 }
        set { parent.f123 = newValue }
    }
    public var f124: Int32? {
        get { return parent.f124 }
        set { parent.f124 = newValue }
    }
    public var f125: Int32? {
        get { return parent.f125 }
        set { parent.f125 = newValue }
    }
    public var f126: Int32? {
        get { return parent.f126 }
        set { parent.f126 = newValue }
    }
    public var f127: UInt32? {
        get { return parent.f127 }
        set { parent.f127 = newValue }
    }
    public var f128: UInt32? {
        get { return parent.f128 }
        set { parent.f128 = newValue }
    }
    public var f129: UInt32? {
        get { return parent.f129 }
        set { parent.f129 = newValue }
    }
    public var f130: Int64? {
        get { return parent.f130 }
        set { parent.f130 = newValue }
    }
    public var f131: Int64? {
        get { return parent.f131 }
        set { parent.f131 = newValue }
    }
    public var f132: Int64? {
        get { return parent.f132 }
        set { parent.f132 = newValue }
    }
    public var f133: UInt64? {
        get { return parent.f133 }
        set { parent.f133 = newValue }
    }
    public var f134: UInt64? {
        get { return parent.f134 }
        set { parent.f134 = newValue }
    }
    public var f135: UInt64? {
        get { return parent.f135 }
        set { parent.f135 = newValue }
    }
    public var f136: Float? {
        get { return parent.f136 }
        set { parent.f136 = newValue }
    }
    public var f137: Float? {
        get { return parent.f137 }
        set { parent.f137 = newValue }
    }
    public var f138: Float? {
        get { return parent.f138 }
        set { parent.f138 = newValue }
    }
    public var f139: Double? {
        get { return parent.f139 }
        set { parent.f139 = newValue }
    }
    public var f140: Double? {
        get { return parent.f140 }
        set { parent.f140 = newValue }
    }
    public var f141: Double? {
        get { return parent.f141 }
        set { parent.f141 = newValue }
    }
    public var f142: Decimal? {
        get { return parent.f142 }
        set { parent.f142 = newValue }
    }
    public var f143: Decimal? {
        get { return parent.f143 }
        set { parent.f143 = newValue }
    }
    public var f144: Decimal? {
        get { return parent.f144 }
        set { parent.f144 = newValue }
    }
    public var f145: String? {
        get { return parent.f145 }
        set { parent.f145 = newValue }
    }
    public var f146: String? {
        get { return parent.f146 }
        set { parent.f146 = newValue }
    }
    public var f147: String? {
        get { return parent.f147 }
        set { parent.f147 = newValue }
    }
    public var f148: Date? {
        get { return parent.f148 }
        set { parent.f148 = newValue }
    }
    public var f149: Date? {
        get { return parent.f149 }
        set { parent.f149 = newValue }
    }
    public var f150: Date? {
        get { return parent.f150 }
        set { parent.f150 = newValue }
    }
    public var f151: UUID? {
        get { return parent.f151 }
        set { parent.f151 = newValue }
    }
    public var f152: UUID? {
        get { return parent.f152 }
        set { parent.f152 = newValue }
    }
    public var f153: UUID? {
        get { return parent.f153 }
        set { parent.f153 = newValue }
    }
    public var f154: ChronoxorProto.OrderSide? {
        get { return parent.f154 }
        set { parent.f154 = newValue }
    }
    public var f155: ChronoxorProto.OrderSide? {
        get { return parent.f155 }
        set { parent.f155 = newValue }
    }
    public var f156: ChronoxorProto.OrderType? {
        get { return parent.f156 }
        set { parent.f156 = newValue }
    }
    public var f157: ChronoxorProto.OrderType? {
        get { return parent.f157 }
        set { parent.f157 = newValue }
    }
    public var f158: ChronoxorProto.Order? {
        get { return parent.f158 }
        set { parent.f158 = newValue }
    }
    public var f159: ChronoxorProto.Order? {
        get { return parent.f159 }
        set { parent.f159 = newValue }
    }
    public var f160: ChronoxorProto.Balance? {
        get { return parent.f160 }
        set { parent.f160 = newValue }
    }
    public var f161: ChronoxorProto.Balance? {
        get { return parent.f161 }
        set { parent.f161 = newValue }
    }
    public var f162: ChronoxorProto.State? {
        get { return parent.f162 }
        set { parent.f162 = newValue }
    }
    public var f163: ChronoxorProto.State? {
        get { return parent.f163 }
        set { parent.f163 = newValue }
    }
    public var f164: ChronoxorProto.Account? {
        get { return parent.f164 }
        set { parent.f164 = newValue }
    }
    public var f165: ChronoxorProto.Account? {
        get { return parent.f165 }
        set { parent.f165 = newValue }
    }
}

public struct StructOptional: StructOptionalBase, StructSimpleInheritance, Comparable, Hashable, Codable {
    public var parent: StructSimple
    public var f100: Bool? = nil
    public var f101: Bool? = true
    public var f102: Bool? = nil
    public var f103: UInt8? = nil
    public var f104: UInt8? = 0xFF
    public var f105: UInt8? = nil
    public var f106: Character? = nil
    public var f107: Character? = "!"
    public var f108: Character? = nil
    public var f109: Character? = nil
    public var f110: Character? = Character(UnicodeScalar(0x0444)!)
    public var f111: Character? = nil
    public var f112: Int8? = nil
    public var f113: Int8? = Int8.max
    public var f114: Int8? = nil
    public var f115: UInt8? = nil
    public var f116: UInt8? = UInt8.max
    public var f117: UInt8? = nil
    public var f118: Int16? = nil
    public var f119: Int16? = Int16.max
    public var f120: Int16? = nil
    public var f121: UInt16? = nil
    public var f122: UInt16? = UInt16.max
    public var f123: UInt16? = nil
    public var f124: Int32? = nil
    public var f125: Int32? = Int32.max
    public var f126: Int32? = nil
    public var f127: UInt32? = nil
    public var f128: UInt32? = UInt32.max
    public var f129: UInt32? = nil
    public var f130: Int64? = nil
    public var f131: Int64? = Int64.max
    public var f132: Int64? = nil
    public var f133: UInt64? = nil
    public var f134: UInt64? = UInt64.max
    public var f135: UInt64? = nil
    public var f136: Float? = nil
    public var f137: Float? = 123.456
    public var f138: Float? = nil
    public var f139: Double? = nil
    public var f140: Double? = -123.456e+123
    public var f141: Double? = nil
    public var f142: Decimal? = nil
    public var f143: Decimal? = Decimal(string: "123456.123456")!
    public var f144: Decimal? = nil
    public var f145: String? = nil
    public var f146: String? = "Initial string!"
    public var f147: String? = nil
    public var f148: Date? = nil
    public var f149: Date? = Date()
    public var f150: Date? = nil
    public var f151: UUID? = nil
    public var f152: UUID? = UUID(uuidString: "123e4567-e89b-12d3-a456-426655440000")!
    public var f153: UUID? = nil
    public var f154: ChronoxorProto.OrderSide? = nil
    public var f155: ChronoxorProto.OrderSide? = nil
    public var f156: ChronoxorProto.OrderType? = nil
    public var f157: ChronoxorProto.OrderType? = nil
    public var f158: ChronoxorProto.Order? = nil
    public var f159: ChronoxorProto.Order? = nil
    public var f160: ChronoxorProto.Balance? = nil
    public var f161: ChronoxorProto.Balance? = nil
    public var f162: ChronoxorProto.State? = nil
    public var f163: ChronoxorProto.State? = nil
    public var f164: ChronoxorProto.Account? = nil
    public var f165: ChronoxorProto.Account? = nil

    public init() { parent = StructSimple() }
    public init(parent: StructSimple, f100: Bool?, f101: Bool?, f102: Bool?, f103: UInt8?, f104: UInt8?, f105: UInt8?, f106: Character?, f107: Character?, f108: Character?, f109: Character?, f110: Character?, f111: Character?, f112: Int8?, f113: Int8?, f114: Int8?, f115: UInt8?, f116: UInt8?, f117: UInt8?, f118: Int16?, f119: Int16?, f120: Int16?, f121: UInt16?, f122: UInt16?, f123: UInt16?, f124: Int32?, f125: Int32?, f126: Int32?, f127: UInt32?, f128: UInt32?, f129: UInt32?, f130: Int64?, f131: Int64?, f132: Int64?, f133: UInt64?, f134: UInt64?, f135: UInt64?, f136: Float?, f137: Float?, f138: Float?, f139: Double?, f140: Double?, f141: Double?, f142: Decimal?, f143: Decimal?, f144: Decimal?, f145: String?, f146: String?, f147: String?, f148: Date?, f149: Date?, f150: Date?, f151: UUID?, f152: UUID?, f153: UUID?, f154: ChronoxorProto.OrderSide?, f155: ChronoxorProto.OrderSide?, f156: ChronoxorProto.OrderType?, f157: ChronoxorProto.OrderType?, f158: ChronoxorProto.Order?, f159: ChronoxorProto.Order?, f160: ChronoxorProto.Balance?, f161: ChronoxorProto.Balance?, f162: ChronoxorProto.State?, f163: ChronoxorProto.State?, f164: ChronoxorProto.Account?, f165: ChronoxorProto.Account?) {
        self.parent = parent

        self.f100 = f100
        self.f101 = f101
        self.f102 = f102
        self.f103 = f103
        self.f104 = f104
        self.f105 = f105
        self.f106 = f106
        self.f107 = f107
        self.f108 = f108
        self.f109 = f109
        self.f110 = f110
        self.f111 = f111
        self.f112 = f112
        self.f113 = f113
        self.f114 = f114
        self.f115 = f115
        self.f116 = f116
        self.f117 = f117
        self.f118 = f118
        self.f119 = f119
        self.f120 = f120
        self.f121 = f121
        self.f122 = f122
        self.f123 = f123
        self.f124 = f124
        self.f125 = f125
        self.f126 = f126
        self.f127 = f127
        self.f128 = f128
        self.f129 = f129
        self.f130 = f130
        self.f131 = f131
        self.f132 = f132
        self.f133 = f133
        self.f134 = f134
        self.f135 = f135
        self.f136 = f136
        self.f137 = f137
        self.f138 = f138
        self.f139 = f139
        self.f140 = f140
        self.f141 = f141
        self.f142 = f142
        self.f143 = f143
        self.f144 = f144
        self.f145 = f145
        self.f146 = f146
        self.f147 = f147
        self.f148 = f148
        self.f149 = f149
        self.f150 = f150
        self.f151 = f151
        self.f152 = f152
        self.f153 = f153
        self.f154 = f154
        self.f155 = f155
        self.f156 = f156
        self.f157 = f157
        self.f158 = f158
        self.f159 = f159
        self.f160 = f160
        self.f161 = f161
        self.f162 = f162
        self.f163 = f163
        self.f164 = f164
        self.f165 = f165
    }

    public init(other: StructOptional) {
        parent = other.parent
        self.f100 = other.f100
        self.f101 = other.f101
        self.f102 = other.f102
        self.f103 = other.f103
        self.f104 = other.f104
        self.f105 = other.f105
        self.f106 = other.f106
        self.f107 = other.f107
        self.f108 = other.f108
        self.f109 = other.f109
        self.f110 = other.f110
        self.f111 = other.f111
        self.f112 = other.f112
        self.f113 = other.f113
        self.f114 = other.f114
        self.f115 = other.f115
        self.f116 = other.f116
        self.f117 = other.f117
        self.f118 = other.f118
        self.f119 = other.f119
        self.f120 = other.f120
        self.f121 = other.f121
        self.f122 = other.f122
        self.f123 = other.f123
        self.f124 = other.f124
        self.f125 = other.f125
        self.f126 = other.f126
        self.f127 = other.f127
        self.f128 = other.f128
        self.f129 = other.f129
        self.f130 = other.f130
        self.f131 = other.f131
        self.f132 = other.f132
        self.f133 = other.f133
        self.f134 = other.f134
        self.f135 = other.f135
        self.f136 = other.f136
        self.f137 = other.f137
        self.f138 = other.f138
        self.f139 = other.f139
        self.f140 = other.f140
        self.f141 = other.f141
        self.f142 = other.f142
        self.f143 = other.f143
        self.f144 = other.f144
        self.f145 = other.f145
        self.f146 = other.f146
        self.f147 = other.f147
        self.f148 = other.f148
        self.f149 = other.f149
        self.f150 = other.f150
        self.f151 = other.f151
        self.f152 = other.f152
        self.f153 = other.f153
        self.f154 = other.f154
        self.f155 = other.f155
        self.f156 = other.f156
        self.f157 = other.f157
        self.f158 = other.f158
        self.f159 = other.f159
        self.f160 = other.f160
        self.f161 = other.f161
        self.f162 = other.f162
        self.f163 = other.f163
        self.f164 = other.f164
        self.f165 = other.f165
    }

    public init(from decoder: Decoder) throws {
        parent = try StructSimple(from: decoder)
        let container = try decoder.container(keyedBy: CodingKeys.self)
        f100 = try container.decode(Bool?.self, forKey: .f100)
        f101 = try container.decode(Bool?.self, forKey: .f101)
        f102 = try container.decode(Bool?.self, forKey: .f102)
        f103 = try container.decode(UInt8?.self, forKey: .f103)
        f104 = try container.decode(UInt8?.self, forKey: .f104)
        f105 = try container.decode(UInt8?.self, forKey: .f105)
        let f106RawValue: UInt8? = try container.decode(UInt8?.self, forKey: .f106)
        f106 = f106RawValue != nil ? Character(UnicodeScalar(f106RawValue!)) : nil
        let f107RawValue: UInt8? = try container.decode(UInt8?.self, forKey: .f107)
        f107 = f107RawValue != nil ? Character(UnicodeScalar(f107RawValue!)) : nil
        let f108RawValue: UInt8? = try container.decode(UInt8?.self, forKey: .f108)
        f108 = f108RawValue != nil ? Character(UnicodeScalar(f108RawValue!)) : nil
        let f109RawValue: UInt32? = try container.decode(UInt32?.self, forKey: .f109)
        f109 = f109RawValue != nil ? Character(UnicodeScalar(f109RawValue!)!) : nil
        let f110RawValue: UInt32? = try container.decode(UInt32?.self, forKey: .f110)
        f110 = f110RawValue != nil ? Character(UnicodeScalar(f110RawValue!)!) : nil
        let f111RawValue: UInt32? = try container.decode(UInt32?.self, forKey: .f111)
        f111 = f111RawValue != nil ? Character(UnicodeScalar(f111RawValue!)!) : nil
        f112 = try container.decode(Int8?.self, forKey: .f112)
        f113 = try container.decode(Int8?.self, forKey: .f113)
        f114 = try container.decode(Int8?.self, forKey: .f114)
        f115 = try container.decode(UInt8?.self, forKey: .f115)
        f116 = try container.decode(UInt8?.self, forKey: .f116)
        f117 = try container.decode(UInt8?.self, forKey: .f117)
        f118 = try container.decode(Int16?.self, forKey: .f118)
        f119 = try container.decode(Int16?.self, forKey: .f119)
        f120 = try container.decode(Int16?.self, forKey: .f120)
        f121 = try container.decode(UInt16?.self, forKey: .f121)
        f122 = try container.decode(UInt16?.self, forKey: .f122)
        f123 = try container.decode(UInt16?.self, forKey: .f123)
        f124 = try container.decode(Int32?.self, forKey: .f124)
        f125 = try container.decode(Int32?.self, forKey: .f125)
        f126 = try container.decode(Int32?.self, forKey: .f126)
        f127 = try container.decode(UInt32?.self, forKey: .f127)
        f128 = try container.decode(UInt32?.self, forKey: .f128)
        f129 = try container.decode(UInt32?.self, forKey: .f129)
        f130 = try container.decode(Int64?.self, forKey: .f130)
        f131 = try container.decode(Int64?.self, forKey: .f131)
        f132 = try container.decode(Int64?.self, forKey: .f132)
        f133 = try container.decode(UInt64?.self, forKey: .f133)
        f134 = try container.decode(UInt64?.self, forKey: .f134)
        f135 = try container.decode(UInt64?.self, forKey: .f135)
        f136 = try container.decode(Float?.self, forKey: .f136)
        f137 = try container.decode(Float?.self, forKey: .f137)
        f138 = try container.decode(Float?.self, forKey: .f138)
        f139 = try container.decode(Double?.self, forKey: .f139)
        f140 = try container.decode(Double?.self, forKey: .f140)
        f141 = try container.decode(Double?.self, forKey: .f141)
        let f142RawValue = try container.decode(String?.self, forKey: .f142)
        f142 = f142RawValue != nil ? Decimal(string: f142RawValue!) ?? .nan : nil
        let f143RawValue = try container.decode(String?.self, forKey: .f143)
        f143 = f143RawValue != nil ? Decimal(string: f143RawValue!) ?? .nan : nil
        let f144RawValue = try container.decode(String?.self, forKey: .f144)
        f144 = f144RawValue != nil ? Decimal(string: f144RawValue!) ?? .nan : nil
        f145 = try container.decode(String?.self, forKey: .f145)
        f146 = try container.decode(String?.self, forKey: .f146)
        f147 = try container.decode(String?.self, forKey: .f147)
        let f148RawValue = try container.decode(TimeInterval?.self, forKey: .f148)
        f148 = f148RawValue != nil ? Date(timeIntervalSince1970: f148RawValue! / 1_000_000_000) : nil
        let f149RawValue = try container.decode(TimeInterval?.self, forKey: .f149)
        f149 = f149RawValue != nil ? Date(timeIntervalSince1970: f149RawValue! / 1_000_000_000) : nil
        let f150RawValue = try container.decode(TimeInterval?.self, forKey: .f150)
        f150 = f150RawValue != nil ? Date(timeIntervalSince1970: f150RawValue! / 1_000_000_000) : nil
        f151 = try container.decode(UUID?.self, forKey: .f151)
        f152 = try container.decode(UUID?.self, forKey: .f152)
        f153 = try container.decode(UUID?.self, forKey: .f153)
        f154 = try container.decode(ChronoxorProto.OrderSide?.self, forKey: .f154)
        f155 = try container.decode(ChronoxorProto.OrderSide?.self, forKey: .f155)
        f156 = try container.decode(ChronoxorProto.OrderType?.self, forKey: .f156)
        f157 = try container.decode(ChronoxorProto.OrderType?.self, forKey: .f157)
        f158 = try container.decode(ChronoxorProto.Order?.self, forKey: .f158)
        f159 = try container.decode(ChronoxorProto.Order?.self, forKey: .f159)
        f160 = try container.decode(ChronoxorProto.Balance?.self, forKey: .f160)
        f161 = try container.decode(ChronoxorProto.Balance?.self, forKey: .f161)
        f162 = try container.decode(ChronoxorProto.State?.self, forKey: .f162)
        f163 = try container.decode(ChronoxorProto.State?.self, forKey: .f163)
        f164 = try container.decode(ChronoxorProto.Account?.self, forKey: .f164)
        f165 = try container.decode(ChronoxorProto.Account?.self, forKey: .f165)
    }

    public func clone() throws -> StructOptional {
        // Serialize the struct to the FBE stream
        let writer = StructOptionalModel()
        try _ = writer.serialize(value: self)

        // Deserialize the struct from the FBE stream
        let reader = StructOptionalModel()
        reader.attach(buffer: writer.buffer)
        return reader.deserialize()
    }

    public static func < (lhs: StructOptional, rhs: StructOptional) -> Bool {
        return true
    }

    public static func == (lhs: StructOptional, rhs: StructOptional) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
        parent.hash(into: &hasher)
    }

    public var description: String {
        var sb = String()
        sb.append("StructOptional(")
        sb.append(parent.description)
        sb.append(",f100=");  if let f100 = f100 { sb.append(f100 ? "true" : "false") } else { sb.append("null") }
        sb.append(",f101=");  if let f101 = f101 { sb.append(f101 ? "true" : "false") } else { sb.append("null") }
        sb.append(",f102=");  if let f102 = f102 { sb.append(f102 ? "true" : "false") } else { sb.append("null") }
        sb.append(",f103=");  if let f103 = f103 { sb.append(f103.description) } else { sb.append("null") }
        sb.append(",f104=");  if let f104 = f104 { sb.append(f104.description) } else { sb.append("null") }
        sb.append(",f105=");  if let f105 = f105 { sb.append(f105.description) } else { sb.append("null") }
        sb.append(",f106=");  if let f106 = f106 { sb.append("'"); sb.append(f106); sb.append("'") } else { sb.append("null") }
        sb.append(",f107=");  if let f107 = f107 { sb.append("'"); sb.append(f107); sb.append("'") } else { sb.append("null") }
        sb.append(",f108=");  if let f108 = f108 { sb.append("'"); sb.append(f108); sb.append("'") } else { sb.append("null") }
        sb.append(",f109=");  if let f109 = f109 { sb.append("'"); sb.append(f109); sb.append("'") } else { sb.append("null") }
        sb.append(",f110=");  if let f110 = f110 { sb.append("'"); sb.append(f110); sb.append("'") } else { sb.append("null") }
        sb.append(",f111=");  if let f111 = f111 { sb.append("'"); sb.append(f111); sb.append("'") } else { sb.append("null") }
        sb.append(",f112=");  if let f112 = f112 { sb.append(f112.description) } else { sb.append("null") }
        sb.append(",f113=");  if let f113 = f113 { sb.append(f113.description) } else { sb.append("null") }
        sb.append(",f114=");  if let f114 = f114 { sb.append(f114.description) } else { sb.append("null") }
        sb.append(",f115=");  if let f115 = f115 { sb.append(f115.description) } else { sb.append("null") }
        sb.append(",f116=");  if let f116 = f116 { sb.append(f116.description) } else { sb.append("null") }
        sb.append(",f117=");  if let f117 = f117 { sb.append(f117.description) } else { sb.append("null") }
        sb.append(",f118=");  if let f118 = f118 { sb.append(f118.description) } else { sb.append("null") }
        sb.append(",f119=");  if let f119 = f119 { sb.append(f119.description) } else { sb.append("null") }
        sb.append(",f120=");  if let f120 = f120 { sb.append(f120.description) } else { sb.append("null") }
        sb.append(",f121=");  if let f121 = f121 { sb.append(f121.description) } else { sb.append("null") }
        sb.append(",f122=");  if let f122 = f122 { sb.append(f122.description) } else { sb.append("null") }
        sb.append(",f123=");  if let f123 = f123 { sb.append(f123.description) } else { sb.append("null") }
        sb.append(",f124=");  if let f124 = f124 { sb.append(f124.description) } else { sb.append("null") }
        sb.append(",f125=");  if let f125 = f125 { sb.append(f125.description) } else { sb.append("null") }
        sb.append(",f126=");  if let f126 = f126 { sb.append(f126.description) } else { sb.append("null") }
        sb.append(",f127=");  if let f127 = f127 { sb.append(f127.description) } else { sb.append("null") }
        sb.append(",f128=");  if let f128 = f128 { sb.append(f128.description) } else { sb.append("null") }
        sb.append(",f129=");  if let f129 = f129 { sb.append(f129.description) } else { sb.append("null") }
        sb.append(",f130=");  if let f130 = f130 { sb.append(f130.description) } else { sb.append("null") }
        sb.append(",f131=");  if let f131 = f131 { sb.append(f131.description) } else { sb.append("null") }
        sb.append(",f132=");  if let f132 = f132 { sb.append(f132.description) } else { sb.append("null") }
        sb.append(",f133=");  if let f133 = f133 { sb.append(f133.description) } else { sb.append("null") }
        sb.append(",f134=");  if let f134 = f134 { sb.append(f134.description) } else { sb.append("null") }
        sb.append(",f135=");  if let f135 = f135 { sb.append(f135.description) } else { sb.append("null") }
        sb.append(",f136=");  if let f136 = f136 { sb.append(f136.description) } else { sb.append("null") }
        sb.append(",f137=");  if let f137 = f137 { sb.append(f137.description) } else { sb.append("null") }
        sb.append(",f138=");  if let f138 = f138 { sb.append(f138.description) } else { sb.append("null") }
        sb.append(",f139=");  if let f139 = f139 { sb.append(f139.description) } else { sb.append("null") }
        sb.append(",f140=");  if let f140 = f140 { sb.append(f140.description) } else { sb.append("null") }
        sb.append(",f141=");  if let f141 = f141 { sb.append(f141.description) } else { sb.append("null") }
        sb.append(",f142=");  if let f142 = f142 { sb.append(f142.description) } else { sb.append("null") }
        sb.append(",f143=");  if let f143 = f143 { sb.append(f143.description) } else { sb.append("null") }
        sb.append(",f144=");  if let f144 = f144 { sb.append(f144.description) } else { sb.append("null") }
        sb.append(",f145=");  if let f145 = f145 { sb.append("\""); sb.append(f145); sb.append("\"") } else { sb.append("null") }
        sb.append(",f146=");  if let f146 = f146 { sb.append("\""); sb.append(f146); sb.append("\"") } else { sb.append("null") }
        sb.append(",f147=");  if let f147 = f147 { sb.append("\""); sb.append(f147); sb.append("\"") } else { sb.append("null") }
        sb.append(",f148=");  if let f148 = f148 { sb.append("\(floor(f148.timeIntervalSince1970 * 1000) * 1_000_000)") } else { sb.append("null") }
        sb.append(",f149=");  if let f149 = f149 { sb.append("\(floor(f149.timeIntervalSince1970 * 1000) * 1_000_000)") } else { sb.append("null") }
        sb.append(",f150=");  if let f150 = f150 { sb.append("\(floor(f150.timeIntervalSince1970 * 1000) * 1_000_000)") } else { sb.append("null") }
        sb.append(",f151=");  if let f151 = f151 { sb.append("\""); sb.append(f151.uuidString); sb.append("\"") } else { sb.append("null") }
        sb.append(",f152=");  if let f152 = f152 { sb.append("\""); sb.append(f152.uuidString); sb.append("\"") } else { sb.append("null") }
        sb.append(",f153=");  if let f153 = f153 { sb.append("\""); sb.append(f153.uuidString); sb.append("\"") } else { sb.append("null") }
        sb.append(",f154=");  if let f154 = f154 { sb.append(f154.description) } else { sb.append("null") }
        sb.append(",f155=");  if let f155 = f155 { sb.append(f155.description) } else { sb.append("null") }
        sb.append(",f156=");  if let f156 = f156 { sb.append(f156.description) } else { sb.append("null") }
        sb.append(",f157=");  if let f157 = f157 { sb.append(f157.description) } else { sb.append("null") }
        sb.append(",f158=");  if let f158 = f158 { sb.append(f158.description) } else { sb.append("null") }
        sb.append(",f159=");  if let f159 = f159 { sb.append(f159.description) } else { sb.append("null") }
        sb.append(",f160=");  if let f160 = f160 { sb.append(f160.description) } else { sb.append("null") }
        sb.append(",f161=");  if let f161 = f161 { sb.append(f161.description) } else { sb.append("null") }
        sb.append(",f162=");  if let f162 = f162 { sb.append(f162.description) } else { sb.append("null") }
        sb.append(",f163=");  if let f163 = f163 { sb.append(f163.description) } else { sb.append("null") }
        sb.append(",f164=");  if let f164 = f164 { sb.append(f164.description) } else { sb.append("null") }
        sb.append(",f165=");  if let f165 = f165 { sb.append(f165.description) } else { sb.append("null") }
        sb.append(")")
        return sb
    }
    private enum CodingKeys: String, CodingKey {
        case f100
        case f101
        case f102
        case f103
        case f104
        case f105
        case f106
        case f107
        case f108
        case f109
        case f110
        case f111
        case f112
        case f113
        case f114
        case f115
        case f116
        case f117
        case f118
        case f119
        case f120
        case f121
        case f122
        case f123
        case f124
        case f125
        case f126
        case f127
        case f128
        case f129
        case f130
        case f131
        case f132
        case f133
        case f134
        case f135
        case f136
        case f137
        case f138
        case f139
        case f140
        case f141
        case f142
        case f143
        case f144
        case f145
        case f146
        case f147
        case f148
        case f149
        case f150
        case f151
        case f152
        case f153
        case f154
        case f155
        case f156
        case f157
        case f158
        case f159
        case f160
        case f161
        case f162
        case f163
        case f164
        case f165
    }

    public func encode(to encoder: Encoder) throws {
        try parent.encode(to: encoder)
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(f100, forKey: .f100)
        try container.encode(f101, forKey: .f101)
        try container.encode(f102, forKey: .f102)
        try container.encode(f103, forKey: .f103)
        try container.encode(f104, forKey: .f104)
        try container.encode(f105, forKey: .f105)
        try container.encode(f106?.utf8.map { UInt8($0) }[0], forKey: .f106)
        try container.encode(f107?.utf8.map { UInt8($0) }[0], forKey: .f107)
        try container.encode(f108?.utf8.map { UInt8($0) }[0], forKey: .f108)
        try container.encode(f109?.utf16.map { UInt32($0) }[0], forKey: .f109)
        try container.encode(f110?.utf16.map { UInt32($0) }[0], forKey: .f110)
        try container.encode(f111?.utf16.map { UInt32($0) }[0], forKey: .f111)
        try container.encode(f112, forKey: .f112)
        try container.encode(f113, forKey: .f113)
        try container.encode(f114, forKey: .f114)
        try container.encode(f115, forKey: .f115)
        try container.encode(f116, forKey: .f116)
        try container.encode(f117, forKey: .f117)
        try container.encode(f118, forKey: .f118)
        try container.encode(f119, forKey: .f119)
        try container.encode(f120, forKey: .f120)
        try container.encode(f121, forKey: .f121)
        try container.encode(f122, forKey: .f122)
        try container.encode(f123, forKey: .f123)
        try container.encode(f124, forKey: .f124)
        try container.encode(f125, forKey: .f125)
        try container.encode(f126, forKey: .f126)
        try container.encode(f127, forKey: .f127)
        try container.encode(f128, forKey: .f128)
        try container.encode(f129, forKey: .f129)
        try container.encode(f130, forKey: .f130)
        try container.encode(f131, forKey: .f131)
        try container.encode(f132, forKey: .f132)
        try container.encode(f133, forKey: .f133)
        try container.encode(f134, forKey: .f134)
        try container.encode(f135, forKey: .f135)
        try container.encode(f136, forKey: .f136)
        try container.encode(f137, forKey: .f137)
        try container.encode(f138, forKey: .f138)
        try container.encode(f139, forKey: .f139)
        try container.encode(f140, forKey: .f140)
        try container.encode(f141, forKey: .f141)
        try container.encode(f142?.description, forKey: .f142)
        try container.encode(f143?.description, forKey: .f143)
        try container.encode(f144?.description, forKey: .f144)
        try container.encode(f145, forKey: .f145)
        try container.encode(f146, forKey: .f146)
        try container.encode(f147, forKey: .f147)
        try container.encode(f148 != nil ? floor(f148!.timeIntervalSince1970 * 1000) * 1_000_000 : nil, forKey: .f148)
        try container.encode(f149 != nil ? floor(f149!.timeIntervalSince1970 * 1000) * 1_000_000 : nil, forKey: .f149)
        try container.encode(f150 != nil ? floor(f150!.timeIntervalSince1970 * 1000) * 1_000_000 : nil, forKey: .f150)
        try container.encode(f151, forKey: .f151)
        try container.encode(f152, forKey: .f152)
        try container.encode(f153, forKey: .f153)
        try container.encode(f154, forKey: .f154)
        try container.encode(f155, forKey: .f155)
        try container.encode(f156, forKey: .f156)
        try container.encode(f157, forKey: .f157)
        try container.encode(f158, forKey: .f158)
        try container.encode(f159, forKey: .f159)
        try container.encode(f160, forKey: .f160)
        try container.encode(f161, forKey: .f161)
        try container.encode(f162, forKey: .f162)
        try container.encode(f163, forKey: .f163)
        try container.encode(f164, forKey: .f164)
        try container.encode(f165, forKey: .f165)
    }

    public func toJson() throws -> String {
        return String(data: try JSONEncoder().encode(self), encoding: .utf8)!
    }

    public static func fromJson(_ json: String) throws -> StructOptional {
        return try JSONDecoder().decode(StructOptional.self, from: json.data(using: .utf8)!)
    }
}
