//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation
import ChronoxorFbe
import ChronoxorProto

public protocol BalanceBase: ChronoxorProto.BalanceBase {
    var locked: Double { get set }
}

public protocol BalanceInheritance: ChronoxorProto.BalanceInheritance {
    var parent: Balance { get set }
}

extension BalanceInheritance {
    public var parent: ChronoxorProto.Balance {
        get { return parent.parent }
        set { parent.parent = newValue }
    }
    public var locked: Double {
        get { return parent.locked }
        set { parent.locked = newValue }
    }
}

public struct Balance: BalanceBase, ChronoxorProto.BalanceInheritance, Comparable, Hashable, Codable {
    public var parent: ChronoxorProto.Balance
    public var locked: Double = 0.0

    public init() { parent = ChronoxorProto.Balance() }
    public init(parent: ChronoxorProto.Balance, locked: Double) {
        self.parent = parent

        self.locked = locked
    }

    public init(other: Balance) {
        parent = other.parent
        self.locked = other.locked
    }

    public init(from decoder: Decoder) throws {
        parent = try ChronoxorProto.Balance(from: decoder)
        let container = try decoder.container(keyedBy: CodingKeys.self)
        locked = try container.decode(Double.self, forKey: .locked)
    }

    public func clone() throws -> Balance {
        // Serialize the struct to the FBE stream
        let writer = BalanceModel()
        try _ = writer.serialize(value: self)

        // Deserialize the struct from the FBE stream
        let reader = BalanceModel()
        reader.attach(buffer: writer.buffer)
        return reader.deserialize()
    }

    public static func < (lhs: Balance, rhs: Balance) -> Bool {
        return true
    }

    public static func == (lhs: Balance, rhs: Balance) -> Bool {
        return true
    }

    public func hash(into hasher: inout Hasher) {
        parent.hash(into: &hasher)
    }

    public var description: String {
        var sb = String()
        sb.append("Balance(")
        sb.append(parent.description)
        sb.append(",locked="); sb.append(locked.description)
        sb.append(")")
        return sb
    }
    private enum CodingKeys: String, CodingKey {
        case locked
    }

    public func encode(to encoder: Encoder) throws {
        try parent.encode(to: encoder)
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(locked, forKey: .locked)
    }

    public func toJson() throws -> String {
        return String(data: try JSONEncoder().encode(self), encoding: .utf8)!
    }

    public static func fromJson(_ json: String) throws -> Balance {
        return try JSONDecoder().decode(Balance.self, from: json.data(using: .utf8)!)
    }
}
