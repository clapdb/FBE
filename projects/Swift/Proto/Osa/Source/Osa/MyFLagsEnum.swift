//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation

public enum MyFLagsEnum {
    typealias RawValue = Int32
    case flag0
    case flag1
    case flag2

    var rawValue: RawValue {
        switch self {
        case .flag0: return 0x00 + 0
        case .flag1: return 0x01 + 0
        case .flag2: return 0x02 + 0
        }
    }

    init(value: Int8) { self = MyFLagsEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: Int16) { self = MyFLagsEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: Int32) { self = MyFLagsEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: Int64) { self = MyFLagsEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: MyFLagsEnum) { self = MyFLagsEnum(rawValue: value.rawValue) }
    init(rawValue: Int32) { self = Self.mapValue(value: rawValue)! }

    var description: String {
        switch self {
        case .flag0: return "flag0"
        case .flag1: return "flag1"
        case .flag2: return "flag2"
        }
    }

    static let rawValuesMap: [RawValue: MyFLagsEnum] = {
        var value = [RawValue: MyFLagsEnum]()
        value[MyFLagsEnum.flag0.rawValue] = .flag0
        value[MyFLagsEnum.flag1.rawValue] = .flag1
        value[MyFLagsEnum.flag2.rawValue] = .flag2
        return value
    }()

    static func mapValue(value: Int32) -> MyFLagsEnum? {
        return rawValuesMap[value]
    }
}
