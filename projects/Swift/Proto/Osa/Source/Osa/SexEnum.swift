//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

import Foundation

public enum SexEnum {
    typealias RawValue = Int32
    case male
    case female

    var rawValue: RawValue {
        switch self {
        case .male: return 0 + 0
        case .female: return 0 + 1
        }
    }

    init(value: Int8) { self = SexEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: Int16) { self = SexEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: Int32) { self = SexEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: Int64) { self = SexEnum(rawValue: NSNumber(value: value).int32Value) }
    init(value: SexEnum) { self = SexEnum(rawValue: value.rawValue) }
    init(rawValue: Int32) { self = Self.mapValue(value: rawValue)! }

    var description: String {
        switch self {
        case .male: return "male"
        case .female: return "female"
        }
    }

    static let rawValuesMap: [RawValue: SexEnum] = {
        var value = [RawValue: SexEnum]()
        value[SexEnum.male.rawValue] = .male
        value[SexEnum.female.rawValue] = .female
        return value
    }()

    static func mapValue(value: Int32) -> SexEnum? {
        return rawValuesMap[value]
    }
}
