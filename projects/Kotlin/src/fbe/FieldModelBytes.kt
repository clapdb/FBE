//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: FBE
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package fbe

// Fast Binary Encoding bytes field model
class FieldModelBytes(buffer: Buffer, offset: Long) : FieldModel(buffer, offset)
{
    // Field size
    override val fbeSize: Long = 4

    // Field extra size
    override val fbeExtra: Long get()
    {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return 0

        val fbeBytesOffset = readUInt32(fbeOffset).toLong()
        if ((fbeBytesOffset == 0L) || ((_buffer.offset + fbeBytesOffset + 4) > _buffer.size))
            return 0

        val fbeBytesSize = readUInt32(fbeBytesOffset).toLong()
        return 4 + fbeBytesSize
    }

    // Check if the bytes value is valid
    override fun verify(): Boolean
    {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return true

        val fbeBytesOffset = readUInt32(fbeOffset).toLong()
        if (fbeBytesOffset == 0L)
            return true

        if ((_buffer.offset + fbeBytesOffset + 4) > _buffer.size)
            return false

        val fbeBytesSize = readUInt32(fbeBytesOffset).toLong()
        if ((_buffer.offset + fbeBytesOffset + 4 + fbeBytesSize) > _buffer.size)
            return false

        return true
    }

    // Get the bytes value
    fun get(defaults: ByteArray = ByteArray(0)): ByteArray
    {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return defaults

        val fbeBytesOffset = readUInt32(fbeOffset).toLong()
        if (fbeBytesOffset == 0L)
            return defaults

        assert((_buffer.offset + fbeBytesOffset + 4) <= _buffer.size) { "Model is broken!" }
        if ((_buffer.offset + fbeBytesOffset + 4) > _buffer.size)
            return defaults

        val fbeBytesSize = readUInt32(fbeBytesOffset).toLong()
        assert((_buffer.offset + fbeBytesOffset + 4 + fbeBytesSize) <= _buffer.size) { "Model is broken!" }
        if ((_buffer.offset + fbeBytesOffset + 4 + fbeBytesSize) > _buffer.size)
            return defaults

        return readBytes(fbeBytesOffset + 4, fbeBytesSize)
    }

    // Set the bytes value
    fun set(value: ByteArray)
    {
        assert((_buffer.offset + fbeOffset + fbeSize) <= _buffer.size) { "Model is broken!" }
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return

        val fbeBytesSize = value.size.toLong()
        val fbeBytesOffset = _buffer.allocate(4 + fbeBytesSize) - _buffer.offset
        assert((fbeBytesOffset > 0) && ((_buffer.offset + fbeBytesOffset + 4 + fbeBytesSize) <= _buffer.size)) { "Model is broken!" }
        if ((fbeBytesOffset <= 0) || ((_buffer.offset + fbeBytesOffset + 4 + fbeBytesSize) > _buffer.size))
            return

        write(fbeOffset, fbeBytesOffset.toUInt())
        write(fbeBytesOffset, fbeBytesSize.toUInt())
        write(fbeBytesOffset + 4, value)
    }
}
