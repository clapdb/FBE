//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package osa

@Suppress("MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods")
open class Simple : Comparable<Any?>
{
    var name: String
    var depth: Int
    var sa: Array<Extra>
    var sex: Sex

    @Transient open var fbeType: Long = 2

    constructor(name: String = "", depth: Int = 0, sa: Array<Extra> = Array(1) { Extra() }, sex: Sex = Sex())
    {
        this.name = name
        this.depth = depth
        this.sa = sa
        this.sex = sex
    }

    @Suppress("UNUSED_PARAMETER")
    constructor(other: Simple)
    {
        this.name = other.name
        this.depth = other.depth
        this.sa = other.sa
        this.sex = other.sex
    }

    open fun clone(): Simple
    {
        // Serialize the struct to the FBE stream
        val writer = osa.fbe.SimpleModel()
        writer.serialize(this)

        // Deserialize the struct from the FBE stream
        val reader = osa.fbe.SimpleModel()
        reader.attach(writer.buffer)
        return reader.deserialize()
    }

    override fun compareTo(other: Any?): Int
    {
        if (other == null)
            return -1

        if (!Simple::class.java.isAssignableFrom(other.javaClass))
            return -1

        @Suppress("UNUSED_VARIABLE")
        val obj = other as Simple? ?: return -1

        @Suppress("VARIABLE_WITH_REDUNDANT_INITIALIZER", "CanBeVal", "UnnecessaryVariable")
        var result = 0
        return result
    }

    override fun equals(other: Any?): Boolean
    {
        if (other == null)
            return false

        if (!Simple::class.java.isAssignableFrom(other.javaClass))
            return false

        @Suppress("UNUSED_VARIABLE")
        val obj = other as Simple? ?: return false

        return true
    }

    override fun hashCode(): Int
    {
        @Suppress("CanBeVal", "UnnecessaryVariable")
        var hash = 17
        return hash
    }

    override fun toString(): String
    {
        val sb = StringBuilder()
        sb.append("Simple(")
        sb.append("name="); sb.append("\"").append(name).append("\"")
        sb.append(",depth="); sb.append(depth)
        @Suppress("ConstantConditionIf")
        if (true)
        {
            var first = true
            sb.append(",sa=[").append(sa.size).append("][")
            for (item in sa)
            {
                sb.append(if (first) "" else ",").append(item)
                first = false
            }
            sb.append("]")
        }
        sb.append(",sex="); sb.append(sex)
        sb.append(")")
        return sb.toString()
    }

    open fun toJson(): String = osa.fbe.Json.engine.toJson(this)

    companion object
    {
        const val fbeTypeConst: Long = 2
        fun fromJson(json: String): Simple = osa.fbe.Json.engine.fromJson(json, Simple::class.java)
    }
}
