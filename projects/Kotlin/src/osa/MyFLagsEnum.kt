//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package osa

@Suppress("EnumEntryName", "MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods")
enum class MyFLagsEnum
{
    flag0(0x00 + 0)
    , flag1(0x01 + 0)
    , flag2(0x02 + 0)
    ;

    var raw: Int = 0
        private set

    constructor(value: Byte) { this.raw = value.toInt() }
    constructor(value: Short) { this.raw = value.toInt() }
    constructor(value: Int) { this.raw = value.toInt() }
    constructor(value: Long) { this.raw = value.toInt() }
    constructor(value: MyFLagsEnum) { this.raw = value.raw }

    override fun toString(): String
    {
        if (this == flag0) return "flag0"
        if (this == flag1) return "flag1"
        if (this == flag2) return "flag2"
        return "<unknown>"
    }

    companion object
    {
        private val mapping = java.util.HashMap<Int, MyFLagsEnum>()

        init
        {
            for (value in MyFLagsEnum.values())
                mapping[value.raw] = value
        }

        fun mapValue(value: Int): MyFLagsEnum? { return mapping[value] }
    }
}
