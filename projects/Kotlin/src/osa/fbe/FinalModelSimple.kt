//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package osa.fbe

// Fast Binary Encoding Simple final model
@Suppress("MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods", "ReplaceGetOrSet")
class FinalModelSimple(buffer: fbe.Buffer, offset: Long) : fbe.FinalModel(buffer, offset)
{
    val name: fbe.FinalModelString = fbe.FinalModelString(buffer, 0)
    val depth: fbe.FinalModelInt32 = fbe.FinalModelInt32(buffer, 0)
    val sa: FinalModelArrayExtra = FinalModelArrayExtra(buffer, 0, 1)
    val sex: FinalModelSex = FinalModelSex(buffer, 0)

    // Get the allocation size
    @Suppress("UNUSED_PARAMETER")
    fun fbeAllocationSize(fbeValue: osa.Simple): Long = (0
        + name.fbeAllocationSize(fbeValue.name)
        + depth.fbeAllocationSize(fbeValue.depth)
        + sa.fbeAllocationSize(fbeValue.sa)
        + sex.fbeAllocationSize(fbeValue.sex)
        )

    // Field type
    var fbeType: Long = fbeTypeConst

    companion object
    {
        const val fbeTypeConst: Long = 2
    }

    // Check if the struct value is valid
    override fun verify(): Long
    {
        _buffer.shift(fbeOffset)
        val fbeResult = verifyFields()
        _buffer.unshift(fbeOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    fun verifyFields(): Long
    {
        var fbeCurrentOffset = 0L
        @Suppress("VARIABLE_WITH_REDUNDANT_INITIALIZER")
        var fbeFieldSize = 0L

        name.fbeOffset = fbeCurrentOffset
        fbeFieldSize = name.verify()
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE
        fbeCurrentOffset += fbeFieldSize

        depth.fbeOffset = fbeCurrentOffset
        fbeFieldSize = depth.verify()
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE
        fbeCurrentOffset += fbeFieldSize

        sa.fbeOffset = fbeCurrentOffset
        fbeFieldSize = sa.verify()
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE
        fbeCurrentOffset += fbeFieldSize

        sex.fbeOffset = fbeCurrentOffset
        fbeFieldSize = sex.verify()
        if (fbeFieldSize == Long.MAX_VALUE)
            return Long.MAX_VALUE
        fbeCurrentOffset += fbeFieldSize

        return fbeCurrentOffset
    }

    // Get the struct value
    fun get(fbeSize: fbe.Size, fbeValue: osa.Simple = osa.Simple()): osa.Simple
    {
        _buffer.shift(fbeOffset)
        fbeSize.value = getFields(fbeValue)
        _buffer.unshift(fbeOffset)
        return fbeValue
    }

    // Get the struct fields values
    @Suppress("UNUSED_PARAMETER")
    fun getFields(fbeValue: osa.Simple): Long
    {
        var fbeCurrentOffset = 0L
        var fbeCurrentSize = 0L
        val fbeFieldSize = fbe.Size()

        name.fbeOffset = fbeCurrentOffset
        fbeValue.name = name.get(fbeFieldSize)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        depth.fbeOffset = fbeCurrentOffset
        fbeValue.depth = depth.get(fbeFieldSize)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        sa.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = sa.get(fbeValue.sa)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        sex.fbeOffset = fbeCurrentOffset
        fbeValue.sex = sex.get(fbeFieldSize)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        return fbeCurrentSize
    }

    // Set the struct value
    fun set(fbeValue: osa.Simple): Long
    {
        _buffer.shift(fbeOffset)
        val fbeSize = setFields(fbeValue)
        _buffer.unshift(fbeOffset)
        return fbeSize
    }

    // Set the struct fields values
    @Suppress("UNUSED_PARAMETER")
    fun setFields(fbeValue: osa.Simple): Long
    {
        var fbeCurrentOffset = 0L
        var fbeCurrentSize = 0L
        val fbeFieldSize = fbe.Size()

        name.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = name.set(fbeValue.name)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        depth.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = depth.set(fbeValue.depth)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        sa.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = sa.set(fbeValue.sa)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        sex.fbeOffset = fbeCurrentOffset
        fbeFieldSize.value = sex.set(fbeValue.sex)
        fbeCurrentOffset += fbeFieldSize.value
        fbeCurrentSize += fbeFieldSize.value

        return fbeCurrentSize
    }
}
