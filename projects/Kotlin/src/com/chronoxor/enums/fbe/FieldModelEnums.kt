//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.enums.fbe

// Fast Binary Encoding Enums field model
@Suppress("MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods", "ReplaceGetOrSet")
class FieldModelEnums(buffer: com.chronoxor.fbe.Buffer, offset: Long) : com.chronoxor.fbe.FieldModel(buffer, offset)
{
    val byte0: FieldModelEnumByte = FieldModelEnumByte(buffer, 4 + 4)
    val byte1: FieldModelEnumByte = FieldModelEnumByte(buffer, byte0.fbeOffset + byte0.fbeSize)
    val byte2: FieldModelEnumByte = FieldModelEnumByte(buffer, byte1.fbeOffset + byte1.fbeSize)
    val byte3: FieldModelEnumByte = FieldModelEnumByte(buffer, byte2.fbeOffset + byte2.fbeSize)
    val byte4: FieldModelEnumByte = FieldModelEnumByte(buffer, byte3.fbeOffset + byte3.fbeSize)
    val byte5: FieldModelEnumByte = FieldModelEnumByte(buffer, byte4.fbeOffset + byte4.fbeSize)
    val char0: FieldModelEnumChar = FieldModelEnumChar(buffer, byte5.fbeOffset + byte5.fbeSize)
    val char1: FieldModelEnumChar = FieldModelEnumChar(buffer, char0.fbeOffset + char0.fbeSize)
    val char2: FieldModelEnumChar = FieldModelEnumChar(buffer, char1.fbeOffset + char1.fbeSize)
    val char3: FieldModelEnumChar = FieldModelEnumChar(buffer, char2.fbeOffset + char2.fbeSize)
    val char4: FieldModelEnumChar = FieldModelEnumChar(buffer, char3.fbeOffset + char3.fbeSize)
    val char5: FieldModelEnumChar = FieldModelEnumChar(buffer, char4.fbeOffset + char4.fbeSize)
    val wchar0: FieldModelEnumWChar = FieldModelEnumWChar(buffer, char5.fbeOffset + char5.fbeSize)
    val wchar1: FieldModelEnumWChar = FieldModelEnumWChar(buffer, wchar0.fbeOffset + wchar0.fbeSize)
    val wchar2: FieldModelEnumWChar = FieldModelEnumWChar(buffer, wchar1.fbeOffset + wchar1.fbeSize)
    val wchar3: FieldModelEnumWChar = FieldModelEnumWChar(buffer, wchar2.fbeOffset + wchar2.fbeSize)
    val wchar4: FieldModelEnumWChar = FieldModelEnumWChar(buffer, wchar3.fbeOffset + wchar3.fbeSize)
    val wchar5: FieldModelEnumWChar = FieldModelEnumWChar(buffer, wchar4.fbeOffset + wchar4.fbeSize)
    val int8b0: FieldModelEnumInt8 = FieldModelEnumInt8(buffer, wchar5.fbeOffset + wchar5.fbeSize)
    val int8b1: FieldModelEnumInt8 = FieldModelEnumInt8(buffer, int8b0.fbeOffset + int8b0.fbeSize)
    val int8b2: FieldModelEnumInt8 = FieldModelEnumInt8(buffer, int8b1.fbeOffset + int8b1.fbeSize)
    val int8b3: FieldModelEnumInt8 = FieldModelEnumInt8(buffer, int8b2.fbeOffset + int8b2.fbeSize)
    val int8b4: FieldModelEnumInt8 = FieldModelEnumInt8(buffer, int8b3.fbeOffset + int8b3.fbeSize)
    val int8b5: FieldModelEnumInt8 = FieldModelEnumInt8(buffer, int8b4.fbeOffset + int8b4.fbeSize)
    val uint8b0: FieldModelEnumUInt8 = FieldModelEnumUInt8(buffer, int8b5.fbeOffset + int8b5.fbeSize)
    val uint8b1: FieldModelEnumUInt8 = FieldModelEnumUInt8(buffer, uint8b0.fbeOffset + uint8b0.fbeSize)
    val uint8b2: FieldModelEnumUInt8 = FieldModelEnumUInt8(buffer, uint8b1.fbeOffset + uint8b1.fbeSize)
    val uint8b3: FieldModelEnumUInt8 = FieldModelEnumUInt8(buffer, uint8b2.fbeOffset + uint8b2.fbeSize)
    val uint8b4: FieldModelEnumUInt8 = FieldModelEnumUInt8(buffer, uint8b3.fbeOffset + uint8b3.fbeSize)
    val uint8b5: FieldModelEnumUInt8 = FieldModelEnumUInt8(buffer, uint8b4.fbeOffset + uint8b4.fbeSize)
    val int16b0: FieldModelEnumInt16 = FieldModelEnumInt16(buffer, uint8b5.fbeOffset + uint8b5.fbeSize)
    val int16b1: FieldModelEnumInt16 = FieldModelEnumInt16(buffer, int16b0.fbeOffset + int16b0.fbeSize)
    val int16b2: FieldModelEnumInt16 = FieldModelEnumInt16(buffer, int16b1.fbeOffset + int16b1.fbeSize)
    val int16b3: FieldModelEnumInt16 = FieldModelEnumInt16(buffer, int16b2.fbeOffset + int16b2.fbeSize)
    val int16b4: FieldModelEnumInt16 = FieldModelEnumInt16(buffer, int16b3.fbeOffset + int16b3.fbeSize)
    val int16b5: FieldModelEnumInt16 = FieldModelEnumInt16(buffer, int16b4.fbeOffset + int16b4.fbeSize)
    val uint16b0: FieldModelEnumUInt16 = FieldModelEnumUInt16(buffer, int16b5.fbeOffset + int16b5.fbeSize)
    val uint16b1: FieldModelEnumUInt16 = FieldModelEnumUInt16(buffer, uint16b0.fbeOffset + uint16b0.fbeSize)
    val uint16b2: FieldModelEnumUInt16 = FieldModelEnumUInt16(buffer, uint16b1.fbeOffset + uint16b1.fbeSize)
    val uint16b3: FieldModelEnumUInt16 = FieldModelEnumUInt16(buffer, uint16b2.fbeOffset + uint16b2.fbeSize)
    val uint16b4: FieldModelEnumUInt16 = FieldModelEnumUInt16(buffer, uint16b3.fbeOffset + uint16b3.fbeSize)
    val uint16b5: FieldModelEnumUInt16 = FieldModelEnumUInt16(buffer, uint16b4.fbeOffset + uint16b4.fbeSize)
    val int32b0: FieldModelEnumInt32 = FieldModelEnumInt32(buffer, uint16b5.fbeOffset + uint16b5.fbeSize)
    val int32b1: FieldModelEnumInt32 = FieldModelEnumInt32(buffer, int32b0.fbeOffset + int32b0.fbeSize)
    val int32b2: FieldModelEnumInt32 = FieldModelEnumInt32(buffer, int32b1.fbeOffset + int32b1.fbeSize)
    val int32b3: FieldModelEnumInt32 = FieldModelEnumInt32(buffer, int32b2.fbeOffset + int32b2.fbeSize)
    val int32b4: FieldModelEnumInt32 = FieldModelEnumInt32(buffer, int32b3.fbeOffset + int32b3.fbeSize)
    val int32b5: FieldModelEnumInt32 = FieldModelEnumInt32(buffer, int32b4.fbeOffset + int32b4.fbeSize)
    val uint32b0: FieldModelEnumUInt32 = FieldModelEnumUInt32(buffer, int32b5.fbeOffset + int32b5.fbeSize)
    val uint32b1: FieldModelEnumUInt32 = FieldModelEnumUInt32(buffer, uint32b0.fbeOffset + uint32b0.fbeSize)
    val uint32b2: FieldModelEnumUInt32 = FieldModelEnumUInt32(buffer, uint32b1.fbeOffset + uint32b1.fbeSize)
    val uint32b3: FieldModelEnumUInt32 = FieldModelEnumUInt32(buffer, uint32b2.fbeOffset + uint32b2.fbeSize)
    val uint32b4: FieldModelEnumUInt32 = FieldModelEnumUInt32(buffer, uint32b3.fbeOffset + uint32b3.fbeSize)
    val uint32b5: FieldModelEnumUInt32 = FieldModelEnumUInt32(buffer, uint32b4.fbeOffset + uint32b4.fbeSize)
    val int64b0: FieldModelEnumInt64 = FieldModelEnumInt64(buffer, uint32b5.fbeOffset + uint32b5.fbeSize)
    val int64b1: FieldModelEnumInt64 = FieldModelEnumInt64(buffer, int64b0.fbeOffset + int64b0.fbeSize)
    val int64b2: FieldModelEnumInt64 = FieldModelEnumInt64(buffer, int64b1.fbeOffset + int64b1.fbeSize)
    val int64b3: FieldModelEnumInt64 = FieldModelEnumInt64(buffer, int64b2.fbeOffset + int64b2.fbeSize)
    val int64b4: FieldModelEnumInt64 = FieldModelEnumInt64(buffer, int64b3.fbeOffset + int64b3.fbeSize)
    val int64b5: FieldModelEnumInt64 = FieldModelEnumInt64(buffer, int64b4.fbeOffset + int64b4.fbeSize)
    val uint64b0: FieldModelEnumUInt64 = FieldModelEnumUInt64(buffer, int64b5.fbeOffset + int64b5.fbeSize)
    val uint64b1: FieldModelEnumUInt64 = FieldModelEnumUInt64(buffer, uint64b0.fbeOffset + uint64b0.fbeSize)
    val uint64b2: FieldModelEnumUInt64 = FieldModelEnumUInt64(buffer, uint64b1.fbeOffset + uint64b1.fbeSize)
    val uint64b3: FieldModelEnumUInt64 = FieldModelEnumUInt64(buffer, uint64b2.fbeOffset + uint64b2.fbeSize)
    val uint64b4: FieldModelEnumUInt64 = FieldModelEnumUInt64(buffer, uint64b3.fbeOffset + uint64b3.fbeSize)
    val uint64b5: FieldModelEnumUInt64 = FieldModelEnumUInt64(buffer, uint64b4.fbeOffset + uint64b4.fbeSize)

    // Field size
    override val fbeSize: Long = 4

    // Field body size
    val fbeBody: Long = (4 + 4
        + byte0.fbeSize
        + byte1.fbeSize
        + byte2.fbeSize
        + byte3.fbeSize
        + byte4.fbeSize
        + byte5.fbeSize
        + char0.fbeSize
        + char1.fbeSize
        + char2.fbeSize
        + char3.fbeSize
        + char4.fbeSize
        + char5.fbeSize
        + wchar0.fbeSize
        + wchar1.fbeSize
        + wchar2.fbeSize
        + wchar3.fbeSize
        + wchar4.fbeSize
        + wchar5.fbeSize
        + int8b0.fbeSize
        + int8b1.fbeSize
        + int8b2.fbeSize
        + int8b3.fbeSize
        + int8b4.fbeSize
        + int8b5.fbeSize
        + uint8b0.fbeSize
        + uint8b1.fbeSize
        + uint8b2.fbeSize
        + uint8b3.fbeSize
        + uint8b4.fbeSize
        + uint8b5.fbeSize
        + int16b0.fbeSize
        + int16b1.fbeSize
        + int16b2.fbeSize
        + int16b3.fbeSize
        + int16b4.fbeSize
        + int16b5.fbeSize
        + uint16b0.fbeSize
        + uint16b1.fbeSize
        + uint16b2.fbeSize
        + uint16b3.fbeSize
        + uint16b4.fbeSize
        + uint16b5.fbeSize
        + int32b0.fbeSize
        + int32b1.fbeSize
        + int32b2.fbeSize
        + int32b3.fbeSize
        + int32b4.fbeSize
        + int32b5.fbeSize
        + uint32b0.fbeSize
        + uint32b1.fbeSize
        + uint32b2.fbeSize
        + uint32b3.fbeSize
        + uint32b4.fbeSize
        + uint32b5.fbeSize
        + int64b0.fbeSize
        + int64b1.fbeSize
        + int64b2.fbeSize
        + int64b3.fbeSize
        + int64b4.fbeSize
        + int64b5.fbeSize
        + uint64b0.fbeSize
        + uint64b1.fbeSize
        + uint64b2.fbeSize
        + uint64b3.fbeSize
        + uint64b4.fbeSize
        + uint64b5.fbeSize
        )

    // Field extra size
    override val fbeExtra: Long get()
    {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return 0

        val fbeStructOffset = readUInt32(fbeOffset).toLong()
        if ((fbeStructOffset == 0L) || ((_buffer.offset + fbeStructOffset + 4) > _buffer.size))
            return 0

        _buffer.shift(fbeStructOffset)

        val fbeResult = (fbeBody
            + byte0.fbeExtra
            + byte1.fbeExtra
            + byte2.fbeExtra
            + byte3.fbeExtra
            + byte4.fbeExtra
            + byte5.fbeExtra
            + char0.fbeExtra
            + char1.fbeExtra
            + char2.fbeExtra
            + char3.fbeExtra
            + char4.fbeExtra
            + char5.fbeExtra
            + wchar0.fbeExtra
            + wchar1.fbeExtra
            + wchar2.fbeExtra
            + wchar3.fbeExtra
            + wchar4.fbeExtra
            + wchar5.fbeExtra
            + int8b0.fbeExtra
            + int8b1.fbeExtra
            + int8b2.fbeExtra
            + int8b3.fbeExtra
            + int8b4.fbeExtra
            + int8b5.fbeExtra
            + uint8b0.fbeExtra
            + uint8b1.fbeExtra
            + uint8b2.fbeExtra
            + uint8b3.fbeExtra
            + uint8b4.fbeExtra
            + uint8b5.fbeExtra
            + int16b0.fbeExtra
            + int16b1.fbeExtra
            + int16b2.fbeExtra
            + int16b3.fbeExtra
            + int16b4.fbeExtra
            + int16b5.fbeExtra
            + uint16b0.fbeExtra
            + uint16b1.fbeExtra
            + uint16b2.fbeExtra
            + uint16b3.fbeExtra
            + uint16b4.fbeExtra
            + uint16b5.fbeExtra
            + int32b0.fbeExtra
            + int32b1.fbeExtra
            + int32b2.fbeExtra
            + int32b3.fbeExtra
            + int32b4.fbeExtra
            + int32b5.fbeExtra
            + uint32b0.fbeExtra
            + uint32b1.fbeExtra
            + uint32b2.fbeExtra
            + uint32b3.fbeExtra
            + uint32b4.fbeExtra
            + uint32b5.fbeExtra
            + int64b0.fbeExtra
            + int64b1.fbeExtra
            + int64b2.fbeExtra
            + int64b3.fbeExtra
            + int64b4.fbeExtra
            + int64b5.fbeExtra
            + uint64b0.fbeExtra
            + uint64b1.fbeExtra
            + uint64b2.fbeExtra
            + uint64b3.fbeExtra
            + uint64b4.fbeExtra
            + uint64b5.fbeExtra
            )

        _buffer.unshift(fbeStructOffset)

        return fbeResult
    }

    // Field type
    var fbeType: Long = fbeTypeConst

    companion object
    {
        const val fbeTypeConst: Long = 1
    }

    // Check if the struct value is valid
    fun verify(fbeVerifyType: Boolean = true): Boolean
    {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return true

        val fbeStructOffset = readUInt32(fbeOffset).toLong()
        if ((fbeStructOffset == 0L) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size))
            return false

        val fbeStructSize = readUInt32(fbeStructOffset).toLong()
        if (fbeStructSize < (4 + 4))
            return false

        val fbeStructType = readUInt32(fbeStructOffset + 4).toLong()
        if (fbeVerifyType && (fbeStructType != fbeType))
            return false

        _buffer.shift(fbeStructOffset)
        val fbeResult = verifyFields(fbeStructSize)
        _buffer.unshift(fbeStructOffset)
        return fbeResult
    }

    // Check if the struct fields are valid
    @Suppress("UNUSED_PARAMETER")
    fun verifyFields(fbeStructSize: Long): Boolean
    {
        var fbeCurrentSize = 4L + 4L

        if ((fbeCurrentSize + byte0.fbeSize) > fbeStructSize)
            return true
        if (!byte0.verify())
            return false
        fbeCurrentSize += byte0.fbeSize

        if ((fbeCurrentSize + byte1.fbeSize) > fbeStructSize)
            return true
        if (!byte1.verify())
            return false
        fbeCurrentSize += byte1.fbeSize

        if ((fbeCurrentSize + byte2.fbeSize) > fbeStructSize)
            return true
        if (!byte2.verify())
            return false
        fbeCurrentSize += byte2.fbeSize

        if ((fbeCurrentSize + byte3.fbeSize) > fbeStructSize)
            return true
        if (!byte3.verify())
            return false
        fbeCurrentSize += byte3.fbeSize

        if ((fbeCurrentSize + byte4.fbeSize) > fbeStructSize)
            return true
        if (!byte4.verify())
            return false
        fbeCurrentSize += byte4.fbeSize

        if ((fbeCurrentSize + byte5.fbeSize) > fbeStructSize)
            return true
        if (!byte5.verify())
            return false
        fbeCurrentSize += byte5.fbeSize

        if ((fbeCurrentSize + char0.fbeSize) > fbeStructSize)
            return true
        if (!char0.verify())
            return false
        fbeCurrentSize += char0.fbeSize

        if ((fbeCurrentSize + char1.fbeSize) > fbeStructSize)
            return true
        if (!char1.verify())
            return false
        fbeCurrentSize += char1.fbeSize

        if ((fbeCurrentSize + char2.fbeSize) > fbeStructSize)
            return true
        if (!char2.verify())
            return false
        fbeCurrentSize += char2.fbeSize

        if ((fbeCurrentSize + char3.fbeSize) > fbeStructSize)
            return true
        if (!char3.verify())
            return false
        fbeCurrentSize += char3.fbeSize

        if ((fbeCurrentSize + char4.fbeSize) > fbeStructSize)
            return true
        if (!char4.verify())
            return false
        fbeCurrentSize += char4.fbeSize

        if ((fbeCurrentSize + char5.fbeSize) > fbeStructSize)
            return true
        if (!char5.verify())
            return false
        fbeCurrentSize += char5.fbeSize

        if ((fbeCurrentSize + wchar0.fbeSize) > fbeStructSize)
            return true
        if (!wchar0.verify())
            return false
        fbeCurrentSize += wchar0.fbeSize

        if ((fbeCurrentSize + wchar1.fbeSize) > fbeStructSize)
            return true
        if (!wchar1.verify())
            return false
        fbeCurrentSize += wchar1.fbeSize

        if ((fbeCurrentSize + wchar2.fbeSize) > fbeStructSize)
            return true
        if (!wchar2.verify())
            return false
        fbeCurrentSize += wchar2.fbeSize

        if ((fbeCurrentSize + wchar3.fbeSize) > fbeStructSize)
            return true
        if (!wchar3.verify())
            return false
        fbeCurrentSize += wchar3.fbeSize

        if ((fbeCurrentSize + wchar4.fbeSize) > fbeStructSize)
            return true
        if (!wchar4.verify())
            return false
        fbeCurrentSize += wchar4.fbeSize

        if ((fbeCurrentSize + wchar5.fbeSize) > fbeStructSize)
            return true
        if (!wchar5.verify())
            return false
        fbeCurrentSize += wchar5.fbeSize

        if ((fbeCurrentSize + int8b0.fbeSize) > fbeStructSize)
            return true
        if (!int8b0.verify())
            return false
        fbeCurrentSize += int8b0.fbeSize

        if ((fbeCurrentSize + int8b1.fbeSize) > fbeStructSize)
            return true
        if (!int8b1.verify())
            return false
        fbeCurrentSize += int8b1.fbeSize

        if ((fbeCurrentSize + int8b2.fbeSize) > fbeStructSize)
            return true
        if (!int8b2.verify())
            return false
        fbeCurrentSize += int8b2.fbeSize

        if ((fbeCurrentSize + int8b3.fbeSize) > fbeStructSize)
            return true
        if (!int8b3.verify())
            return false
        fbeCurrentSize += int8b3.fbeSize

        if ((fbeCurrentSize + int8b4.fbeSize) > fbeStructSize)
            return true
        if (!int8b4.verify())
            return false
        fbeCurrentSize += int8b4.fbeSize

        if ((fbeCurrentSize + int8b5.fbeSize) > fbeStructSize)
            return true
        if (!int8b5.verify())
            return false
        fbeCurrentSize += int8b5.fbeSize

        if ((fbeCurrentSize + uint8b0.fbeSize) > fbeStructSize)
            return true
        if (!uint8b0.verify())
            return false
        fbeCurrentSize += uint8b0.fbeSize

        if ((fbeCurrentSize + uint8b1.fbeSize) > fbeStructSize)
            return true
        if (!uint8b1.verify())
            return false
        fbeCurrentSize += uint8b1.fbeSize

        if ((fbeCurrentSize + uint8b2.fbeSize) > fbeStructSize)
            return true
        if (!uint8b2.verify())
            return false
        fbeCurrentSize += uint8b2.fbeSize

        if ((fbeCurrentSize + uint8b3.fbeSize) > fbeStructSize)
            return true
        if (!uint8b3.verify())
            return false
        fbeCurrentSize += uint8b3.fbeSize

        if ((fbeCurrentSize + uint8b4.fbeSize) > fbeStructSize)
            return true
        if (!uint8b4.verify())
            return false
        fbeCurrentSize += uint8b4.fbeSize

        if ((fbeCurrentSize + uint8b5.fbeSize) > fbeStructSize)
            return true
        if (!uint8b5.verify())
            return false
        fbeCurrentSize += uint8b5.fbeSize

        if ((fbeCurrentSize + int16b0.fbeSize) > fbeStructSize)
            return true
        if (!int16b0.verify())
            return false
        fbeCurrentSize += int16b0.fbeSize

        if ((fbeCurrentSize + int16b1.fbeSize) > fbeStructSize)
            return true
        if (!int16b1.verify())
            return false
        fbeCurrentSize += int16b1.fbeSize

        if ((fbeCurrentSize + int16b2.fbeSize) > fbeStructSize)
            return true
        if (!int16b2.verify())
            return false
        fbeCurrentSize += int16b2.fbeSize

        if ((fbeCurrentSize + int16b3.fbeSize) > fbeStructSize)
            return true
        if (!int16b3.verify())
            return false
        fbeCurrentSize += int16b3.fbeSize

        if ((fbeCurrentSize + int16b4.fbeSize) > fbeStructSize)
            return true
        if (!int16b4.verify())
            return false
        fbeCurrentSize += int16b4.fbeSize

        if ((fbeCurrentSize + int16b5.fbeSize) > fbeStructSize)
            return true
        if (!int16b5.verify())
            return false
        fbeCurrentSize += int16b5.fbeSize

        if ((fbeCurrentSize + uint16b0.fbeSize) > fbeStructSize)
            return true
        if (!uint16b0.verify())
            return false
        fbeCurrentSize += uint16b0.fbeSize

        if ((fbeCurrentSize + uint16b1.fbeSize) > fbeStructSize)
            return true
        if (!uint16b1.verify())
            return false
        fbeCurrentSize += uint16b1.fbeSize

        if ((fbeCurrentSize + uint16b2.fbeSize) > fbeStructSize)
            return true
        if (!uint16b2.verify())
            return false
        fbeCurrentSize += uint16b2.fbeSize

        if ((fbeCurrentSize + uint16b3.fbeSize) > fbeStructSize)
            return true
        if (!uint16b3.verify())
            return false
        fbeCurrentSize += uint16b3.fbeSize

        if ((fbeCurrentSize + uint16b4.fbeSize) > fbeStructSize)
            return true
        if (!uint16b4.verify())
            return false
        fbeCurrentSize += uint16b4.fbeSize

        if ((fbeCurrentSize + uint16b5.fbeSize) > fbeStructSize)
            return true
        if (!uint16b5.verify())
            return false
        fbeCurrentSize += uint16b5.fbeSize

        if ((fbeCurrentSize + int32b0.fbeSize) > fbeStructSize)
            return true
        if (!int32b0.verify())
            return false
        fbeCurrentSize += int32b0.fbeSize

        if ((fbeCurrentSize + int32b1.fbeSize) > fbeStructSize)
            return true
        if (!int32b1.verify())
            return false
        fbeCurrentSize += int32b1.fbeSize

        if ((fbeCurrentSize + int32b2.fbeSize) > fbeStructSize)
            return true
        if (!int32b2.verify())
            return false
        fbeCurrentSize += int32b2.fbeSize

        if ((fbeCurrentSize + int32b3.fbeSize) > fbeStructSize)
            return true
        if (!int32b3.verify())
            return false
        fbeCurrentSize += int32b3.fbeSize

        if ((fbeCurrentSize + int32b4.fbeSize) > fbeStructSize)
            return true
        if (!int32b4.verify())
            return false
        fbeCurrentSize += int32b4.fbeSize

        if ((fbeCurrentSize + int32b5.fbeSize) > fbeStructSize)
            return true
        if (!int32b5.verify())
            return false
        fbeCurrentSize += int32b5.fbeSize

        if ((fbeCurrentSize + uint32b0.fbeSize) > fbeStructSize)
            return true
        if (!uint32b0.verify())
            return false
        fbeCurrentSize += uint32b0.fbeSize

        if ((fbeCurrentSize + uint32b1.fbeSize) > fbeStructSize)
            return true
        if (!uint32b1.verify())
            return false
        fbeCurrentSize += uint32b1.fbeSize

        if ((fbeCurrentSize + uint32b2.fbeSize) > fbeStructSize)
            return true
        if (!uint32b2.verify())
            return false
        fbeCurrentSize += uint32b2.fbeSize

        if ((fbeCurrentSize + uint32b3.fbeSize) > fbeStructSize)
            return true
        if (!uint32b3.verify())
            return false
        fbeCurrentSize += uint32b3.fbeSize

        if ((fbeCurrentSize + uint32b4.fbeSize) > fbeStructSize)
            return true
        if (!uint32b4.verify())
            return false
        fbeCurrentSize += uint32b4.fbeSize

        if ((fbeCurrentSize + uint32b5.fbeSize) > fbeStructSize)
            return true
        if (!uint32b5.verify())
            return false
        fbeCurrentSize += uint32b5.fbeSize

        if ((fbeCurrentSize + int64b0.fbeSize) > fbeStructSize)
            return true
        if (!int64b0.verify())
            return false
        fbeCurrentSize += int64b0.fbeSize

        if ((fbeCurrentSize + int64b1.fbeSize) > fbeStructSize)
            return true
        if (!int64b1.verify())
            return false
        fbeCurrentSize += int64b1.fbeSize

        if ((fbeCurrentSize + int64b2.fbeSize) > fbeStructSize)
            return true
        if (!int64b2.verify())
            return false
        fbeCurrentSize += int64b2.fbeSize

        if ((fbeCurrentSize + int64b3.fbeSize) > fbeStructSize)
            return true
        if (!int64b3.verify())
            return false
        fbeCurrentSize += int64b3.fbeSize

        if ((fbeCurrentSize + int64b4.fbeSize) > fbeStructSize)
            return true
        if (!int64b4.verify())
            return false
        fbeCurrentSize += int64b4.fbeSize

        if ((fbeCurrentSize + int64b5.fbeSize) > fbeStructSize)
            return true
        if (!int64b5.verify())
            return false
        fbeCurrentSize += int64b5.fbeSize

        if ((fbeCurrentSize + uint64b0.fbeSize) > fbeStructSize)
            return true
        if (!uint64b0.verify())
            return false
        fbeCurrentSize += uint64b0.fbeSize

        if ((fbeCurrentSize + uint64b1.fbeSize) > fbeStructSize)
            return true
        if (!uint64b1.verify())
            return false
        fbeCurrentSize += uint64b1.fbeSize

        if ((fbeCurrentSize + uint64b2.fbeSize) > fbeStructSize)
            return true
        if (!uint64b2.verify())
            return false
        fbeCurrentSize += uint64b2.fbeSize

        if ((fbeCurrentSize + uint64b3.fbeSize) > fbeStructSize)
            return true
        if (!uint64b3.verify())
            return false
        fbeCurrentSize += uint64b3.fbeSize

        if ((fbeCurrentSize + uint64b4.fbeSize) > fbeStructSize)
            return true
        if (!uint64b4.verify())
            return false
        fbeCurrentSize += uint64b4.fbeSize

        if ((fbeCurrentSize + uint64b5.fbeSize) > fbeStructSize)
            return true
        if (!uint64b5.verify())
            return false
        fbeCurrentSize += uint64b5.fbeSize

        return true
    }

    // Get the struct value (begin phase)
    fun getBegin(): Long
    {
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return 0

        val fbeStructOffset = readUInt32(fbeOffset).toLong()
        assert((fbeStructOffset > 0) && ((_buffer.offset + fbeStructOffset + 4 + 4) <= _buffer.size)) { "Model is broken!" }
        if ((fbeStructOffset == 0L) || ((_buffer.offset + fbeStructOffset + 4 + 4) > _buffer.size))
            return 0

        val fbeStructSize = readUInt32(fbeStructOffset).toLong()
        assert(fbeStructSize >= (4 + 4)) { "Model is broken!" }
        if (fbeStructSize < (4 + 4))
            return 0

        _buffer.shift(fbeStructOffset)
        return fbeStructOffset
    }

    // Get the struct value (end phase)
    fun getEnd(fbeBegin: Long)
    {
        _buffer.unshift(fbeBegin)
    }

    // Get the struct value
    fun get(fbeValue: com.chronoxor.enums.Enums = com.chronoxor.enums.Enums()): com.chronoxor.enums.Enums
    {
        val fbeBegin = getBegin()
        if (fbeBegin == 0L)
            return fbeValue

        val fbeStructSize = readUInt32(0).toLong()
        getFields(fbeValue, fbeStructSize)
        getEnd(fbeBegin)
        return fbeValue
    }

    // Get the struct fields values
    @Suppress("UNUSED_PARAMETER")
    fun getFields(fbeValue: com.chronoxor.enums.Enums, fbeStructSize: Long)
    {
        var fbeCurrentSize = 4L + 4L

        if ((fbeCurrentSize + byte0.fbeSize) <= fbeStructSize)
            fbeValue.byte0 = byte0.get(com.chronoxor.enums.EnumByte.ENUM_VALUE_0)
        else
            fbeValue.byte0 = com.chronoxor.enums.EnumByte.ENUM_VALUE_0
        fbeCurrentSize += byte0.fbeSize

        if ((fbeCurrentSize + byte1.fbeSize) <= fbeStructSize)
            fbeValue.byte1 = byte1.get(com.chronoxor.enums.EnumByte.ENUM_VALUE_1)
        else
            fbeValue.byte1 = com.chronoxor.enums.EnumByte.ENUM_VALUE_1
        fbeCurrentSize += byte1.fbeSize

        if ((fbeCurrentSize + byte2.fbeSize) <= fbeStructSize)
            fbeValue.byte2 = byte2.get(com.chronoxor.enums.EnumByte.ENUM_VALUE_2)
        else
            fbeValue.byte2 = com.chronoxor.enums.EnumByte.ENUM_VALUE_2
        fbeCurrentSize += byte2.fbeSize

        if ((fbeCurrentSize + byte3.fbeSize) <= fbeStructSize)
            fbeValue.byte3 = byte3.get(com.chronoxor.enums.EnumByte.ENUM_VALUE_3)
        else
            fbeValue.byte3 = com.chronoxor.enums.EnumByte.ENUM_VALUE_3
        fbeCurrentSize += byte3.fbeSize

        if ((fbeCurrentSize + byte4.fbeSize) <= fbeStructSize)
            fbeValue.byte4 = byte4.get(com.chronoxor.enums.EnumByte.ENUM_VALUE_4)
        else
            fbeValue.byte4 = com.chronoxor.enums.EnumByte.ENUM_VALUE_4
        fbeCurrentSize += byte4.fbeSize

        if ((fbeCurrentSize + byte5.fbeSize) <= fbeStructSize)
            fbeValue.byte5 = byte5.get(com.chronoxor.enums.EnumByte.ENUM_VALUE_5)
        else
            fbeValue.byte5 = com.chronoxor.enums.EnumByte.ENUM_VALUE_5
        fbeCurrentSize += byte5.fbeSize

        if ((fbeCurrentSize + char0.fbeSize) <= fbeStructSize)
            fbeValue.char0 = char0.get(com.chronoxor.enums.EnumChar.ENUM_VALUE_0)
        else
            fbeValue.char0 = com.chronoxor.enums.EnumChar.ENUM_VALUE_0
        fbeCurrentSize += char0.fbeSize

        if ((fbeCurrentSize + char1.fbeSize) <= fbeStructSize)
            fbeValue.char1 = char1.get(com.chronoxor.enums.EnumChar.ENUM_VALUE_1)
        else
            fbeValue.char1 = com.chronoxor.enums.EnumChar.ENUM_VALUE_1
        fbeCurrentSize += char1.fbeSize

        if ((fbeCurrentSize + char2.fbeSize) <= fbeStructSize)
            fbeValue.char2 = char2.get(com.chronoxor.enums.EnumChar.ENUM_VALUE_2)
        else
            fbeValue.char2 = com.chronoxor.enums.EnumChar.ENUM_VALUE_2
        fbeCurrentSize += char2.fbeSize

        if ((fbeCurrentSize + char3.fbeSize) <= fbeStructSize)
            fbeValue.char3 = char3.get(com.chronoxor.enums.EnumChar.ENUM_VALUE_3)
        else
            fbeValue.char3 = com.chronoxor.enums.EnumChar.ENUM_VALUE_3
        fbeCurrentSize += char3.fbeSize

        if ((fbeCurrentSize + char4.fbeSize) <= fbeStructSize)
            fbeValue.char4 = char4.get(com.chronoxor.enums.EnumChar.ENUM_VALUE_4)
        else
            fbeValue.char4 = com.chronoxor.enums.EnumChar.ENUM_VALUE_4
        fbeCurrentSize += char4.fbeSize

        if ((fbeCurrentSize + char5.fbeSize) <= fbeStructSize)
            fbeValue.char5 = char5.get(com.chronoxor.enums.EnumChar.ENUM_VALUE_5)
        else
            fbeValue.char5 = com.chronoxor.enums.EnumChar.ENUM_VALUE_5
        fbeCurrentSize += char5.fbeSize

        if ((fbeCurrentSize + wchar0.fbeSize) <= fbeStructSize)
            fbeValue.wchar0 = wchar0.get(com.chronoxor.enums.EnumWChar.ENUM_VALUE_0)
        else
            fbeValue.wchar0 = com.chronoxor.enums.EnumWChar.ENUM_VALUE_0
        fbeCurrentSize += wchar0.fbeSize

        if ((fbeCurrentSize + wchar1.fbeSize) <= fbeStructSize)
            fbeValue.wchar1 = wchar1.get(com.chronoxor.enums.EnumWChar.ENUM_VALUE_1)
        else
            fbeValue.wchar1 = com.chronoxor.enums.EnumWChar.ENUM_VALUE_1
        fbeCurrentSize += wchar1.fbeSize

        if ((fbeCurrentSize + wchar2.fbeSize) <= fbeStructSize)
            fbeValue.wchar2 = wchar2.get(com.chronoxor.enums.EnumWChar.ENUM_VALUE_2)
        else
            fbeValue.wchar2 = com.chronoxor.enums.EnumWChar.ENUM_VALUE_2
        fbeCurrentSize += wchar2.fbeSize

        if ((fbeCurrentSize + wchar3.fbeSize) <= fbeStructSize)
            fbeValue.wchar3 = wchar3.get(com.chronoxor.enums.EnumWChar.ENUM_VALUE_3)
        else
            fbeValue.wchar3 = com.chronoxor.enums.EnumWChar.ENUM_VALUE_3
        fbeCurrentSize += wchar3.fbeSize

        if ((fbeCurrentSize + wchar4.fbeSize) <= fbeStructSize)
            fbeValue.wchar4 = wchar4.get(com.chronoxor.enums.EnumWChar.ENUM_VALUE_4)
        else
            fbeValue.wchar4 = com.chronoxor.enums.EnumWChar.ENUM_VALUE_4
        fbeCurrentSize += wchar4.fbeSize

        if ((fbeCurrentSize + wchar5.fbeSize) <= fbeStructSize)
            fbeValue.wchar5 = wchar5.get(com.chronoxor.enums.EnumWChar.ENUM_VALUE_5)
        else
            fbeValue.wchar5 = com.chronoxor.enums.EnumWChar.ENUM_VALUE_5
        fbeCurrentSize += wchar5.fbeSize

        if ((fbeCurrentSize + int8b0.fbeSize) <= fbeStructSize)
            fbeValue.int8b0 = int8b0.get(com.chronoxor.enums.EnumInt8.ENUM_VALUE_0)
        else
            fbeValue.int8b0 = com.chronoxor.enums.EnumInt8.ENUM_VALUE_0
        fbeCurrentSize += int8b0.fbeSize

        if ((fbeCurrentSize + int8b1.fbeSize) <= fbeStructSize)
            fbeValue.int8b1 = int8b1.get(com.chronoxor.enums.EnumInt8.ENUM_VALUE_1)
        else
            fbeValue.int8b1 = com.chronoxor.enums.EnumInt8.ENUM_VALUE_1
        fbeCurrentSize += int8b1.fbeSize

        if ((fbeCurrentSize + int8b2.fbeSize) <= fbeStructSize)
            fbeValue.int8b2 = int8b2.get(com.chronoxor.enums.EnumInt8.ENUM_VALUE_2)
        else
            fbeValue.int8b2 = com.chronoxor.enums.EnumInt8.ENUM_VALUE_2
        fbeCurrentSize += int8b2.fbeSize

        if ((fbeCurrentSize + int8b3.fbeSize) <= fbeStructSize)
            fbeValue.int8b3 = int8b3.get(com.chronoxor.enums.EnumInt8.ENUM_VALUE_3)
        else
            fbeValue.int8b3 = com.chronoxor.enums.EnumInt8.ENUM_VALUE_3
        fbeCurrentSize += int8b3.fbeSize

        if ((fbeCurrentSize + int8b4.fbeSize) <= fbeStructSize)
            fbeValue.int8b4 = int8b4.get(com.chronoxor.enums.EnumInt8.ENUM_VALUE_4)
        else
            fbeValue.int8b4 = com.chronoxor.enums.EnumInt8.ENUM_VALUE_4
        fbeCurrentSize += int8b4.fbeSize

        if ((fbeCurrentSize + int8b5.fbeSize) <= fbeStructSize)
            fbeValue.int8b5 = int8b5.get(com.chronoxor.enums.EnumInt8.ENUM_VALUE_5)
        else
            fbeValue.int8b5 = com.chronoxor.enums.EnumInt8.ENUM_VALUE_5
        fbeCurrentSize += int8b5.fbeSize

        if ((fbeCurrentSize + uint8b0.fbeSize) <= fbeStructSize)
            fbeValue.uint8b0 = uint8b0.get(com.chronoxor.enums.EnumUInt8.ENUM_VALUE_0)
        else
            fbeValue.uint8b0 = com.chronoxor.enums.EnumUInt8.ENUM_VALUE_0
        fbeCurrentSize += uint8b0.fbeSize

        if ((fbeCurrentSize + uint8b1.fbeSize) <= fbeStructSize)
            fbeValue.uint8b1 = uint8b1.get(com.chronoxor.enums.EnumUInt8.ENUM_VALUE_1)
        else
            fbeValue.uint8b1 = com.chronoxor.enums.EnumUInt8.ENUM_VALUE_1
        fbeCurrentSize += uint8b1.fbeSize

        if ((fbeCurrentSize + uint8b2.fbeSize) <= fbeStructSize)
            fbeValue.uint8b2 = uint8b2.get(com.chronoxor.enums.EnumUInt8.ENUM_VALUE_2)
        else
            fbeValue.uint8b2 = com.chronoxor.enums.EnumUInt8.ENUM_VALUE_2
        fbeCurrentSize += uint8b2.fbeSize

        if ((fbeCurrentSize + uint8b3.fbeSize) <= fbeStructSize)
            fbeValue.uint8b3 = uint8b3.get(com.chronoxor.enums.EnumUInt8.ENUM_VALUE_3)
        else
            fbeValue.uint8b3 = com.chronoxor.enums.EnumUInt8.ENUM_VALUE_3
        fbeCurrentSize += uint8b3.fbeSize

        if ((fbeCurrentSize + uint8b4.fbeSize) <= fbeStructSize)
            fbeValue.uint8b4 = uint8b4.get(com.chronoxor.enums.EnumUInt8.ENUM_VALUE_4)
        else
            fbeValue.uint8b4 = com.chronoxor.enums.EnumUInt8.ENUM_VALUE_4
        fbeCurrentSize += uint8b4.fbeSize

        if ((fbeCurrentSize + uint8b5.fbeSize) <= fbeStructSize)
            fbeValue.uint8b5 = uint8b5.get(com.chronoxor.enums.EnumUInt8.ENUM_VALUE_5)
        else
            fbeValue.uint8b5 = com.chronoxor.enums.EnumUInt8.ENUM_VALUE_5
        fbeCurrentSize += uint8b5.fbeSize

        if ((fbeCurrentSize + int16b0.fbeSize) <= fbeStructSize)
            fbeValue.int16b0 = int16b0.get(com.chronoxor.enums.EnumInt16.ENUM_VALUE_0)
        else
            fbeValue.int16b0 = com.chronoxor.enums.EnumInt16.ENUM_VALUE_0
        fbeCurrentSize += int16b0.fbeSize

        if ((fbeCurrentSize + int16b1.fbeSize) <= fbeStructSize)
            fbeValue.int16b1 = int16b1.get(com.chronoxor.enums.EnumInt16.ENUM_VALUE_1)
        else
            fbeValue.int16b1 = com.chronoxor.enums.EnumInt16.ENUM_VALUE_1
        fbeCurrentSize += int16b1.fbeSize

        if ((fbeCurrentSize + int16b2.fbeSize) <= fbeStructSize)
            fbeValue.int16b2 = int16b2.get(com.chronoxor.enums.EnumInt16.ENUM_VALUE_2)
        else
            fbeValue.int16b2 = com.chronoxor.enums.EnumInt16.ENUM_VALUE_2
        fbeCurrentSize += int16b2.fbeSize

        if ((fbeCurrentSize + int16b3.fbeSize) <= fbeStructSize)
            fbeValue.int16b3 = int16b3.get(com.chronoxor.enums.EnumInt16.ENUM_VALUE_3)
        else
            fbeValue.int16b3 = com.chronoxor.enums.EnumInt16.ENUM_VALUE_3
        fbeCurrentSize += int16b3.fbeSize

        if ((fbeCurrentSize + int16b4.fbeSize) <= fbeStructSize)
            fbeValue.int16b4 = int16b4.get(com.chronoxor.enums.EnumInt16.ENUM_VALUE_4)
        else
            fbeValue.int16b4 = com.chronoxor.enums.EnumInt16.ENUM_VALUE_4
        fbeCurrentSize += int16b4.fbeSize

        if ((fbeCurrentSize + int16b5.fbeSize) <= fbeStructSize)
            fbeValue.int16b5 = int16b5.get(com.chronoxor.enums.EnumInt16.ENUM_VALUE_5)
        else
            fbeValue.int16b5 = com.chronoxor.enums.EnumInt16.ENUM_VALUE_5
        fbeCurrentSize += int16b5.fbeSize

        if ((fbeCurrentSize + uint16b0.fbeSize) <= fbeStructSize)
            fbeValue.uint16b0 = uint16b0.get(com.chronoxor.enums.EnumUInt16.ENUM_VALUE_0)
        else
            fbeValue.uint16b0 = com.chronoxor.enums.EnumUInt16.ENUM_VALUE_0
        fbeCurrentSize += uint16b0.fbeSize

        if ((fbeCurrentSize + uint16b1.fbeSize) <= fbeStructSize)
            fbeValue.uint16b1 = uint16b1.get(com.chronoxor.enums.EnumUInt16.ENUM_VALUE_1)
        else
            fbeValue.uint16b1 = com.chronoxor.enums.EnumUInt16.ENUM_VALUE_1
        fbeCurrentSize += uint16b1.fbeSize

        if ((fbeCurrentSize + uint16b2.fbeSize) <= fbeStructSize)
            fbeValue.uint16b2 = uint16b2.get(com.chronoxor.enums.EnumUInt16.ENUM_VALUE_2)
        else
            fbeValue.uint16b2 = com.chronoxor.enums.EnumUInt16.ENUM_VALUE_2
        fbeCurrentSize += uint16b2.fbeSize

        if ((fbeCurrentSize + uint16b3.fbeSize) <= fbeStructSize)
            fbeValue.uint16b3 = uint16b3.get(com.chronoxor.enums.EnumUInt16.ENUM_VALUE_3)
        else
            fbeValue.uint16b3 = com.chronoxor.enums.EnumUInt16.ENUM_VALUE_3
        fbeCurrentSize += uint16b3.fbeSize

        if ((fbeCurrentSize + uint16b4.fbeSize) <= fbeStructSize)
            fbeValue.uint16b4 = uint16b4.get(com.chronoxor.enums.EnumUInt16.ENUM_VALUE_4)
        else
            fbeValue.uint16b4 = com.chronoxor.enums.EnumUInt16.ENUM_VALUE_4
        fbeCurrentSize += uint16b4.fbeSize

        if ((fbeCurrentSize + uint16b5.fbeSize) <= fbeStructSize)
            fbeValue.uint16b5 = uint16b5.get(com.chronoxor.enums.EnumUInt16.ENUM_VALUE_5)
        else
            fbeValue.uint16b5 = com.chronoxor.enums.EnumUInt16.ENUM_VALUE_5
        fbeCurrentSize += uint16b5.fbeSize

        if ((fbeCurrentSize + int32b0.fbeSize) <= fbeStructSize)
            fbeValue.int32b0 = int32b0.get(com.chronoxor.enums.EnumInt32.ENUM_VALUE_0)
        else
            fbeValue.int32b0 = com.chronoxor.enums.EnumInt32.ENUM_VALUE_0
        fbeCurrentSize += int32b0.fbeSize

        if ((fbeCurrentSize + int32b1.fbeSize) <= fbeStructSize)
            fbeValue.int32b1 = int32b1.get(com.chronoxor.enums.EnumInt32.ENUM_VALUE_1)
        else
            fbeValue.int32b1 = com.chronoxor.enums.EnumInt32.ENUM_VALUE_1
        fbeCurrentSize += int32b1.fbeSize

        if ((fbeCurrentSize + int32b2.fbeSize) <= fbeStructSize)
            fbeValue.int32b2 = int32b2.get(com.chronoxor.enums.EnumInt32.ENUM_VALUE_2)
        else
            fbeValue.int32b2 = com.chronoxor.enums.EnumInt32.ENUM_VALUE_2
        fbeCurrentSize += int32b2.fbeSize

        if ((fbeCurrentSize + int32b3.fbeSize) <= fbeStructSize)
            fbeValue.int32b3 = int32b3.get(com.chronoxor.enums.EnumInt32.ENUM_VALUE_3)
        else
            fbeValue.int32b3 = com.chronoxor.enums.EnumInt32.ENUM_VALUE_3
        fbeCurrentSize += int32b3.fbeSize

        if ((fbeCurrentSize + int32b4.fbeSize) <= fbeStructSize)
            fbeValue.int32b4 = int32b4.get(com.chronoxor.enums.EnumInt32.ENUM_VALUE_4)
        else
            fbeValue.int32b4 = com.chronoxor.enums.EnumInt32.ENUM_VALUE_4
        fbeCurrentSize += int32b4.fbeSize

        if ((fbeCurrentSize + int32b5.fbeSize) <= fbeStructSize)
            fbeValue.int32b5 = int32b5.get(com.chronoxor.enums.EnumInt32.ENUM_VALUE_5)
        else
            fbeValue.int32b5 = com.chronoxor.enums.EnumInt32.ENUM_VALUE_5
        fbeCurrentSize += int32b5.fbeSize

        if ((fbeCurrentSize + uint32b0.fbeSize) <= fbeStructSize)
            fbeValue.uint32b0 = uint32b0.get(com.chronoxor.enums.EnumUInt32.ENUM_VALUE_0)
        else
            fbeValue.uint32b0 = com.chronoxor.enums.EnumUInt32.ENUM_VALUE_0
        fbeCurrentSize += uint32b0.fbeSize

        if ((fbeCurrentSize + uint32b1.fbeSize) <= fbeStructSize)
            fbeValue.uint32b1 = uint32b1.get(com.chronoxor.enums.EnumUInt32.ENUM_VALUE_1)
        else
            fbeValue.uint32b1 = com.chronoxor.enums.EnumUInt32.ENUM_VALUE_1
        fbeCurrentSize += uint32b1.fbeSize

        if ((fbeCurrentSize + uint32b2.fbeSize) <= fbeStructSize)
            fbeValue.uint32b2 = uint32b2.get(com.chronoxor.enums.EnumUInt32.ENUM_VALUE_2)
        else
            fbeValue.uint32b2 = com.chronoxor.enums.EnumUInt32.ENUM_VALUE_2
        fbeCurrentSize += uint32b2.fbeSize

        if ((fbeCurrentSize + uint32b3.fbeSize) <= fbeStructSize)
            fbeValue.uint32b3 = uint32b3.get(com.chronoxor.enums.EnumUInt32.ENUM_VALUE_3)
        else
            fbeValue.uint32b3 = com.chronoxor.enums.EnumUInt32.ENUM_VALUE_3
        fbeCurrentSize += uint32b3.fbeSize

        if ((fbeCurrentSize + uint32b4.fbeSize) <= fbeStructSize)
            fbeValue.uint32b4 = uint32b4.get(com.chronoxor.enums.EnumUInt32.ENUM_VALUE_4)
        else
            fbeValue.uint32b4 = com.chronoxor.enums.EnumUInt32.ENUM_VALUE_4
        fbeCurrentSize += uint32b4.fbeSize

        if ((fbeCurrentSize + uint32b5.fbeSize) <= fbeStructSize)
            fbeValue.uint32b5 = uint32b5.get(com.chronoxor.enums.EnumUInt32.ENUM_VALUE_5)
        else
            fbeValue.uint32b5 = com.chronoxor.enums.EnumUInt32.ENUM_VALUE_5
        fbeCurrentSize += uint32b5.fbeSize

        if ((fbeCurrentSize + int64b0.fbeSize) <= fbeStructSize)
            fbeValue.int64b0 = int64b0.get(com.chronoxor.enums.EnumInt64.ENUM_VALUE_0)
        else
            fbeValue.int64b0 = com.chronoxor.enums.EnumInt64.ENUM_VALUE_0
        fbeCurrentSize += int64b0.fbeSize

        if ((fbeCurrentSize + int64b1.fbeSize) <= fbeStructSize)
            fbeValue.int64b1 = int64b1.get(com.chronoxor.enums.EnumInt64.ENUM_VALUE_1)
        else
            fbeValue.int64b1 = com.chronoxor.enums.EnumInt64.ENUM_VALUE_1
        fbeCurrentSize += int64b1.fbeSize

        if ((fbeCurrentSize + int64b2.fbeSize) <= fbeStructSize)
            fbeValue.int64b2 = int64b2.get(com.chronoxor.enums.EnumInt64.ENUM_VALUE_2)
        else
            fbeValue.int64b2 = com.chronoxor.enums.EnumInt64.ENUM_VALUE_2
        fbeCurrentSize += int64b2.fbeSize

        if ((fbeCurrentSize + int64b3.fbeSize) <= fbeStructSize)
            fbeValue.int64b3 = int64b3.get(com.chronoxor.enums.EnumInt64.ENUM_VALUE_3)
        else
            fbeValue.int64b3 = com.chronoxor.enums.EnumInt64.ENUM_VALUE_3
        fbeCurrentSize += int64b3.fbeSize

        if ((fbeCurrentSize + int64b4.fbeSize) <= fbeStructSize)
            fbeValue.int64b4 = int64b4.get(com.chronoxor.enums.EnumInt64.ENUM_VALUE_4)
        else
            fbeValue.int64b4 = com.chronoxor.enums.EnumInt64.ENUM_VALUE_4
        fbeCurrentSize += int64b4.fbeSize

        if ((fbeCurrentSize + int64b5.fbeSize) <= fbeStructSize)
            fbeValue.int64b5 = int64b5.get(com.chronoxor.enums.EnumInt64.ENUM_VALUE_5)
        else
            fbeValue.int64b5 = com.chronoxor.enums.EnumInt64.ENUM_VALUE_5
        fbeCurrentSize += int64b5.fbeSize

        if ((fbeCurrentSize + uint64b0.fbeSize) <= fbeStructSize)
            fbeValue.uint64b0 = uint64b0.get(com.chronoxor.enums.EnumUInt64.ENUM_VALUE_0)
        else
            fbeValue.uint64b0 = com.chronoxor.enums.EnumUInt64.ENUM_VALUE_0
        fbeCurrentSize += uint64b0.fbeSize

        if ((fbeCurrentSize + uint64b1.fbeSize) <= fbeStructSize)
            fbeValue.uint64b1 = uint64b1.get(com.chronoxor.enums.EnumUInt64.ENUM_VALUE_1)
        else
            fbeValue.uint64b1 = com.chronoxor.enums.EnumUInt64.ENUM_VALUE_1
        fbeCurrentSize += uint64b1.fbeSize

        if ((fbeCurrentSize + uint64b2.fbeSize) <= fbeStructSize)
            fbeValue.uint64b2 = uint64b2.get(com.chronoxor.enums.EnumUInt64.ENUM_VALUE_2)
        else
            fbeValue.uint64b2 = com.chronoxor.enums.EnumUInt64.ENUM_VALUE_2
        fbeCurrentSize += uint64b2.fbeSize

        if ((fbeCurrentSize + uint64b3.fbeSize) <= fbeStructSize)
            fbeValue.uint64b3 = uint64b3.get(com.chronoxor.enums.EnumUInt64.ENUM_VALUE_3)
        else
            fbeValue.uint64b3 = com.chronoxor.enums.EnumUInt64.ENUM_VALUE_3
        fbeCurrentSize += uint64b3.fbeSize

        if ((fbeCurrentSize + uint64b4.fbeSize) <= fbeStructSize)
            fbeValue.uint64b4 = uint64b4.get(com.chronoxor.enums.EnumUInt64.ENUM_VALUE_4)
        else
            fbeValue.uint64b4 = com.chronoxor.enums.EnumUInt64.ENUM_VALUE_4
        fbeCurrentSize += uint64b4.fbeSize

        if ((fbeCurrentSize + uint64b5.fbeSize) <= fbeStructSize)
            fbeValue.uint64b5 = uint64b5.get(com.chronoxor.enums.EnumUInt64.ENUM_VALUE_5)
        else
            fbeValue.uint64b5 = com.chronoxor.enums.EnumUInt64.ENUM_VALUE_5
        fbeCurrentSize += uint64b5.fbeSize
    }

    // Set the struct value (begin phase)
    fun setBegin(): Long
    {
        assert((_buffer.offset + fbeOffset + fbeSize) <= _buffer.size) { "Model is broken!" }
        if ((_buffer.offset + fbeOffset + fbeSize) > _buffer.size)
            return 0

        val fbeStructSize = fbeBody
        val fbeStructOffset = _buffer.allocate(fbeStructSize) - _buffer.offset
        assert((fbeStructOffset > 0) && ((_buffer.offset + fbeStructOffset + fbeStructSize) <= _buffer.size)) { "Model is broken!" }
        if ((fbeStructOffset <= 0) || ((_buffer.offset + fbeStructOffset + fbeStructSize) > _buffer.size))
            return 0

        write(fbeOffset, fbeStructOffset.toUInt())
        write(fbeStructOffset, fbeStructSize.toUInt())
        write(fbeStructOffset + 4, fbeType.toUInt())

        _buffer.shift(fbeStructOffset)
        return fbeStructOffset
    }

    // Set the struct value (end phase)
    fun setEnd(fbeBegin: Long)
    {
        _buffer.unshift(fbeBegin)
    }

    // Set the struct value
    fun set(fbeValue: com.chronoxor.enums.Enums)
    {
        val fbeBegin = setBegin()
        if (fbeBegin == 0L)
            return

        setFields(fbeValue)
        setEnd(fbeBegin)
    }

    // Set the struct fields values
    @Suppress("UNUSED_PARAMETER")
    fun setFields(fbeValue: com.chronoxor.enums.Enums)
    {
        byte0.set(fbeValue.byte0)
        byte1.set(fbeValue.byte1)
        byte2.set(fbeValue.byte2)
        byte3.set(fbeValue.byte3)
        byte4.set(fbeValue.byte4)
        byte5.set(fbeValue.byte5)
        char0.set(fbeValue.char0)
        char1.set(fbeValue.char1)
        char2.set(fbeValue.char2)
        char3.set(fbeValue.char3)
        char4.set(fbeValue.char4)
        char5.set(fbeValue.char5)
        wchar0.set(fbeValue.wchar0)
        wchar1.set(fbeValue.wchar1)
        wchar2.set(fbeValue.wchar2)
        wchar3.set(fbeValue.wchar3)
        wchar4.set(fbeValue.wchar4)
        wchar5.set(fbeValue.wchar5)
        int8b0.set(fbeValue.int8b0)
        int8b1.set(fbeValue.int8b1)
        int8b2.set(fbeValue.int8b2)
        int8b3.set(fbeValue.int8b3)
        int8b4.set(fbeValue.int8b4)
        int8b5.set(fbeValue.int8b5)
        uint8b0.set(fbeValue.uint8b0)
        uint8b1.set(fbeValue.uint8b1)
        uint8b2.set(fbeValue.uint8b2)
        uint8b3.set(fbeValue.uint8b3)
        uint8b4.set(fbeValue.uint8b4)
        uint8b5.set(fbeValue.uint8b5)
        int16b0.set(fbeValue.int16b0)
        int16b1.set(fbeValue.int16b1)
        int16b2.set(fbeValue.int16b2)
        int16b3.set(fbeValue.int16b3)
        int16b4.set(fbeValue.int16b4)
        int16b5.set(fbeValue.int16b5)
        uint16b0.set(fbeValue.uint16b0)
        uint16b1.set(fbeValue.uint16b1)
        uint16b2.set(fbeValue.uint16b2)
        uint16b3.set(fbeValue.uint16b3)
        uint16b4.set(fbeValue.uint16b4)
        uint16b5.set(fbeValue.uint16b5)
        int32b0.set(fbeValue.int32b0)
        int32b1.set(fbeValue.int32b1)
        int32b2.set(fbeValue.int32b2)
        int32b3.set(fbeValue.int32b3)
        int32b4.set(fbeValue.int32b4)
        int32b5.set(fbeValue.int32b5)
        uint32b0.set(fbeValue.uint32b0)
        uint32b1.set(fbeValue.uint32b1)
        uint32b2.set(fbeValue.uint32b2)
        uint32b3.set(fbeValue.uint32b3)
        uint32b4.set(fbeValue.uint32b4)
        uint32b5.set(fbeValue.uint32b5)
        int64b0.set(fbeValue.int64b0)
        int64b1.set(fbeValue.int64b1)
        int64b2.set(fbeValue.int64b2)
        int64b3.set(fbeValue.int64b3)
        int64b4.set(fbeValue.int64b4)
        int64b5.set(fbeValue.int64b5)
        uint64b0.set(fbeValue.uint64b0)
        uint64b1.set(fbeValue.uint64b1)
        uint64b2.set(fbeValue.uint64b2)
        uint64b3.set(fbeValue.uint64b3)
        uint64b4.set(fbeValue.uint64b4)
        uint64b5.set(fbeValue.uint64b5)
    }
}
