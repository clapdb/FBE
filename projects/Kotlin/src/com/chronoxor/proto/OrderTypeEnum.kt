//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.proto

@Suppress("EnumEntryName", "MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods")
enum class OrderTypeEnum
{
    market(0 + 0)
    , limit(0 + 1)
    , stop(0 + 2)
    ;

    var raw: Byte = 0
        private set

    constructor(value: Byte) { this.raw = value.toByte() }
    constructor(value: Short) { this.raw = value.toByte() }
    constructor(value: Int) { this.raw = value.toByte() }
    constructor(value: Long) { this.raw = value.toByte() }
    constructor(value: OrderTypeEnum) { this.raw = value.raw }

    override fun toString(): String
    {
        if (this == market) return "market"
        if (this == limit) return "limit"
        if (this == stop) return "stop"
        return "<unknown>"
    }

    companion object
    {
        private val mapping = java.util.HashMap<Byte, OrderTypeEnum>()

        init
        {
            for (value in OrderTypeEnum.values())
                mapping[value.raw] = value
        }

        fun mapValue(value: Byte): OrderTypeEnum? { return mapping[value] }
    }
}
