//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

@file:Suppress("UnusedImport", "unused")

package com.chronoxor.test

@Suppress("MemberVisibilityCanBePrivate", "RemoveRedundantCallsOfConversionMethods")
open class StructSimple : Comparable<Any?>
{
    var id: Int
    var f1: Boolean
    var f2: Boolean
    var f3: Byte
    var f4: Byte
    var f5: Char
    var f6: Char
    var f7: Char
    var f8: Char
    var f9: Byte
    var f10: Byte
    var f11: UByte
    var f12: UByte
    var f13: Short
    var f14: Short
    var f15: UShort
    var f16: UShort
    var f17: Int
    var f18: Int
    var f19: UInt
    var f20: UInt
    var f21: Long
    var f22: Long
    var f23: ULong
    var f24: ULong
    var f25: Float
    var f26: Float
    var f27: Double
    var f28: Double
    var f29: java.math.BigDecimal
    var f30: java.math.BigDecimal
    var f31: String
    var f32: String
    var f33: java.time.Instant
    var f34: java.time.Instant
    var f35: java.time.Instant
    var f36: java.util.UUID
    var f37: java.util.UUID
    var f38: java.util.UUID
    var f39: com.chronoxor.proto.OrderSide
    var f40: com.chronoxor.proto.OrderType
    var f41: com.chronoxor.proto.Order
    var f42: com.chronoxor.proto.Balance
    var f43: com.chronoxor.proto.State
    var f44: com.chronoxor.proto.Account

    @Transient open var fbeType: Long = 110

    constructor(id: Int = 0, f1: Boolean = false, f2: Boolean = true, f3: Byte = 0.toByte(), f4: Byte = 0xFF.toByte(), f5: Char = '\u0000', f6: Char = '!'.toChar(), f7: Char = '\u0000', f8: Char = 0x0444.toChar(), f9: Byte = 0.toByte(), f10: Byte = Byte.MAX_VALUE, f11: UByte = UByte.MIN_VALUE, f12: UByte = UByte.MAX_VALUE, f13: Short = 0.toShort(), f14: Short = Short.MAX_VALUE, f15: UShort = UShort.MIN_VALUE, f16: UShort = UShort.MAX_VALUE, f17: Int = 0, f18: Int = Int.MAX_VALUE, f19: UInt = UInt.MIN_VALUE, f20: UInt = UInt.MAX_VALUE, f21: Long = 0L, f22: Long = Long.MAX_VALUE, f23: ULong = ULong.MIN_VALUE, f24: ULong = ULong.MAX_VALUE, f25: Float = 0.0f, f26: Float = 123.456f, f27: Double = 0.0, f28: Double = -123.456e+123, f29: java.math.BigDecimal = java.math.BigDecimal.valueOf(0L), f30: java.math.BigDecimal = java.math.BigDecimal.valueOf(123456.123456), f31: String = "", f32: String = "Initial string!", f33: java.time.Instant = java.time.Instant.EPOCH, f34: java.time.Instant = java.time.Instant.EPOCH, f35: java.time.Instant = java.time.Instant.now(), f36: java.util.UUID = com.chronoxor.fbe.UUIDGenerator.nil(), f37: java.util.UUID = com.chronoxor.fbe.UUIDGenerator.sequential(), f38: java.util.UUID = java.util.UUID.fromString("123e4567-e89b-12d3-a456-426655440000"), f39: com.chronoxor.proto.OrderSide = com.chronoxor.proto.OrderSide(), f40: com.chronoxor.proto.OrderType = com.chronoxor.proto.OrderType(), f41: com.chronoxor.proto.Order = com.chronoxor.proto.Order(), f42: com.chronoxor.proto.Balance = com.chronoxor.proto.Balance(), f43: com.chronoxor.proto.State = com.chronoxor.proto.State(), f44: com.chronoxor.proto.Account = com.chronoxor.proto.Account())
    {
        this.id = id
        this.f1 = f1
        this.f2 = f2
        this.f3 = f3
        this.f4 = f4
        this.f5 = f5
        this.f6 = f6
        this.f7 = f7
        this.f8 = f8
        this.f9 = f9
        this.f10 = f10
        this.f11 = f11
        this.f12 = f12
        this.f13 = f13
        this.f14 = f14
        this.f15 = f15
        this.f16 = f16
        this.f17 = f17
        this.f18 = f18
        this.f19 = f19
        this.f20 = f20
        this.f21 = f21
        this.f22 = f22
        this.f23 = f23
        this.f24 = f24
        this.f25 = f25
        this.f26 = f26
        this.f27 = f27
        this.f28 = f28
        this.f29 = f29
        this.f30 = f30
        this.f31 = f31
        this.f32 = f32
        this.f33 = f33
        this.f34 = f34
        this.f35 = f35
        this.f36 = f36
        this.f37 = f37
        this.f38 = f38
        this.f39 = f39
        this.f40 = f40
        this.f41 = f41
        this.f42 = f42
        this.f43 = f43
        this.f44 = f44
    }

    @Suppress("UNUSED_PARAMETER")
    constructor(other: StructSimple)
    {
        this.id = other.id
        this.f1 = other.f1
        this.f2 = other.f2
        this.f3 = other.f3
        this.f4 = other.f4
        this.f5 = other.f5
        this.f6 = other.f6
        this.f7 = other.f7
        this.f8 = other.f8
        this.f9 = other.f9
        this.f10 = other.f10
        this.f11 = other.f11
        this.f12 = other.f12
        this.f13 = other.f13
        this.f14 = other.f14
        this.f15 = other.f15
        this.f16 = other.f16
        this.f17 = other.f17
        this.f18 = other.f18
        this.f19 = other.f19
        this.f20 = other.f20
        this.f21 = other.f21
        this.f22 = other.f22
        this.f23 = other.f23
        this.f24 = other.f24
        this.f25 = other.f25
        this.f26 = other.f26
        this.f27 = other.f27
        this.f28 = other.f28
        this.f29 = other.f29
        this.f30 = other.f30
        this.f31 = other.f31
        this.f32 = other.f32
        this.f33 = other.f33
        this.f34 = other.f34
        this.f35 = other.f35
        this.f36 = other.f36
        this.f37 = other.f37
        this.f38 = other.f38
        this.f39 = other.f39
        this.f40 = other.f40
        this.f41 = other.f41
        this.f42 = other.f42
        this.f43 = other.f43
        this.f44 = other.f44
    }

    open fun clone(): StructSimple
    {
        // Serialize the struct to the FBE stream
        val writer = com.chronoxor.test.fbe.StructSimpleModel()
        writer.serialize(this)

        // Deserialize the struct from the FBE stream
        val reader = com.chronoxor.test.fbe.StructSimpleModel()
        reader.attach(writer.buffer)
        return reader.deserialize()
    }

    override fun compareTo(other: Any?): Int
    {
        if (other == null)
            return -1

        if (!StructSimple::class.java.isAssignableFrom(other.javaClass))
            return -1

        @Suppress("UNUSED_VARIABLE")
        val obj = other as StructSimple? ?: return -1

        @Suppress("VARIABLE_WITH_REDUNDANT_INITIALIZER", "CanBeVal", "UnnecessaryVariable")
        var result = 0
        result = id.compareTo(obj.id)
        if (result != 0)
            return result
        return result
    }

    override fun equals(other: Any?): Boolean
    {
        if (other == null)
            return false

        if (!StructSimple::class.java.isAssignableFrom(other.javaClass))
            return false

        @Suppress("UNUSED_VARIABLE")
        val obj = other as StructSimple? ?: return false

        if (id != obj.id)
            return false
        return true
    }

    override fun hashCode(): Int
    {
        @Suppress("CanBeVal", "UnnecessaryVariable")
        var hash = 17
        hash = hash * 31 + id.hashCode()
        return hash
    }

    override fun toString(): String
    {
        val sb = StringBuilder()
        sb.append("StructSimple(")
        sb.append("id="); sb.append(id)
        sb.append(",f1="); sb.append(if (f1) "true" else "false")
        sb.append(",f2="); sb.append(if (f2) "true" else "false")
        sb.append(",f3="); sb.append(f3)
        sb.append(",f4="); sb.append(f4)
        sb.append(",f5="); sb.append("'").append(f5).append("'")
        sb.append(",f6="); sb.append("'").append(f6).append("'")
        sb.append(",f7="); sb.append("'").append(f7).append("'")
        sb.append(",f8="); sb.append("'").append(f8).append("'")
        sb.append(",f9="); sb.append(f9)
        sb.append(",f10="); sb.append(f10)
        sb.append(",f11="); sb.append(f11)
        sb.append(",f12="); sb.append(f12)
        sb.append(",f13="); sb.append(f13)
        sb.append(",f14="); sb.append(f14)
        sb.append(",f15="); sb.append(f15)
        sb.append(",f16="); sb.append(f16)
        sb.append(",f17="); sb.append(f17)
        sb.append(",f18="); sb.append(f18)
        sb.append(",f19="); sb.append(f19)
        sb.append(",f20="); sb.append(f20)
        sb.append(",f21="); sb.append(f21)
        sb.append(",f22="); sb.append(f22)
        sb.append(",f23="); sb.append(f23)
        sb.append(",f24="); sb.append(f24)
        sb.append(",f25="); sb.append(f25)
        sb.append(",f26="); sb.append(f26)
        sb.append(",f27="); sb.append(f27)
        sb.append(",f28="); sb.append(f28)
        sb.append(",f29="); sb.append(f29)
        sb.append(",f30="); sb.append(f30)
        sb.append(",f31="); sb.append("\"").append(f31).append("\"")
        sb.append(",f32="); sb.append("\"").append(f32).append("\"")
        sb.append(",f33="); sb.append(f33.epochSecond * 1000000000 + f33.nano)
        sb.append(",f34="); sb.append(f34.epochSecond * 1000000000 + f34.nano)
        sb.append(",f35="); sb.append(f35.epochSecond * 1000000000 + f35.nano)
        sb.append(",f36="); sb.append("\"").append(f36).append("\"")
        sb.append(",f37="); sb.append("\"").append(f37).append("\"")
        sb.append(",f38="); sb.append("\"").append(f38).append("\"")
        sb.append(",f39="); sb.append(f39)
        sb.append(",f40="); sb.append(f40)
        sb.append(",f41="); sb.append(f41)
        sb.append(",f42="); sb.append(f42)
        sb.append(",f43="); sb.append(f43)
        sb.append(",f44="); sb.append(f44)
        sb.append(")")
        return sb.toString()
    }

    open fun toJson(): String = com.chronoxor.test.fbe.Json.engine.toJson(this)

    companion object
    {
        const val fbeTypeConst: Long = 110
        fun fromJson(json: String): StructSimple = com.chronoxor.test.fbe.Json.engine.fromJson(json, StructSimple::class.java)
    }
}
