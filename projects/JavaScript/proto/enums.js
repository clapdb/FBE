//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

/* eslint-disable prefer-const,no-loss-of-precision */
'use strict'

const util = require('util')

const big = require('./big')
const int64 = require('./int64')
const uuid = require('./uuid')

const Big = big.Big // eslint-disable-line
const Int64 = int64.Int64 // eslint-disable-line
const UInt64 = int64.UInt64 // eslint-disable-line
const UUID = uuid.UUID // eslint-disable-line

const fbe = require('./fbe')

/**
 * EnumByte enum
 */
class EnumByte {
  /**
   * Initialize enum with a given value
   * @param {EnumByte|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumByte) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumByte}
   * @param {!EnumByte} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumByte)) {
      throw new TypeError('Instance of EnumByte is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumByte}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumByte}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumByte.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumByte.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumByte.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumByte.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumByte.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumByte.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumByte}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumByte}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumByte} Created enum
   */
  static fromObject (other) {
    return new EnumByte(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumByte.ENUM_VALUE_0 = new EnumByte(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumByte.ENUM_VALUE_1 = new EnumByte(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumByte.ENUM_VALUE_2 = new EnumByte(0 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumByte.ENUM_VALUE_3 = new EnumByte(254 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumByte.ENUM_VALUE_4 = new EnumByte(254 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumByte.ENUM_VALUE_5 = new EnumByte(EnumByte.ENUM_VALUE_3)

exports.EnumByte = EnumByte

/**
 * Fast Binary Encoding EnumByte field model
 */
class FieldModelEnumByte extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumByte}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Get the value
   * @this {!FieldModelEnumByte}
   * @param {EnumByte=} defaults Default value, defaults is new EnumByte()
   * @returns {!EnumByte} Result value
   */
  get (defaults = new EnumByte()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumByte(this.readByte(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumByte}
   * @param {!EnumByte} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeByte(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumByte = FieldModelEnumByte

/**
 * Fast Binary Encoding EnumByte final model
 */
class FinalModelEnumByte extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumByte}
   * @param {!EnumByte} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumByte}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumByte}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumByte}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumByte(), size: 0 }
    }

    return { value: new EnumByte(this.readByte(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumByte}
   * @param {!EnumByte} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeByte(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumByte = FinalModelEnumByte

/**
 * EnumChar enum
 */
class EnumChar {
  /**
   * Initialize enum with a given value
   * @param {EnumChar|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumChar) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumChar}
   * @param {!EnumChar} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumChar)) {
      throw new TypeError('Instance of EnumChar is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumChar}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumChar}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumChar.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumChar.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumChar.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumChar.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumChar.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumChar.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumChar}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumChar}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumChar} Created enum
   */
  static fromObject (other) {
    return new EnumChar(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumChar.ENUM_VALUE_0 = new EnumChar(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumChar.ENUM_VALUE_1 = new EnumChar('1'.charCodeAt(0) + 0)
// noinspection PointlessArithmeticExpressionJS
EnumChar.ENUM_VALUE_2 = new EnumChar('1'.charCodeAt(0) + 1)
// noinspection PointlessArithmeticExpressionJS
EnumChar.ENUM_VALUE_3 = new EnumChar('3'.charCodeAt(0) + 0)
// noinspection PointlessArithmeticExpressionJS
EnumChar.ENUM_VALUE_4 = new EnumChar('3'.charCodeAt(0) + 1)
// noinspection PointlessArithmeticExpressionJS
EnumChar.ENUM_VALUE_5 = new EnumChar(EnumChar.ENUM_VALUE_3)

exports.EnumChar = EnumChar

/**
 * Fast Binary Encoding EnumChar field model
 */
class FieldModelEnumChar extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumChar}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Get the value
   * @this {!FieldModelEnumChar}
   * @param {EnumChar=} defaults Default value, defaults is new EnumChar()
   * @returns {!EnumChar} Result value
   */
  get (defaults = new EnumChar()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumChar(this.readUInt8(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumChar}
   * @param {!EnumChar} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeUInt8(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumChar = FieldModelEnumChar

/**
 * Fast Binary Encoding EnumChar final model
 */
class FinalModelEnumChar extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumChar}
   * @param {!EnumChar} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumChar}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumChar}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumChar}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumChar(), size: 0 }
    }

    return { value: new EnumChar(this.readUInt8(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumChar}
   * @param {!EnumChar} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeUInt8(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumChar = FinalModelEnumChar

/**
 * EnumWChar enum
 */
class EnumWChar {
  /**
   * Initialize enum with a given value
   * @param {EnumWChar|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumWChar) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumWChar}
   * @param {!EnumWChar} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumWChar)) {
      throw new TypeError('Instance of EnumWChar is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumWChar}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumWChar}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumWChar.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumWChar.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumWChar.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumWChar.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumWChar.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumWChar.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumWChar}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumWChar}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumWChar} Created enum
   */
  static fromObject (other) {
    return new EnumWChar(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumWChar.ENUM_VALUE_0 = new EnumWChar(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumWChar.ENUM_VALUE_1 = new EnumWChar(0x0444 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumWChar.ENUM_VALUE_2 = new EnumWChar(0x0444 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumWChar.ENUM_VALUE_3 = new EnumWChar(0x0555 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumWChar.ENUM_VALUE_4 = new EnumWChar(0x0555 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumWChar.ENUM_VALUE_5 = new EnumWChar(EnumWChar.ENUM_VALUE_3)

exports.EnumWChar = EnumWChar

/**
 * Fast Binary Encoding EnumWChar field model
 */
class FieldModelEnumWChar extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumWChar}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Get the value
   * @this {!FieldModelEnumWChar}
   * @param {EnumWChar=} defaults Default value, defaults is new EnumWChar()
   * @returns {!EnumWChar} Result value
   */
  get (defaults = new EnumWChar()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumWChar(this.readUInt32(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumWChar}
   * @param {!EnumWChar} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeUInt32(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumWChar = FieldModelEnumWChar

/**
 * Fast Binary Encoding EnumWChar final model
 */
class FinalModelEnumWChar extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumWChar}
   * @param {!EnumWChar} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumWChar}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumWChar}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumWChar}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumWChar(), size: 0 }
    }

    return { value: new EnumWChar(this.readUInt32(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumWChar}
   * @param {!EnumWChar} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeUInt32(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumWChar = FinalModelEnumWChar

/**
 * EnumInt8 enum
 */
class EnumInt8 {
  /**
   * Initialize enum with a given value
   * @param {EnumInt8|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumInt8) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumInt8}
   * @param {!EnumInt8} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumInt8)) {
      throw new TypeError('Instance of EnumInt8 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumInt8}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumInt8}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumInt8.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumInt8.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumInt8.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumInt8.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumInt8.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumInt8.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumInt8}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumInt8}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumInt8} Created enum
   */
  static fromObject (other) {
    return new EnumInt8(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumInt8.ENUM_VALUE_0 = new EnumInt8(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt8.ENUM_VALUE_1 = new EnumInt8(-128 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt8.ENUM_VALUE_2 = new EnumInt8(-128 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt8.ENUM_VALUE_3 = new EnumInt8(126 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt8.ENUM_VALUE_4 = new EnumInt8(126 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt8.ENUM_VALUE_5 = new EnumInt8(EnumInt8.ENUM_VALUE_3)

exports.EnumInt8 = EnumInt8

/**
 * Fast Binary Encoding EnumInt8 field model
 */
class FieldModelEnumInt8 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumInt8}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt8}
   * @param {EnumInt8=} defaults Default value, defaults is new EnumInt8()
   * @returns {!EnumInt8} Result value
   */
  get (defaults = new EnumInt8()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumInt8(this.readInt8(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt8}
   * @param {!EnumInt8} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeInt8(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumInt8 = FieldModelEnumInt8

/**
 * Fast Binary Encoding EnumInt8 final model
 */
class FinalModelEnumInt8 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumInt8}
   * @param {!EnumInt8} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumInt8}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumInt8}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt8}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumInt8(), size: 0 }
    }

    return { value: new EnumInt8(this.readInt8(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt8}
   * @param {!EnumInt8} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeInt8(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumInt8 = FinalModelEnumInt8

/**
 * EnumUInt8 enum
 */
class EnumUInt8 {
  /**
   * Initialize enum with a given value
   * @param {EnumUInt8|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumUInt8) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumUInt8}
   * @param {!EnumUInt8} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumUInt8)) {
      throw new TypeError('Instance of EnumUInt8 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumUInt8}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumUInt8}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumUInt8.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumUInt8.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumUInt8.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumUInt8.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumUInt8.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumUInt8.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumUInt8}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumUInt8}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumUInt8} Created enum
   */
  static fromObject (other) {
    return new EnumUInt8(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumUInt8.ENUM_VALUE_0 = new EnumUInt8(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt8.ENUM_VALUE_1 = new EnumUInt8(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt8.ENUM_VALUE_2 = new EnumUInt8(0 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt8.ENUM_VALUE_3 = new EnumUInt8(254 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt8.ENUM_VALUE_4 = new EnumUInt8(254 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt8.ENUM_VALUE_5 = new EnumUInt8(EnumUInt8.ENUM_VALUE_3)

exports.EnumUInt8 = EnumUInt8

/**
 * Fast Binary Encoding EnumUInt8 field model
 */
class FieldModelEnumUInt8 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumUInt8}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt8}
   * @param {EnumUInt8=} defaults Default value, defaults is new EnumUInt8()
   * @returns {!EnumUInt8} Result value
   */
  get (defaults = new EnumUInt8()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumUInt8(this.readUInt8(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt8}
   * @param {!EnumUInt8} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeUInt8(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumUInt8 = FieldModelEnumUInt8

/**
 * Fast Binary Encoding EnumUInt8 final model
 */
class FinalModelEnumUInt8 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumUInt8}
   * @param {!EnumUInt8} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumUInt8}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 1
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumUInt8}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt8}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumUInt8(), size: 0 }
    }

    return { value: new EnumUInt8(this.readUInt8(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt8}
   * @param {!EnumUInt8} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeUInt8(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumUInt8 = FinalModelEnumUInt8

/**
 * EnumInt16 enum
 */
class EnumInt16 {
  /**
   * Initialize enum with a given value
   * @param {EnumInt16|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumInt16) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumInt16}
   * @param {!EnumInt16} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumInt16)) {
      throw new TypeError('Instance of EnumInt16 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumInt16}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumInt16}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumInt16.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumInt16.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumInt16.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumInt16.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumInt16.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumInt16.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumInt16}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumInt16}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumInt16} Created enum
   */
  static fromObject (other) {
    return new EnumInt16(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumInt16.ENUM_VALUE_0 = new EnumInt16(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt16.ENUM_VALUE_1 = new EnumInt16(-32768 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt16.ENUM_VALUE_2 = new EnumInt16(-32768 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt16.ENUM_VALUE_3 = new EnumInt16(32766 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt16.ENUM_VALUE_4 = new EnumInt16(32766 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt16.ENUM_VALUE_5 = new EnumInt16(EnumInt16.ENUM_VALUE_3)

exports.EnumInt16 = EnumInt16

/**
 * Fast Binary Encoding EnumInt16 field model
 */
class FieldModelEnumInt16 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumInt16}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 2
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt16}
   * @param {EnumInt16=} defaults Default value, defaults is new EnumInt16()
   * @returns {!EnumInt16} Result value
   */
  get (defaults = new EnumInt16()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumInt16(this.readInt16(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt16}
   * @param {!EnumInt16} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeInt16(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumInt16 = FieldModelEnumInt16

/**
 * Fast Binary Encoding EnumInt16 final model
 */
class FinalModelEnumInt16 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumInt16}
   * @param {!EnumInt16} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumInt16}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 2
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumInt16}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt16}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumInt16(), size: 0 }
    }

    return { value: new EnumInt16(this.readInt16(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt16}
   * @param {!EnumInt16} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeInt16(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumInt16 = FinalModelEnumInt16

/**
 * EnumUInt16 enum
 */
class EnumUInt16 {
  /**
   * Initialize enum with a given value
   * @param {EnumUInt16|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumUInt16) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumUInt16}
   * @param {!EnumUInt16} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumUInt16)) {
      throw new TypeError('Instance of EnumUInt16 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumUInt16}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumUInt16}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumUInt16.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumUInt16.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumUInt16.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumUInt16.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumUInt16.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumUInt16.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumUInt16}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumUInt16}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumUInt16} Created enum
   */
  static fromObject (other) {
    return new EnumUInt16(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumUInt16.ENUM_VALUE_0 = new EnumUInt16(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt16.ENUM_VALUE_1 = new EnumUInt16(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt16.ENUM_VALUE_2 = new EnumUInt16(0 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt16.ENUM_VALUE_3 = new EnumUInt16(65534 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt16.ENUM_VALUE_4 = new EnumUInt16(65534 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt16.ENUM_VALUE_5 = new EnumUInt16(EnumUInt16.ENUM_VALUE_3)

exports.EnumUInt16 = EnumUInt16

/**
 * Fast Binary Encoding EnumUInt16 field model
 */
class FieldModelEnumUInt16 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumUInt16}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 2
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt16}
   * @param {EnumUInt16=} defaults Default value, defaults is new EnumUInt16()
   * @returns {!EnumUInt16} Result value
   */
  get (defaults = new EnumUInt16()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumUInt16(this.readUInt16(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt16}
   * @param {!EnumUInt16} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeUInt16(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumUInt16 = FieldModelEnumUInt16

/**
 * Fast Binary Encoding EnumUInt16 final model
 */
class FinalModelEnumUInt16 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumUInt16}
   * @param {!EnumUInt16} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumUInt16}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 2
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumUInt16}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt16}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumUInt16(), size: 0 }
    }

    return { value: new EnumUInt16(this.readUInt16(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt16}
   * @param {!EnumUInt16} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeUInt16(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumUInt16 = FinalModelEnumUInt16

/**
 * EnumInt32 enum
 */
class EnumInt32 {
  /**
   * Initialize enum with a given value
   * @param {EnumInt32|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumInt32) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumInt32}
   * @param {!EnumInt32} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumInt32)) {
      throw new TypeError('Instance of EnumInt32 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumInt32}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumInt32}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumInt32.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumInt32.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumInt32.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumInt32.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumInt32.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumInt32.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumInt32}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumInt32}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumInt32} Created enum
   */
  static fromObject (other) {
    return new EnumInt32(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumInt32.ENUM_VALUE_0 = new EnumInt32(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt32.ENUM_VALUE_1 = new EnumInt32(-2147483648 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt32.ENUM_VALUE_2 = new EnumInt32(-2147483648 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt32.ENUM_VALUE_3 = new EnumInt32(2147483646 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt32.ENUM_VALUE_4 = new EnumInt32(2147483646 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt32.ENUM_VALUE_5 = new EnumInt32(EnumInt32.ENUM_VALUE_3)

exports.EnumInt32 = EnumInt32

/**
 * Fast Binary Encoding EnumInt32 field model
 */
class FieldModelEnumInt32 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumInt32}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt32}
   * @param {EnumInt32=} defaults Default value, defaults is new EnumInt32()
   * @returns {!EnumInt32} Result value
   */
  get (defaults = new EnumInt32()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumInt32(this.readInt32(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt32}
   * @param {!EnumInt32} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeInt32(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumInt32 = FieldModelEnumInt32

/**
 * Fast Binary Encoding EnumInt32 final model
 */
class FinalModelEnumInt32 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumInt32}
   * @param {!EnumInt32} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumInt32}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumInt32}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt32}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumInt32(), size: 0 }
    }

    return { value: new EnumInt32(this.readInt32(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt32}
   * @param {!EnumInt32} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeInt32(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumInt32 = FinalModelEnumInt32

/**
 * EnumUInt32 enum
 */
class EnumUInt32 {
  /**
   * Initialize enum with a given value
   * @param {EnumUInt32|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumUInt32) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumUInt32}
   * @param {!EnumUInt32} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumUInt32)) {
      throw new TypeError('Instance of EnumUInt32 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumUInt32}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumUInt32}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumUInt32.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumUInt32.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumUInt32.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumUInt32.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumUInt32.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumUInt32.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumUInt32}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumUInt32}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumUInt32} Created enum
   */
  static fromObject (other) {
    return new EnumUInt32(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumUInt32.ENUM_VALUE_0 = new EnumUInt32(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt32.ENUM_VALUE_1 = new EnumUInt32(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt32.ENUM_VALUE_2 = new EnumUInt32(0 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt32.ENUM_VALUE_3 = new EnumUInt32(0xFFFFFFFE + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt32.ENUM_VALUE_4 = new EnumUInt32(0xFFFFFFFE + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt32.ENUM_VALUE_5 = new EnumUInt32(EnumUInt32.ENUM_VALUE_3)

exports.EnumUInt32 = EnumUInt32

/**
 * Fast Binary Encoding EnumUInt32 field model
 */
class FieldModelEnumUInt32 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumUInt32}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt32}
   * @param {EnumUInt32=} defaults Default value, defaults is new EnumUInt32()
   * @returns {!EnumUInt32} Result value
   */
  get (defaults = new EnumUInt32()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumUInt32(this.readUInt32(this.fbeOffset))
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt32}
   * @param {!EnumUInt32} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeUInt32(this.fbeOffset, value.value)
  }
}

exports.FieldModelEnumUInt32 = FieldModelEnumUInt32

/**
 * Fast Binary Encoding EnumUInt32 final model
 */
class FinalModelEnumUInt32 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumUInt32}
   * @param {!EnumUInt32} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumUInt32}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumUInt32}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt32}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumUInt32(), size: 0 }
    }

    return { value: new EnumUInt32(this.readUInt32(this.fbeOffset)), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt32}
   * @param {!EnumUInt32} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeUInt32(this.fbeOffset, value.value)
    return this.fbeSize
  }
}

exports.FinalModelEnumUInt32 = FinalModelEnumUInt32

/**
 * EnumInt64 enum
 */
class EnumInt64 {
  /**
   * Initialize enum with a given value
   * @param {EnumInt64|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumInt64) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumInt64}
   * @param {!EnumInt64} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumInt64)) {
      throw new TypeError('Instance of EnumInt64 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumInt64}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumInt64}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumInt64.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumInt64.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumInt64.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumInt64.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumInt64.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumInt64.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumInt64}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumInt64}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumInt64} Created enum
   */
  static fromObject (other) {
    return new EnumInt64(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumInt64.ENUM_VALUE_0 = new EnumInt64(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt64.ENUM_VALUE_1 = new EnumInt64(-9223372036854775807 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt64.ENUM_VALUE_2 = new EnumInt64(-9223372036854775807 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt64.ENUM_VALUE_3 = new EnumInt64(9223372036854775806 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumInt64.ENUM_VALUE_4 = new EnumInt64(9223372036854775806 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumInt64.ENUM_VALUE_5 = new EnumInt64(EnumInt64.ENUM_VALUE_3)

exports.EnumInt64 = EnumInt64

/**
 * Fast Binary Encoding EnumInt64 field model
 */
class FieldModelEnumInt64 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumInt64}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 8
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt64}
   * @param {EnumInt64=} defaults Default value, defaults is new EnumInt64()
   * @returns {!EnumInt64} Result value
   */
  get (defaults = new EnumInt64()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumInt64(this.readInt64(this.fbeOffset).toNumber())
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt64}
   * @param {!EnumInt64} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeInt64(this.fbeOffset, Int64.fromNumber(value.value))
  }
}

exports.FieldModelEnumInt64 = FieldModelEnumInt64

/**
 * Fast Binary Encoding EnumInt64 final model
 */
class FinalModelEnumInt64 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumInt64}
   * @param {!EnumInt64} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumInt64}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 8
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumInt64}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumInt64}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumInt64(), size: 0 }
    }

    return { value: new EnumInt64(this.readInt64(this.fbeOffset).toNumber()), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumInt64}
   * @param {!EnumInt64} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeInt64(this.fbeOffset, Int64.fromNumber(value.value))
    return this.fbeSize
  }
}

exports.FinalModelEnumInt64 = FinalModelEnumInt64

/**
 * EnumUInt64 enum
 */
class EnumUInt64 {
  /**
   * Initialize enum with a given value
   * @param {EnumUInt64|number|Int64|UInt64=} value Enum value, defaults is 0
   * @constructor
   */
  constructor (value = 0) {
    if (value instanceof EnumUInt64) {
      this.value = value.value
    } else {
      this.value = value
    }
  }

  /**
   * Is this enum equal to other one?
   * @this {!EnumUInt64}
   * @param {!EnumUInt64} other Other enum
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof EnumUInt64)) {
      throw new TypeError('Instance of EnumUInt64 is required!')
    }
    return this.value === other.value
  }

  /**
   * Get enum value
   * @this {!EnumUInt64}
   * @returns {!number|!Int64|!UInt64} Enum value
   */
  valueOf () {
    return this.value
  }

  /**
   * Convert enum to string
   * @this {!EnumUInt64}
   * @returns {!string} Enum value string
   */
  toString () {
    if (this.value === EnumUInt64.ENUM_VALUE_0.value) {
      return 'ENUM_VALUE_0'
    }
    if (this.value === EnumUInt64.ENUM_VALUE_1.value) {
      return 'ENUM_VALUE_1'
    }
    if (this.value === EnumUInt64.ENUM_VALUE_2.value) {
      return 'ENUM_VALUE_2'
    }
    if (this.value === EnumUInt64.ENUM_VALUE_3.value) {
      return 'ENUM_VALUE_3'
    }
    if (this.value === EnumUInt64.ENUM_VALUE_4.value) {
      return 'ENUM_VALUE_4'
    }
    if (this.value === EnumUInt64.ENUM_VALUE_5.value) {
      return 'ENUM_VALUE_5'
    }
    return '<unknown>'
  }

  /**
   * Inspect enum
   * @this {!EnumUInt64}
   * @returns {!string} Enum value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert enum to JSON
   * @this {!EnumUInt64}
   * @returns {!number} Enum value for JSON
   */
  toJSON () {
    return this.value
  }

  /**
   * Create enum from object value
   * @param {!number} other Object value
   * @returns {!EnumUInt64} Created enum
   */
  static fromObject (other) {
    return new EnumUInt64(other)
  }
}

// noinspection PointlessArithmeticExpressionJS
EnumUInt64.ENUM_VALUE_0 = new EnumUInt64(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt64.ENUM_VALUE_1 = new EnumUInt64(0 + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt64.ENUM_VALUE_2 = new EnumUInt64(0 + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt64.ENUM_VALUE_3 = new EnumUInt64(0xFFFFFFFFFFFFFFFE + 0)
// noinspection PointlessArithmeticExpressionJS
EnumUInt64.ENUM_VALUE_4 = new EnumUInt64(0xFFFFFFFFFFFFFFFE + 1)
// noinspection PointlessArithmeticExpressionJS
EnumUInt64.ENUM_VALUE_5 = new EnumUInt64(EnumUInt64.ENUM_VALUE_3)

exports.EnumUInt64 = EnumUInt64

/**
 * Fast Binary Encoding EnumUInt64 field model
 */
class FieldModelEnumUInt64 extends fbe.FieldModel {
  /**
   * Get the field size
   * @this {!FieldModelEnumUInt64}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 8
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt64}
   * @param {EnumUInt64=} defaults Default value, defaults is new EnumUInt64()
   * @returns {!EnumUInt64} Result value
   */
  get (defaults = new EnumUInt64()) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return defaults
    }

    return new EnumUInt64(this.readUInt64(this.fbeOffset).toNumber())
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt64}
   * @param {!EnumUInt64} value Value
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return
    }

    this.writeUInt64(this.fbeOffset, UInt64.fromNumber(value.value))
  }
}

exports.FieldModelEnumUInt64 = FieldModelEnumUInt64

/**
 * Fast Binary Encoding EnumUInt64 final model
 */
class FinalModelEnumUInt64 extends fbe.FinalModel {
  /**
   * Get the allocation size
   * @this {!FinalModelEnumUInt64}
   * @param {!EnumUInt64} value Value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (value) {
    return this.fbeSize
  }

  /**
   * Get the final size
   * @this {!FieldModelEnumUInt64}
   * @returns {!number} Final size
   */
  get fbeSize () {
    return 8
  }

  /**
   * Check if the value is valid
   * @this {!FinalModelEnumUInt64}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return Number.MAX_SAFE_INTEGER
    }

    return this.fbeSize
  }

  /**
   * Get the value
   * @this {!FieldModelEnumUInt64}
   * @returns {!object} Result value and its size
   */
  get () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return { value: new EnumUInt64(), size: 0 }
    }

    return { value: new EnumUInt64(this.readUInt64(this.fbeOffset).toNumber()), size: this.fbeSize }
  }

  /**
   * Set the value
   * @this {!FieldModelEnumUInt64}
   * @param {!EnumUInt64} value Value
   * @returns {!number} Final model size
   */
  set (value) {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    this.writeUInt64(this.fbeOffset, UInt64.fromNumber(value.value))
    return this.fbeSize
  }
}

exports.FinalModelEnumUInt64 = FinalModelEnumUInt64

/**
 * Enums struct
 */
class Enums {
  /**
   * Initialize struct
   * @param {!EnumByte=} byte0
   * @param {!EnumByte=} byte1
   * @param {!EnumByte=} byte2
   * @param {!EnumByte=} byte3
   * @param {!EnumByte=} byte4
   * @param {!EnumByte=} byte5
   * @param {!EnumChar=} char0
   * @param {!EnumChar=} char1
   * @param {!EnumChar=} char2
   * @param {!EnumChar=} char3
   * @param {!EnumChar=} char4
   * @param {!EnumChar=} char5
   * @param {!EnumWChar=} wchar0
   * @param {!EnumWChar=} wchar1
   * @param {!EnumWChar=} wchar2
   * @param {!EnumWChar=} wchar3
   * @param {!EnumWChar=} wchar4
   * @param {!EnumWChar=} wchar5
   * @param {!EnumInt8=} int8b0
   * @param {!EnumInt8=} int8b1
   * @param {!EnumInt8=} int8b2
   * @param {!EnumInt8=} int8b3
   * @param {!EnumInt8=} int8b4
   * @param {!EnumInt8=} int8b5
   * @param {!EnumUInt8=} uint8b0
   * @param {!EnumUInt8=} uint8b1
   * @param {!EnumUInt8=} uint8b2
   * @param {!EnumUInt8=} uint8b3
   * @param {!EnumUInt8=} uint8b4
   * @param {!EnumUInt8=} uint8b5
   * @param {!EnumInt16=} int16b0
   * @param {!EnumInt16=} int16b1
   * @param {!EnumInt16=} int16b2
   * @param {!EnumInt16=} int16b3
   * @param {!EnumInt16=} int16b4
   * @param {!EnumInt16=} int16b5
   * @param {!EnumUInt16=} uint16b0
   * @param {!EnumUInt16=} uint16b1
   * @param {!EnumUInt16=} uint16b2
   * @param {!EnumUInt16=} uint16b3
   * @param {!EnumUInt16=} uint16b4
   * @param {!EnumUInt16=} uint16b5
   * @param {!EnumInt32=} int32b0
   * @param {!EnumInt32=} int32b1
   * @param {!EnumInt32=} int32b2
   * @param {!EnumInt32=} int32b3
   * @param {!EnumInt32=} int32b4
   * @param {!EnumInt32=} int32b5
   * @param {!EnumUInt32=} uint32b0
   * @param {!EnumUInt32=} uint32b1
   * @param {!EnumUInt32=} uint32b2
   * @param {!EnumUInt32=} uint32b3
   * @param {!EnumUInt32=} uint32b4
   * @param {!EnumUInt32=} uint32b5
   * @param {!EnumInt64=} int64b0
   * @param {!EnumInt64=} int64b1
   * @param {!EnumInt64=} int64b2
   * @param {!EnumInt64=} int64b3
   * @param {!EnumInt64=} int64b4
   * @param {!EnumInt64=} int64b5
   * @param {!EnumUInt64=} uint64b0
   * @param {!EnumUInt64=} uint64b1
   * @param {!EnumUInt64=} uint64b2
   * @param {!EnumUInt64=} uint64b3
   * @param {!EnumUInt64=} uint64b4
   * @param {!EnumUInt64=} uint64b5
   * @constructor
   */
  constructor (argbyte0 = new EnumByte(EnumByte.ENUM_VALUE_0), argbyte1 = new EnumByte(EnumByte.ENUM_VALUE_1), argbyte2 = new EnumByte(EnumByte.ENUM_VALUE_2), argbyte3 = new EnumByte(EnumByte.ENUM_VALUE_3), argbyte4 = new EnumByte(EnumByte.ENUM_VALUE_4), argbyte5 = new EnumByte(EnumByte.ENUM_VALUE_5), argchar0 = new EnumChar(EnumChar.ENUM_VALUE_0), argchar1 = new EnumChar(EnumChar.ENUM_VALUE_1), argchar2 = new EnumChar(EnumChar.ENUM_VALUE_2), argchar3 = new EnumChar(EnumChar.ENUM_VALUE_3), argchar4 = new EnumChar(EnumChar.ENUM_VALUE_4), argchar5 = new EnumChar(EnumChar.ENUM_VALUE_5), argwchar0 = new EnumWChar(EnumWChar.ENUM_VALUE_0), argwchar1 = new EnumWChar(EnumWChar.ENUM_VALUE_1), argwchar2 = new EnumWChar(EnumWChar.ENUM_VALUE_2), argwchar3 = new EnumWChar(EnumWChar.ENUM_VALUE_3), argwchar4 = new EnumWChar(EnumWChar.ENUM_VALUE_4), argwchar5 = new EnumWChar(EnumWChar.ENUM_VALUE_5), argint8b0 = new EnumInt8(EnumInt8.ENUM_VALUE_0), argint8b1 = new EnumInt8(EnumInt8.ENUM_VALUE_1), argint8b2 = new EnumInt8(EnumInt8.ENUM_VALUE_2), argint8b3 = new EnumInt8(EnumInt8.ENUM_VALUE_3), argint8b4 = new EnumInt8(EnumInt8.ENUM_VALUE_4), argint8b5 = new EnumInt8(EnumInt8.ENUM_VALUE_5), arguint8b0 = new EnumUInt8(EnumUInt8.ENUM_VALUE_0), arguint8b1 = new EnumUInt8(EnumUInt8.ENUM_VALUE_1), arguint8b2 = new EnumUInt8(EnumUInt8.ENUM_VALUE_2), arguint8b3 = new EnumUInt8(EnumUInt8.ENUM_VALUE_3), arguint8b4 = new EnumUInt8(EnumUInt8.ENUM_VALUE_4), arguint8b5 = new EnumUInt8(EnumUInt8.ENUM_VALUE_5), argint16b0 = new EnumInt16(EnumInt16.ENUM_VALUE_0), argint16b1 = new EnumInt16(EnumInt16.ENUM_VALUE_1), argint16b2 = new EnumInt16(EnumInt16.ENUM_VALUE_2), argint16b3 = new EnumInt16(EnumInt16.ENUM_VALUE_3), argint16b4 = new EnumInt16(EnumInt16.ENUM_VALUE_4), argint16b5 = new EnumInt16(EnumInt16.ENUM_VALUE_5), arguint16b0 = new EnumUInt16(EnumUInt16.ENUM_VALUE_0), arguint16b1 = new EnumUInt16(EnumUInt16.ENUM_VALUE_1), arguint16b2 = new EnumUInt16(EnumUInt16.ENUM_VALUE_2), arguint16b3 = new EnumUInt16(EnumUInt16.ENUM_VALUE_3), arguint16b4 = new EnumUInt16(EnumUInt16.ENUM_VALUE_4), arguint16b5 = new EnumUInt16(EnumUInt16.ENUM_VALUE_5), argint32b0 = new EnumInt32(EnumInt32.ENUM_VALUE_0), argint32b1 = new EnumInt32(EnumInt32.ENUM_VALUE_1), argint32b2 = new EnumInt32(EnumInt32.ENUM_VALUE_2), argint32b3 = new EnumInt32(EnumInt32.ENUM_VALUE_3), argint32b4 = new EnumInt32(EnumInt32.ENUM_VALUE_4), argint32b5 = new EnumInt32(EnumInt32.ENUM_VALUE_5), arguint32b0 = new EnumUInt32(EnumUInt32.ENUM_VALUE_0), arguint32b1 = new EnumUInt32(EnumUInt32.ENUM_VALUE_1), arguint32b2 = new EnumUInt32(EnumUInt32.ENUM_VALUE_2), arguint32b3 = new EnumUInt32(EnumUInt32.ENUM_VALUE_3), arguint32b4 = new EnumUInt32(EnumUInt32.ENUM_VALUE_4), arguint32b5 = new EnumUInt32(EnumUInt32.ENUM_VALUE_5), argint64b0 = new EnumInt64(EnumInt64.ENUM_VALUE_0), argint64b1 = new EnumInt64(EnumInt64.ENUM_VALUE_1), argint64b2 = new EnumInt64(EnumInt64.ENUM_VALUE_2), argint64b3 = new EnumInt64(EnumInt64.ENUM_VALUE_3), argint64b4 = new EnumInt64(EnumInt64.ENUM_VALUE_4), argint64b5 = new EnumInt64(EnumInt64.ENUM_VALUE_5), arguint64b0 = new EnumUInt64(EnumUInt64.ENUM_VALUE_0), arguint64b1 = new EnumUInt64(EnumUInt64.ENUM_VALUE_1), arguint64b2 = new EnumUInt64(EnumUInt64.ENUM_VALUE_2), arguint64b3 = new EnumUInt64(EnumUInt64.ENUM_VALUE_3), arguint64b4 = new EnumUInt64(EnumUInt64.ENUM_VALUE_4), arguint64b5 = new EnumUInt64(EnumUInt64.ENUM_VALUE_5)) {
    this.byte0 = argbyte0
    this.byte1 = argbyte1
    this.byte2 = argbyte2
    this.byte3 = argbyte3
    this.byte4 = argbyte4
    this.byte5 = argbyte5
    this.char0 = argchar0
    this.char1 = argchar1
    this.char2 = argchar2
    this.char3 = argchar3
    this.char4 = argchar4
    this.char5 = argchar5
    this.wchar0 = argwchar0
    this.wchar1 = argwchar1
    this.wchar2 = argwchar2
    this.wchar3 = argwchar3
    this.wchar4 = argwchar4
    this.wchar5 = argwchar5
    this.int8b0 = argint8b0
    this.int8b1 = argint8b1
    this.int8b2 = argint8b2
    this.int8b3 = argint8b3
    this.int8b4 = argint8b4
    this.int8b5 = argint8b5
    this.uint8b0 = arguint8b0
    this.uint8b1 = arguint8b1
    this.uint8b2 = arguint8b2
    this.uint8b3 = arguint8b3
    this.uint8b4 = arguint8b4
    this.uint8b5 = arguint8b5
    this.int16b0 = argint16b0
    this.int16b1 = argint16b1
    this.int16b2 = argint16b2
    this.int16b3 = argint16b3
    this.int16b4 = argint16b4
    this.int16b5 = argint16b5
    this.uint16b0 = arguint16b0
    this.uint16b1 = arguint16b1
    this.uint16b2 = arguint16b2
    this.uint16b3 = arguint16b3
    this.uint16b4 = arguint16b4
    this.uint16b5 = arguint16b5
    this.int32b0 = argint32b0
    this.int32b1 = argint32b1
    this.int32b2 = argint32b2
    this.int32b3 = argint32b3
    this.int32b4 = argint32b4
    this.int32b5 = argint32b5
    this.uint32b0 = arguint32b0
    this.uint32b1 = arguint32b1
    this.uint32b2 = arguint32b2
    this.uint32b3 = arguint32b3
    this.uint32b4 = arguint32b4
    this.uint32b5 = arguint32b5
    this.int64b0 = argint64b0
    this.int64b1 = argint64b1
    this.int64b2 = argint64b2
    this.int64b3 = argint64b3
    this.int64b4 = argint64b4
    this.int64b5 = argint64b5
    this.uint64b0 = arguint64b0
    this.uint64b1 = arguint64b1
    this.uint64b2 = arguint64b2
    this.uint64b3 = arguint64b3
    this.uint64b4 = arguint64b4
    this.uint64b5 = arguint64b5
  }

  /**
   * Copy struct (shallow copy)
   * @this {!Enums}
   * @param {!Enums} other Other struct
   * @returns {!Enums} This struct
   */
  copy (other) {
    if (other.byte0 != null) {
      this.byte0 = EnumByte.fromObject(other.byte0)
    } else {
      this.byte0 = undefined
    }
    if (other.byte1 != null) {
      this.byte1 = EnumByte.fromObject(other.byte1)
    } else {
      this.byte1 = undefined
    }
    if (other.byte2 != null) {
      this.byte2 = EnumByte.fromObject(other.byte2)
    } else {
      this.byte2 = undefined
    }
    if (other.byte3 != null) {
      this.byte3 = EnumByte.fromObject(other.byte3)
    } else {
      this.byte3 = undefined
    }
    if (other.byte4 != null) {
      this.byte4 = EnumByte.fromObject(other.byte4)
    } else {
      this.byte4 = undefined
    }
    if (other.byte5 != null) {
      this.byte5 = EnumByte.fromObject(other.byte5)
    } else {
      this.byte5 = undefined
    }
    if (other.char0 != null) {
      this.char0 = EnumChar.fromObject(other.char0)
    } else {
      this.char0 = undefined
    }
    if (other.char1 != null) {
      this.char1 = EnumChar.fromObject(other.char1)
    } else {
      this.char1 = undefined
    }
    if (other.char2 != null) {
      this.char2 = EnumChar.fromObject(other.char2)
    } else {
      this.char2 = undefined
    }
    if (other.char3 != null) {
      this.char3 = EnumChar.fromObject(other.char3)
    } else {
      this.char3 = undefined
    }
    if (other.char4 != null) {
      this.char4 = EnumChar.fromObject(other.char4)
    } else {
      this.char4 = undefined
    }
    if (other.char5 != null) {
      this.char5 = EnumChar.fromObject(other.char5)
    } else {
      this.char5 = undefined
    }
    if (other.wchar0 != null) {
      this.wchar0 = EnumWChar.fromObject(other.wchar0)
    } else {
      this.wchar0 = undefined
    }
    if (other.wchar1 != null) {
      this.wchar1 = EnumWChar.fromObject(other.wchar1)
    } else {
      this.wchar1 = undefined
    }
    if (other.wchar2 != null) {
      this.wchar2 = EnumWChar.fromObject(other.wchar2)
    } else {
      this.wchar2 = undefined
    }
    if (other.wchar3 != null) {
      this.wchar3 = EnumWChar.fromObject(other.wchar3)
    } else {
      this.wchar3 = undefined
    }
    if (other.wchar4 != null) {
      this.wchar4 = EnumWChar.fromObject(other.wchar4)
    } else {
      this.wchar4 = undefined
    }
    if (other.wchar5 != null) {
      this.wchar5 = EnumWChar.fromObject(other.wchar5)
    } else {
      this.wchar5 = undefined
    }
    if (other.int8b0 != null) {
      this.int8b0 = EnumInt8.fromObject(other.int8b0)
    } else {
      this.int8b0 = undefined
    }
    if (other.int8b1 != null) {
      this.int8b1 = EnumInt8.fromObject(other.int8b1)
    } else {
      this.int8b1 = undefined
    }
    if (other.int8b2 != null) {
      this.int8b2 = EnumInt8.fromObject(other.int8b2)
    } else {
      this.int8b2 = undefined
    }
    if (other.int8b3 != null) {
      this.int8b3 = EnumInt8.fromObject(other.int8b3)
    } else {
      this.int8b3 = undefined
    }
    if (other.int8b4 != null) {
      this.int8b4 = EnumInt8.fromObject(other.int8b4)
    } else {
      this.int8b4 = undefined
    }
    if (other.int8b5 != null) {
      this.int8b5 = EnumInt8.fromObject(other.int8b5)
    } else {
      this.int8b5 = undefined
    }
    if (other.uint8b0 != null) {
      this.uint8b0 = EnumUInt8.fromObject(other.uint8b0)
    } else {
      this.uint8b0 = undefined
    }
    if (other.uint8b1 != null) {
      this.uint8b1 = EnumUInt8.fromObject(other.uint8b1)
    } else {
      this.uint8b1 = undefined
    }
    if (other.uint8b2 != null) {
      this.uint8b2 = EnumUInt8.fromObject(other.uint8b2)
    } else {
      this.uint8b2 = undefined
    }
    if (other.uint8b3 != null) {
      this.uint8b3 = EnumUInt8.fromObject(other.uint8b3)
    } else {
      this.uint8b3 = undefined
    }
    if (other.uint8b4 != null) {
      this.uint8b4 = EnumUInt8.fromObject(other.uint8b4)
    } else {
      this.uint8b4 = undefined
    }
    if (other.uint8b5 != null) {
      this.uint8b5 = EnumUInt8.fromObject(other.uint8b5)
    } else {
      this.uint8b5 = undefined
    }
    if (other.int16b0 != null) {
      this.int16b0 = EnumInt16.fromObject(other.int16b0)
    } else {
      this.int16b0 = undefined
    }
    if (other.int16b1 != null) {
      this.int16b1 = EnumInt16.fromObject(other.int16b1)
    } else {
      this.int16b1 = undefined
    }
    if (other.int16b2 != null) {
      this.int16b2 = EnumInt16.fromObject(other.int16b2)
    } else {
      this.int16b2 = undefined
    }
    if (other.int16b3 != null) {
      this.int16b3 = EnumInt16.fromObject(other.int16b3)
    } else {
      this.int16b3 = undefined
    }
    if (other.int16b4 != null) {
      this.int16b4 = EnumInt16.fromObject(other.int16b4)
    } else {
      this.int16b4 = undefined
    }
    if (other.int16b5 != null) {
      this.int16b5 = EnumInt16.fromObject(other.int16b5)
    } else {
      this.int16b5 = undefined
    }
    if (other.uint16b0 != null) {
      this.uint16b0 = EnumUInt16.fromObject(other.uint16b0)
    } else {
      this.uint16b0 = undefined
    }
    if (other.uint16b1 != null) {
      this.uint16b1 = EnumUInt16.fromObject(other.uint16b1)
    } else {
      this.uint16b1 = undefined
    }
    if (other.uint16b2 != null) {
      this.uint16b2 = EnumUInt16.fromObject(other.uint16b2)
    } else {
      this.uint16b2 = undefined
    }
    if (other.uint16b3 != null) {
      this.uint16b3 = EnumUInt16.fromObject(other.uint16b3)
    } else {
      this.uint16b3 = undefined
    }
    if (other.uint16b4 != null) {
      this.uint16b4 = EnumUInt16.fromObject(other.uint16b4)
    } else {
      this.uint16b4 = undefined
    }
    if (other.uint16b5 != null) {
      this.uint16b5 = EnumUInt16.fromObject(other.uint16b5)
    } else {
      this.uint16b5 = undefined
    }
    if (other.int32b0 != null) {
      this.int32b0 = EnumInt32.fromObject(other.int32b0)
    } else {
      this.int32b0 = undefined
    }
    if (other.int32b1 != null) {
      this.int32b1 = EnumInt32.fromObject(other.int32b1)
    } else {
      this.int32b1 = undefined
    }
    if (other.int32b2 != null) {
      this.int32b2 = EnumInt32.fromObject(other.int32b2)
    } else {
      this.int32b2 = undefined
    }
    if (other.int32b3 != null) {
      this.int32b3 = EnumInt32.fromObject(other.int32b3)
    } else {
      this.int32b3 = undefined
    }
    if (other.int32b4 != null) {
      this.int32b4 = EnumInt32.fromObject(other.int32b4)
    } else {
      this.int32b4 = undefined
    }
    if (other.int32b5 != null) {
      this.int32b5 = EnumInt32.fromObject(other.int32b5)
    } else {
      this.int32b5 = undefined
    }
    if (other.uint32b0 != null) {
      this.uint32b0 = EnumUInt32.fromObject(other.uint32b0)
    } else {
      this.uint32b0 = undefined
    }
    if (other.uint32b1 != null) {
      this.uint32b1 = EnumUInt32.fromObject(other.uint32b1)
    } else {
      this.uint32b1 = undefined
    }
    if (other.uint32b2 != null) {
      this.uint32b2 = EnumUInt32.fromObject(other.uint32b2)
    } else {
      this.uint32b2 = undefined
    }
    if (other.uint32b3 != null) {
      this.uint32b3 = EnumUInt32.fromObject(other.uint32b3)
    } else {
      this.uint32b3 = undefined
    }
    if (other.uint32b4 != null) {
      this.uint32b4 = EnumUInt32.fromObject(other.uint32b4)
    } else {
      this.uint32b4 = undefined
    }
    if (other.uint32b5 != null) {
      this.uint32b5 = EnumUInt32.fromObject(other.uint32b5)
    } else {
      this.uint32b5 = undefined
    }
    if (other.int64b0 != null) {
      this.int64b0 = EnumInt64.fromObject(other.int64b0)
    } else {
      this.int64b0 = undefined
    }
    if (other.int64b1 != null) {
      this.int64b1 = EnumInt64.fromObject(other.int64b1)
    } else {
      this.int64b1 = undefined
    }
    if (other.int64b2 != null) {
      this.int64b2 = EnumInt64.fromObject(other.int64b2)
    } else {
      this.int64b2 = undefined
    }
    if (other.int64b3 != null) {
      this.int64b3 = EnumInt64.fromObject(other.int64b3)
    } else {
      this.int64b3 = undefined
    }
    if (other.int64b4 != null) {
      this.int64b4 = EnumInt64.fromObject(other.int64b4)
    } else {
      this.int64b4 = undefined
    }
    if (other.int64b5 != null) {
      this.int64b5 = EnumInt64.fromObject(other.int64b5)
    } else {
      this.int64b5 = undefined
    }
    if (other.uint64b0 != null) {
      this.uint64b0 = EnumUInt64.fromObject(other.uint64b0)
    } else {
      this.uint64b0 = undefined
    }
    if (other.uint64b1 != null) {
      this.uint64b1 = EnumUInt64.fromObject(other.uint64b1)
    } else {
      this.uint64b1 = undefined
    }
    if (other.uint64b2 != null) {
      this.uint64b2 = EnumUInt64.fromObject(other.uint64b2)
    } else {
      this.uint64b2 = undefined
    }
    if (other.uint64b3 != null) {
      this.uint64b3 = EnumUInt64.fromObject(other.uint64b3)
    } else {
      this.uint64b3 = undefined
    }
    if (other.uint64b4 != null) {
      this.uint64b4 = EnumUInt64.fromObject(other.uint64b4)
    } else {
      this.uint64b4 = undefined
    }
    if (other.uint64b5 != null) {
      this.uint64b5 = EnumUInt64.fromObject(other.uint64b5)
    } else {
      this.uint64b5 = undefined
    }
    return this
  }

  /**
   * Clone struct (deep clone)
   * @this {!Enums}
   * @returns {!Enums} Cloned struct
   */
  clone () {
    // Serialize the struct to the FBE stream
    let writer = new EnumsModel(new fbe.WriteBuffer())
    writer.serialize(this)

    // Deserialize the struct from the FBE stream
    let reader = new EnumsModel(new fbe.ReadBuffer())
    reader.attachBuffer(writer.buffer)
    return reader.deserialize().value
  }

  /**
   * Is this struct equal to other one?
   * @this {!Enums}
   * @param {!Enums} other Other struct
   * @returns {boolean} Equal result
   */
  eq (other) {
    if (!(other instanceof Enums)) {
      throw new TypeError('Instance of Enums is required!')
    }
    return true
  }

  /**
   * Convert struct to string
   * @this {!Enums}
   * @returns {!string} Struct value string
   */
  toString () {
    let result = ''
    result += 'Enums('
    result += 'byte0='
    result += this.byte0.toString()
    result += ',byte1='
    result += this.byte1.toString()
    result += ',byte2='
    result += this.byte2.toString()
    result += ',byte3='
    result += this.byte3.toString()
    result += ',byte4='
    result += this.byte4.toString()
    result += ',byte5='
    result += this.byte5.toString()
    result += ',char0='
    result += this.char0.toString()
    result += ',char1='
    result += this.char1.toString()
    result += ',char2='
    result += this.char2.toString()
    result += ',char3='
    result += this.char3.toString()
    result += ',char4='
    result += this.char4.toString()
    result += ',char5='
    result += this.char5.toString()
    result += ',wchar0='
    result += this.wchar0.toString()
    result += ',wchar1='
    result += this.wchar1.toString()
    result += ',wchar2='
    result += this.wchar2.toString()
    result += ',wchar3='
    result += this.wchar3.toString()
    result += ',wchar4='
    result += this.wchar4.toString()
    result += ',wchar5='
    result += this.wchar5.toString()
    result += ',int8b0='
    result += this.int8b0.toString()
    result += ',int8b1='
    result += this.int8b1.toString()
    result += ',int8b2='
    result += this.int8b2.toString()
    result += ',int8b3='
    result += this.int8b3.toString()
    result += ',int8b4='
    result += this.int8b4.toString()
    result += ',int8b5='
    result += this.int8b5.toString()
    result += ',uint8b0='
    result += this.uint8b0.toString()
    result += ',uint8b1='
    result += this.uint8b1.toString()
    result += ',uint8b2='
    result += this.uint8b2.toString()
    result += ',uint8b3='
    result += this.uint8b3.toString()
    result += ',uint8b4='
    result += this.uint8b4.toString()
    result += ',uint8b5='
    result += this.uint8b5.toString()
    result += ',int16b0='
    result += this.int16b0.toString()
    result += ',int16b1='
    result += this.int16b1.toString()
    result += ',int16b2='
    result += this.int16b2.toString()
    result += ',int16b3='
    result += this.int16b3.toString()
    result += ',int16b4='
    result += this.int16b4.toString()
    result += ',int16b5='
    result += this.int16b5.toString()
    result += ',uint16b0='
    result += this.uint16b0.toString()
    result += ',uint16b1='
    result += this.uint16b1.toString()
    result += ',uint16b2='
    result += this.uint16b2.toString()
    result += ',uint16b3='
    result += this.uint16b3.toString()
    result += ',uint16b4='
    result += this.uint16b4.toString()
    result += ',uint16b5='
    result += this.uint16b5.toString()
    result += ',int32b0='
    result += this.int32b0.toString()
    result += ',int32b1='
    result += this.int32b1.toString()
    result += ',int32b2='
    result += this.int32b2.toString()
    result += ',int32b3='
    result += this.int32b3.toString()
    result += ',int32b4='
    result += this.int32b4.toString()
    result += ',int32b5='
    result += this.int32b5.toString()
    result += ',uint32b0='
    result += this.uint32b0.toString()
    result += ',uint32b1='
    result += this.uint32b1.toString()
    result += ',uint32b2='
    result += this.uint32b2.toString()
    result += ',uint32b3='
    result += this.uint32b3.toString()
    result += ',uint32b4='
    result += this.uint32b4.toString()
    result += ',uint32b5='
    result += this.uint32b5.toString()
    result += ',int64b0='
    result += this.int64b0.toString()
    result += ',int64b1='
    result += this.int64b1.toString()
    result += ',int64b2='
    result += this.int64b2.toString()
    result += ',int64b3='
    result += this.int64b3.toString()
    result += ',int64b4='
    result += this.int64b4.toString()
    result += ',int64b5='
    result += this.int64b5.toString()
    result += ',uint64b0='
    result += this.uint64b0.toString()
    result += ',uint64b1='
    result += this.uint64b1.toString()
    result += ',uint64b2='
    result += this.uint64b2.toString()
    result += ',uint64b3='
    result += this.uint64b3.toString()
    result += ',uint64b4='
    result += this.uint64b4.toString()
    result += ',uint64b5='
    result += this.uint64b5.toString()
    result += ')'
    return result
  }

  /**
   * Inspect struct
   * @this {!Enums}
   * @returns {!string} Struct value string
   */
  [util.inspect.custom] () {
    return this.toString()
  }

  /**
   * Convert struct to JSON
   * @this {!Enums}
   * @returns {!object} Struct value for JSON
   */
  toJSON () {
    return {
      byte0: ((this.byte0 != null) ? this.byte0 : null),
      byte1: ((this.byte1 != null) ? this.byte1 : null),
      byte2: ((this.byte2 != null) ? this.byte2 : null),
      byte3: ((this.byte3 != null) ? this.byte3 : null),
      byte4: ((this.byte4 != null) ? this.byte4 : null),
      byte5: ((this.byte5 != null) ? this.byte5 : null),
      char0: ((this.char0 != null) ? this.char0 : null),
      char1: ((this.char1 != null) ? this.char1 : null),
      char2: ((this.char2 != null) ? this.char2 : null),
      char3: ((this.char3 != null) ? this.char3 : null),
      char4: ((this.char4 != null) ? this.char4 : null),
      char5: ((this.char5 != null) ? this.char5 : null),
      wchar0: ((this.wchar0 != null) ? this.wchar0 : null),
      wchar1: ((this.wchar1 != null) ? this.wchar1 : null),
      wchar2: ((this.wchar2 != null) ? this.wchar2 : null),
      wchar3: ((this.wchar3 != null) ? this.wchar3 : null),
      wchar4: ((this.wchar4 != null) ? this.wchar4 : null),
      wchar5: ((this.wchar5 != null) ? this.wchar5 : null),
      int8b0: ((this.int8b0 != null) ? this.int8b0 : null),
      int8b1: ((this.int8b1 != null) ? this.int8b1 : null),
      int8b2: ((this.int8b2 != null) ? this.int8b2 : null),
      int8b3: ((this.int8b3 != null) ? this.int8b3 : null),
      int8b4: ((this.int8b4 != null) ? this.int8b4 : null),
      int8b5: ((this.int8b5 != null) ? this.int8b5 : null),
      uint8b0: ((this.uint8b0 != null) ? this.uint8b0 : null),
      uint8b1: ((this.uint8b1 != null) ? this.uint8b1 : null),
      uint8b2: ((this.uint8b2 != null) ? this.uint8b2 : null),
      uint8b3: ((this.uint8b3 != null) ? this.uint8b3 : null),
      uint8b4: ((this.uint8b4 != null) ? this.uint8b4 : null),
      uint8b5: ((this.uint8b5 != null) ? this.uint8b5 : null),
      int16b0: ((this.int16b0 != null) ? this.int16b0 : null),
      int16b1: ((this.int16b1 != null) ? this.int16b1 : null),
      int16b2: ((this.int16b2 != null) ? this.int16b2 : null),
      int16b3: ((this.int16b3 != null) ? this.int16b3 : null),
      int16b4: ((this.int16b4 != null) ? this.int16b4 : null),
      int16b5: ((this.int16b5 != null) ? this.int16b5 : null),
      uint16b0: ((this.uint16b0 != null) ? this.uint16b0 : null),
      uint16b1: ((this.uint16b1 != null) ? this.uint16b1 : null),
      uint16b2: ((this.uint16b2 != null) ? this.uint16b2 : null),
      uint16b3: ((this.uint16b3 != null) ? this.uint16b3 : null),
      uint16b4: ((this.uint16b4 != null) ? this.uint16b4 : null),
      uint16b5: ((this.uint16b5 != null) ? this.uint16b5 : null),
      int32b0: ((this.int32b0 != null) ? this.int32b0 : null),
      int32b1: ((this.int32b1 != null) ? this.int32b1 : null),
      int32b2: ((this.int32b2 != null) ? this.int32b2 : null),
      int32b3: ((this.int32b3 != null) ? this.int32b3 : null),
      int32b4: ((this.int32b4 != null) ? this.int32b4 : null),
      int32b5: ((this.int32b5 != null) ? this.int32b5 : null),
      uint32b0: ((this.uint32b0 != null) ? this.uint32b0 : null),
      uint32b1: ((this.uint32b1 != null) ? this.uint32b1 : null),
      uint32b2: ((this.uint32b2 != null) ? this.uint32b2 : null),
      uint32b3: ((this.uint32b3 != null) ? this.uint32b3 : null),
      uint32b4: ((this.uint32b4 != null) ? this.uint32b4 : null),
      uint32b5: ((this.uint32b5 != null) ? this.uint32b5 : null),
      int64b0: ((this.int64b0 != null) ? this.int64b0 : null),
      int64b1: ((this.int64b1 != null) ? this.int64b1 : null),
      int64b2: ((this.int64b2 != null) ? this.int64b2 : null),
      int64b3: ((this.int64b3 != null) ? this.int64b3 : null),
      int64b4: ((this.int64b4 != null) ? this.int64b4 : null),
      int64b5: ((this.int64b5 != null) ? this.int64b5 : null),
      uint64b0: ((this.uint64b0 != null) ? this.uint64b0 : null),
      uint64b1: ((this.uint64b1 != null) ? this.uint64b1 : null),
      uint64b2: ((this.uint64b2 != null) ? this.uint64b2 : null),
      uint64b3: ((this.uint64b3 != null) ? this.uint64b3 : null),
      uint64b4: ((this.uint64b4 != null) ? this.uint64b4 : null),
      uint64b5: ((this.uint64b5 != null) ? this.uint64b5 : null)
    }
  }

  /**
   * Convert JSON to struct
   * @param {!string} json JSON string
   * @returns {!object} Struct value for JSON
   */
  static fromJSON (json) {
    return Enums.fromObject(JSON.parse(json))
  }

  /**
   * Create struct from object value
   * @param {!Enums} other Object value
   * @returns {!Enums} Created struct
   */
  static fromObject (other) {
    return new Enums().copy(other)
  }

  /**
   * Get the FBE type
   * @this {!Enums}
   * @returns {!number} FBE type
   */
  get fbeType () {
    return Enums.fbeType
  }

  /**
   * Get the FBE type (static)
   * @this {!Enums}
   * @returns {!number} FBE type
   */
  static get fbeType () {
    return 1
  }
}

exports.Enums = Enums

/**
 * Fast Binary Encoding Enums field model
 */
class FieldModelEnums extends fbe.FieldModel {
  /**
   * Initialize field model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._byte0 = new FieldModelEnumByte(buffer, 4 + 4)
    this._byte1 = new FieldModelEnumByte(buffer, this._byte0.fbeOffset + this._byte0.fbeSize)
    this._byte2 = new FieldModelEnumByte(buffer, this._byte1.fbeOffset + this._byte1.fbeSize)
    this._byte3 = new FieldModelEnumByte(buffer, this._byte2.fbeOffset + this._byte2.fbeSize)
    this._byte4 = new FieldModelEnumByte(buffer, this._byte3.fbeOffset + this._byte3.fbeSize)
    this._byte5 = new FieldModelEnumByte(buffer, this._byte4.fbeOffset + this._byte4.fbeSize)
    this._char0 = new FieldModelEnumChar(buffer, this._byte5.fbeOffset + this._byte5.fbeSize)
    this._char1 = new FieldModelEnumChar(buffer, this._char0.fbeOffset + this._char0.fbeSize)
    this._char2 = new FieldModelEnumChar(buffer, this._char1.fbeOffset + this._char1.fbeSize)
    this._char3 = new FieldModelEnumChar(buffer, this._char2.fbeOffset + this._char2.fbeSize)
    this._char4 = new FieldModelEnumChar(buffer, this._char3.fbeOffset + this._char3.fbeSize)
    this._char5 = new FieldModelEnumChar(buffer, this._char4.fbeOffset + this._char4.fbeSize)
    this._wchar0 = new FieldModelEnumWChar(buffer, this._char5.fbeOffset + this._char5.fbeSize)
    this._wchar1 = new FieldModelEnumWChar(buffer, this._wchar0.fbeOffset + this._wchar0.fbeSize)
    this._wchar2 = new FieldModelEnumWChar(buffer, this._wchar1.fbeOffset + this._wchar1.fbeSize)
    this._wchar3 = new FieldModelEnumWChar(buffer, this._wchar2.fbeOffset + this._wchar2.fbeSize)
    this._wchar4 = new FieldModelEnumWChar(buffer, this._wchar3.fbeOffset + this._wchar3.fbeSize)
    this._wchar5 = new FieldModelEnumWChar(buffer, this._wchar4.fbeOffset + this._wchar4.fbeSize)
    this._int8b0 = new FieldModelEnumInt8(buffer, this._wchar5.fbeOffset + this._wchar5.fbeSize)
    this._int8b1 = new FieldModelEnumInt8(buffer, this._int8b0.fbeOffset + this._int8b0.fbeSize)
    this._int8b2 = new FieldModelEnumInt8(buffer, this._int8b1.fbeOffset + this._int8b1.fbeSize)
    this._int8b3 = new FieldModelEnumInt8(buffer, this._int8b2.fbeOffset + this._int8b2.fbeSize)
    this._int8b4 = new FieldModelEnumInt8(buffer, this._int8b3.fbeOffset + this._int8b3.fbeSize)
    this._int8b5 = new FieldModelEnumInt8(buffer, this._int8b4.fbeOffset + this._int8b4.fbeSize)
    this._uint8b0 = new FieldModelEnumUInt8(buffer, this._int8b5.fbeOffset + this._int8b5.fbeSize)
    this._uint8b1 = new FieldModelEnumUInt8(buffer, this._uint8b0.fbeOffset + this._uint8b0.fbeSize)
    this._uint8b2 = new FieldModelEnumUInt8(buffer, this._uint8b1.fbeOffset + this._uint8b1.fbeSize)
    this._uint8b3 = new FieldModelEnumUInt8(buffer, this._uint8b2.fbeOffset + this._uint8b2.fbeSize)
    this._uint8b4 = new FieldModelEnumUInt8(buffer, this._uint8b3.fbeOffset + this._uint8b3.fbeSize)
    this._uint8b5 = new FieldModelEnumUInt8(buffer, this._uint8b4.fbeOffset + this._uint8b4.fbeSize)
    this._int16b0 = new FieldModelEnumInt16(buffer, this._uint8b5.fbeOffset + this._uint8b5.fbeSize)
    this._int16b1 = new FieldModelEnumInt16(buffer, this._int16b0.fbeOffset + this._int16b0.fbeSize)
    this._int16b2 = new FieldModelEnumInt16(buffer, this._int16b1.fbeOffset + this._int16b1.fbeSize)
    this._int16b3 = new FieldModelEnumInt16(buffer, this._int16b2.fbeOffset + this._int16b2.fbeSize)
    this._int16b4 = new FieldModelEnumInt16(buffer, this._int16b3.fbeOffset + this._int16b3.fbeSize)
    this._int16b5 = new FieldModelEnumInt16(buffer, this._int16b4.fbeOffset + this._int16b4.fbeSize)
    this._uint16b0 = new FieldModelEnumUInt16(buffer, this._int16b5.fbeOffset + this._int16b5.fbeSize)
    this._uint16b1 = new FieldModelEnumUInt16(buffer, this._uint16b0.fbeOffset + this._uint16b0.fbeSize)
    this._uint16b2 = new FieldModelEnumUInt16(buffer, this._uint16b1.fbeOffset + this._uint16b1.fbeSize)
    this._uint16b3 = new FieldModelEnumUInt16(buffer, this._uint16b2.fbeOffset + this._uint16b2.fbeSize)
    this._uint16b4 = new FieldModelEnumUInt16(buffer, this._uint16b3.fbeOffset + this._uint16b3.fbeSize)
    this._uint16b5 = new FieldModelEnumUInt16(buffer, this._uint16b4.fbeOffset + this._uint16b4.fbeSize)
    this._int32b0 = new FieldModelEnumInt32(buffer, this._uint16b5.fbeOffset + this._uint16b5.fbeSize)
    this._int32b1 = new FieldModelEnumInt32(buffer, this._int32b0.fbeOffset + this._int32b0.fbeSize)
    this._int32b2 = new FieldModelEnumInt32(buffer, this._int32b1.fbeOffset + this._int32b1.fbeSize)
    this._int32b3 = new FieldModelEnumInt32(buffer, this._int32b2.fbeOffset + this._int32b2.fbeSize)
    this._int32b4 = new FieldModelEnumInt32(buffer, this._int32b3.fbeOffset + this._int32b3.fbeSize)
    this._int32b5 = new FieldModelEnumInt32(buffer, this._int32b4.fbeOffset + this._int32b4.fbeSize)
    this._uint32b0 = new FieldModelEnumUInt32(buffer, this._int32b5.fbeOffset + this._int32b5.fbeSize)
    this._uint32b1 = new FieldModelEnumUInt32(buffer, this._uint32b0.fbeOffset + this._uint32b0.fbeSize)
    this._uint32b2 = new FieldModelEnumUInt32(buffer, this._uint32b1.fbeOffset + this._uint32b1.fbeSize)
    this._uint32b3 = new FieldModelEnumUInt32(buffer, this._uint32b2.fbeOffset + this._uint32b2.fbeSize)
    this._uint32b4 = new FieldModelEnumUInt32(buffer, this._uint32b3.fbeOffset + this._uint32b3.fbeSize)
    this._uint32b5 = new FieldModelEnumUInt32(buffer, this._uint32b4.fbeOffset + this._uint32b4.fbeSize)
    this._int64b0 = new FieldModelEnumInt64(buffer, this._uint32b5.fbeOffset + this._uint32b5.fbeSize)
    this._int64b1 = new FieldModelEnumInt64(buffer, this._int64b0.fbeOffset + this._int64b0.fbeSize)
    this._int64b2 = new FieldModelEnumInt64(buffer, this._int64b1.fbeOffset + this._int64b1.fbeSize)
    this._int64b3 = new FieldModelEnumInt64(buffer, this._int64b2.fbeOffset + this._int64b2.fbeSize)
    this._int64b4 = new FieldModelEnumInt64(buffer, this._int64b3.fbeOffset + this._int64b3.fbeSize)
    this._int64b5 = new FieldModelEnumInt64(buffer, this._int64b4.fbeOffset + this._int64b4.fbeSize)
    this._uint64b0 = new FieldModelEnumUInt64(buffer, this._int64b5.fbeOffset + this._int64b5.fbeSize)
    this._uint64b1 = new FieldModelEnumUInt64(buffer, this._uint64b0.fbeOffset + this._uint64b0.fbeSize)
    this._uint64b2 = new FieldModelEnumUInt64(buffer, this._uint64b1.fbeOffset + this._uint64b1.fbeSize)
    this._uint64b3 = new FieldModelEnumUInt64(buffer, this._uint64b2.fbeOffset + this._uint64b2.fbeSize)
    this._uint64b4 = new FieldModelEnumUInt64(buffer, this._uint64b3.fbeOffset + this._uint64b3.fbeSize)
    this._uint64b5 = new FieldModelEnumUInt64(buffer, this._uint64b4.fbeOffset + this._uint64b4.fbeSize)
  }

  /**
   * Get the byte0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumByte} byte0 field model
   */
  get byte0 () {
    return this._byte0
  }

  /**
   * Get the byte1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumByte} byte1 field model
   */
  get byte1 () {
    return this._byte1
  }

  /**
   * Get the byte2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumByte} byte2 field model
   */
  get byte2 () {
    return this._byte2
  }

  /**
   * Get the byte3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumByte} byte3 field model
   */
  get byte3 () {
    return this._byte3
  }

  /**
   * Get the byte4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumByte} byte4 field model
   */
  get byte4 () {
    return this._byte4
  }

  /**
   * Get the byte5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumByte} byte5 field model
   */
  get byte5 () {
    return this._byte5
  }

  /**
   * Get the char0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumChar} char0 field model
   */
  get char0 () {
    return this._char0
  }

  /**
   * Get the char1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumChar} char1 field model
   */
  get char1 () {
    return this._char1
  }

  /**
   * Get the char2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumChar} char2 field model
   */
  get char2 () {
    return this._char2
  }

  /**
   * Get the char3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumChar} char3 field model
   */
  get char3 () {
    return this._char3
  }

  /**
   * Get the char4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumChar} char4 field model
   */
  get char4 () {
    return this._char4
  }

  /**
   * Get the char5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumChar} char5 field model
   */
  get char5 () {
    return this._char5
  }

  /**
   * Get the wchar0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumWChar} wchar0 field model
   */
  get wchar0 () {
    return this._wchar0
  }

  /**
   * Get the wchar1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumWChar} wchar1 field model
   */
  get wchar1 () {
    return this._wchar1
  }

  /**
   * Get the wchar2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumWChar} wchar2 field model
   */
  get wchar2 () {
    return this._wchar2
  }

  /**
   * Get the wchar3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumWChar} wchar3 field model
   */
  get wchar3 () {
    return this._wchar3
  }

  /**
   * Get the wchar4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumWChar} wchar4 field model
   */
  get wchar4 () {
    return this._wchar4
  }

  /**
   * Get the wchar5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumWChar} wchar5 field model
   */
  get wchar5 () {
    return this._wchar5
  }

  /**
   * Get the int8b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt8} int8b0 field model
   */
  get int8b0 () {
    return this._int8b0
  }

  /**
   * Get the int8b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt8} int8b1 field model
   */
  get int8b1 () {
    return this._int8b1
  }

  /**
   * Get the int8b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt8} int8b2 field model
   */
  get int8b2 () {
    return this._int8b2
  }

  /**
   * Get the int8b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt8} int8b3 field model
   */
  get int8b3 () {
    return this._int8b3
  }

  /**
   * Get the int8b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt8} int8b4 field model
   */
  get int8b4 () {
    return this._int8b4
  }

  /**
   * Get the int8b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt8} int8b5 field model
   */
  get int8b5 () {
    return this._int8b5
  }

  /**
   * Get the uint8b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt8} uint8b0 field model
   */
  get uint8b0 () {
    return this._uint8b0
  }

  /**
   * Get the uint8b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt8} uint8b1 field model
   */
  get uint8b1 () {
    return this._uint8b1
  }

  /**
   * Get the uint8b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt8} uint8b2 field model
   */
  get uint8b2 () {
    return this._uint8b2
  }

  /**
   * Get the uint8b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt8} uint8b3 field model
   */
  get uint8b3 () {
    return this._uint8b3
  }

  /**
   * Get the uint8b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt8} uint8b4 field model
   */
  get uint8b4 () {
    return this._uint8b4
  }

  /**
   * Get the uint8b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt8} uint8b5 field model
   */
  get uint8b5 () {
    return this._uint8b5
  }

  /**
   * Get the int16b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt16} int16b0 field model
   */
  get int16b0 () {
    return this._int16b0
  }

  /**
   * Get the int16b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt16} int16b1 field model
   */
  get int16b1 () {
    return this._int16b1
  }

  /**
   * Get the int16b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt16} int16b2 field model
   */
  get int16b2 () {
    return this._int16b2
  }

  /**
   * Get the int16b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt16} int16b3 field model
   */
  get int16b3 () {
    return this._int16b3
  }

  /**
   * Get the int16b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt16} int16b4 field model
   */
  get int16b4 () {
    return this._int16b4
  }

  /**
   * Get the int16b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt16} int16b5 field model
   */
  get int16b5 () {
    return this._int16b5
  }

  /**
   * Get the uint16b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt16} uint16b0 field model
   */
  get uint16b0 () {
    return this._uint16b0
  }

  /**
   * Get the uint16b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt16} uint16b1 field model
   */
  get uint16b1 () {
    return this._uint16b1
  }

  /**
   * Get the uint16b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt16} uint16b2 field model
   */
  get uint16b2 () {
    return this._uint16b2
  }

  /**
   * Get the uint16b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt16} uint16b3 field model
   */
  get uint16b3 () {
    return this._uint16b3
  }

  /**
   * Get the uint16b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt16} uint16b4 field model
   */
  get uint16b4 () {
    return this._uint16b4
  }

  /**
   * Get the uint16b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt16} uint16b5 field model
   */
  get uint16b5 () {
    return this._uint16b5
  }

  /**
   * Get the int32b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt32} int32b0 field model
   */
  get int32b0 () {
    return this._int32b0
  }

  /**
   * Get the int32b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt32} int32b1 field model
   */
  get int32b1 () {
    return this._int32b1
  }

  /**
   * Get the int32b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt32} int32b2 field model
   */
  get int32b2 () {
    return this._int32b2
  }

  /**
   * Get the int32b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt32} int32b3 field model
   */
  get int32b3 () {
    return this._int32b3
  }

  /**
   * Get the int32b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt32} int32b4 field model
   */
  get int32b4 () {
    return this._int32b4
  }

  /**
   * Get the int32b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt32} int32b5 field model
   */
  get int32b5 () {
    return this._int32b5
  }

  /**
   * Get the uint32b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt32} uint32b0 field model
   */
  get uint32b0 () {
    return this._uint32b0
  }

  /**
   * Get the uint32b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt32} uint32b1 field model
   */
  get uint32b1 () {
    return this._uint32b1
  }

  /**
   * Get the uint32b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt32} uint32b2 field model
   */
  get uint32b2 () {
    return this._uint32b2
  }

  /**
   * Get the uint32b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt32} uint32b3 field model
   */
  get uint32b3 () {
    return this._uint32b3
  }

  /**
   * Get the uint32b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt32} uint32b4 field model
   */
  get uint32b4 () {
    return this._uint32b4
  }

  /**
   * Get the uint32b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt32} uint32b5 field model
   */
  get uint32b5 () {
    return this._uint32b5
  }

  /**
   * Get the int64b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt64} int64b0 field model
   */
  get int64b0 () {
    return this._int64b0
  }

  /**
   * Get the int64b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt64} int64b1 field model
   */
  get int64b1 () {
    return this._int64b1
  }

  /**
   * Get the int64b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt64} int64b2 field model
   */
  get int64b2 () {
    return this._int64b2
  }

  /**
   * Get the int64b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt64} int64b3 field model
   */
  get int64b3 () {
    return this._int64b3
  }

  /**
   * Get the int64b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt64} int64b4 field model
   */
  get int64b4 () {
    return this._int64b4
  }

  /**
   * Get the int64b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumInt64} int64b5 field model
   */
  get int64b5 () {
    return this._int64b5
  }

  /**
   * Get the uint64b0 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt64} uint64b0 field model
   */
  get uint64b0 () {
    return this._uint64b0
  }

  /**
   * Get the uint64b1 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt64} uint64b1 field model
   */
  get uint64b1 () {
    return this._uint64b1
  }

  /**
   * Get the uint64b2 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt64} uint64b2 field model
   */
  get uint64b2 () {
    return this._uint64b2
  }

  /**
   * Get the uint64b3 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt64} uint64b3 field model
   */
  get uint64b3 () {
    return this._uint64b3
  }

  /**
   * Get the uint64b4 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt64} uint64b4 field model
   */
  get uint64b4 () {
    return this._uint64b4
  }

  /**
   * Get the uint64b5 field model
   * @this {!FieldModelEnums}
   * @returns {!FieldModelEnumUInt64} uint64b5 field model
   */
  get uint64b5 () {
    return this._uint64b5
  }

  /**
   * Get the field size
   * @this {!FieldModelEnums}
   * @returns {!number} Field size
   */
  get fbeSize () {
    return 4
  }

  /**
   * Get the field body size
   * @this {!FieldModelEnums}
   * @returns {!number} Field body size
   */
  get fbeBody () {
    return 4 + 4 + this.byte0.fbeSize + this.byte1.fbeSize + this.byte2.fbeSize + this.byte3.fbeSize + this.byte4.fbeSize + this.byte5.fbeSize + this.char0.fbeSize + this.char1.fbeSize + this.char2.fbeSize + this.char3.fbeSize + this.char4.fbeSize + this.char5.fbeSize + this.wchar0.fbeSize + this.wchar1.fbeSize + this.wchar2.fbeSize + this.wchar3.fbeSize + this.wchar4.fbeSize + this.wchar5.fbeSize + this.int8b0.fbeSize + this.int8b1.fbeSize + this.int8b2.fbeSize + this.int8b3.fbeSize + this.int8b4.fbeSize + this.int8b5.fbeSize + this.uint8b0.fbeSize + this.uint8b1.fbeSize + this.uint8b2.fbeSize + this.uint8b3.fbeSize + this.uint8b4.fbeSize + this.uint8b5.fbeSize + this.int16b0.fbeSize + this.int16b1.fbeSize + this.int16b2.fbeSize + this.int16b3.fbeSize + this.int16b4.fbeSize + this.int16b5.fbeSize + this.uint16b0.fbeSize + this.uint16b1.fbeSize + this.uint16b2.fbeSize + this.uint16b3.fbeSize + this.uint16b4.fbeSize + this.uint16b5.fbeSize + this.int32b0.fbeSize + this.int32b1.fbeSize + this.int32b2.fbeSize + this.int32b3.fbeSize + this.int32b4.fbeSize + this.int32b5.fbeSize + this.uint32b0.fbeSize + this.uint32b1.fbeSize + this.uint32b2.fbeSize + this.uint32b3.fbeSize + this.uint32b4.fbeSize + this.uint32b5.fbeSize + this.int64b0.fbeSize + this.int64b1.fbeSize + this.int64b2.fbeSize + this.int64b3.fbeSize + this.int64b4.fbeSize + this.int64b5.fbeSize + this.uint64b0.fbeSize + this.uint64b1.fbeSize + this.uint64b2.fbeSize + this.uint64b3.fbeSize + this.uint64b4.fbeSize + this.uint64b5.fbeSize
  }

  /**
   * Get the field extra size
   * @this {!FieldModelEnums}
   * @returns {!number} Field extra size
   */
  get fbeExtra () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.fbeOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4) > this._buffer.size)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)

    let fbeResult = this.fbeBody + this.byte0.fbeExtra + this.byte1.fbeExtra + this.byte2.fbeExtra + this.byte3.fbeExtra + this.byte4.fbeExtra + this.byte5.fbeExtra + this.char0.fbeExtra + this.char1.fbeExtra + this.char2.fbeExtra + this.char3.fbeExtra + this.char4.fbeExtra + this.char5.fbeExtra + this.wchar0.fbeExtra + this.wchar1.fbeExtra + this.wchar2.fbeExtra + this.wchar3.fbeExtra + this.wchar4.fbeExtra + this.wchar5.fbeExtra + this.int8b0.fbeExtra + this.int8b1.fbeExtra + this.int8b2.fbeExtra + this.int8b3.fbeExtra + this.int8b4.fbeExtra + this.int8b5.fbeExtra + this.uint8b0.fbeExtra + this.uint8b1.fbeExtra + this.uint8b2.fbeExtra + this.uint8b3.fbeExtra + this.uint8b4.fbeExtra + this.uint8b5.fbeExtra + this.int16b0.fbeExtra + this.int16b1.fbeExtra + this.int16b2.fbeExtra + this.int16b3.fbeExtra + this.int16b4.fbeExtra + this.int16b5.fbeExtra + this.uint16b0.fbeExtra + this.uint16b1.fbeExtra + this.uint16b2.fbeExtra + this.uint16b3.fbeExtra + this.uint16b4.fbeExtra + this.uint16b5.fbeExtra + this.int32b0.fbeExtra + this.int32b1.fbeExtra + this.int32b2.fbeExtra + this.int32b3.fbeExtra + this.int32b4.fbeExtra + this.int32b5.fbeExtra + this.uint32b0.fbeExtra + this.uint32b1.fbeExtra + this.uint32b2.fbeExtra + this.uint32b3.fbeExtra + this.uint32b4.fbeExtra + this.uint32b5.fbeExtra + this.int64b0.fbeExtra + this.int64b1.fbeExtra + this.int64b2.fbeExtra + this.int64b3.fbeExtra + this.int64b4.fbeExtra + this.int64b5.fbeExtra + this.uint64b0.fbeExtra + this.uint64b1.fbeExtra + this.uint64b2.fbeExtra + this.uint64b3.fbeExtra + this.uint64b4.fbeExtra + this.uint64b5.fbeExtra

    this._buffer.unshift(fbeStructOffset)

    return fbeResult
  }

  /**
   * Get the field type
   * @this {!FieldModelEnums}
   * @returns {!number} Field type
   */
  get fbeType () {
    return FieldModelEnums.fbeType
  }

  /**
   * Get the field type (static)
   * @this {!FieldModelEnums}
   * @returns {!number} Field type
   */
  static get fbeType () {
    return 1
  }

  /**
   * Check if the struct value is valid
   * @this {!FieldModelEnums}
   * @param {!boolean} fbeVerifyType Verify model type flag, defaults is true
   * @returns {!boolean} Field model valid state
   */
  verify (fbeVerifyType = true) {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return true
    }

    let fbeStructOffset = this.readUInt32(this.fbeOffset)
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return false
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    if (fbeStructSize < (4 + 4)) {
      return false
    }

    let fbeStructType = this.readUInt32(fbeStructOffset + 4)
    if (fbeVerifyType && (fbeStructType !== this.fbeType)) {
      return false
    }

    this._buffer.shift(fbeStructOffset)
    let fbeResult = this.verifyFields(fbeStructSize)
    this._buffer.unshift(fbeStructOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FieldModelEnums}
   * @param {!number} fbeStructSize FBE struct size
   * @returns {!boolean} Field model valid state
   */
  verifyFields (fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.byte0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.byte0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte0.fbeSize

    if ((fbeCurrentSize + this.byte1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.byte1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte1.fbeSize

    if ((fbeCurrentSize + this.byte2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.byte2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte2.fbeSize

    if ((fbeCurrentSize + this.byte3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.byte3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte3.fbeSize

    if ((fbeCurrentSize + this.byte4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.byte4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte4.fbeSize

    if ((fbeCurrentSize + this.byte5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.byte5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte5.fbeSize

    if ((fbeCurrentSize + this.char0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.char0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char0.fbeSize

    if ((fbeCurrentSize + this.char1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.char1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char1.fbeSize

    if ((fbeCurrentSize + this.char2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.char2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char2.fbeSize

    if ((fbeCurrentSize + this.char3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.char3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char3.fbeSize

    if ((fbeCurrentSize + this.char4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.char4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char4.fbeSize

    if ((fbeCurrentSize + this.char5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.char5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char5.fbeSize

    if ((fbeCurrentSize + this.wchar0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.wchar0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar0.fbeSize

    if ((fbeCurrentSize + this.wchar1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.wchar1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar1.fbeSize

    if ((fbeCurrentSize + this.wchar2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.wchar2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar2.fbeSize

    if ((fbeCurrentSize + this.wchar3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.wchar3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar3.fbeSize

    if ((fbeCurrentSize + this.wchar4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.wchar4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar4.fbeSize

    if ((fbeCurrentSize + this.wchar5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.wchar5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar5.fbeSize

    if ((fbeCurrentSize + this.int8b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int8b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b0.fbeSize

    if ((fbeCurrentSize + this.int8b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int8b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b1.fbeSize

    if ((fbeCurrentSize + this.int8b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int8b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b2.fbeSize

    if ((fbeCurrentSize + this.int8b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int8b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b3.fbeSize

    if ((fbeCurrentSize + this.int8b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int8b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b4.fbeSize

    if ((fbeCurrentSize + this.int8b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int8b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b5.fbeSize

    if ((fbeCurrentSize + this.uint8b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint8b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b0.fbeSize

    if ((fbeCurrentSize + this.uint8b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint8b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b1.fbeSize

    if ((fbeCurrentSize + this.uint8b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint8b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b2.fbeSize

    if ((fbeCurrentSize + this.uint8b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint8b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b3.fbeSize

    if ((fbeCurrentSize + this.uint8b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint8b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b4.fbeSize

    if ((fbeCurrentSize + this.uint8b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint8b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b5.fbeSize

    if ((fbeCurrentSize + this.int16b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int16b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b0.fbeSize

    if ((fbeCurrentSize + this.int16b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int16b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b1.fbeSize

    if ((fbeCurrentSize + this.int16b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int16b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b2.fbeSize

    if ((fbeCurrentSize + this.int16b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int16b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b3.fbeSize

    if ((fbeCurrentSize + this.int16b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int16b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b4.fbeSize

    if ((fbeCurrentSize + this.int16b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int16b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b5.fbeSize

    if ((fbeCurrentSize + this.uint16b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint16b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b0.fbeSize

    if ((fbeCurrentSize + this.uint16b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint16b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b1.fbeSize

    if ((fbeCurrentSize + this.uint16b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint16b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b2.fbeSize

    if ((fbeCurrentSize + this.uint16b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint16b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b3.fbeSize

    if ((fbeCurrentSize + this.uint16b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint16b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b4.fbeSize

    if ((fbeCurrentSize + this.uint16b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint16b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b5.fbeSize

    if ((fbeCurrentSize + this.int32b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int32b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b0.fbeSize

    if ((fbeCurrentSize + this.int32b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int32b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b1.fbeSize

    if ((fbeCurrentSize + this.int32b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int32b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b2.fbeSize

    if ((fbeCurrentSize + this.int32b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int32b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b3.fbeSize

    if ((fbeCurrentSize + this.int32b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int32b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b4.fbeSize

    if ((fbeCurrentSize + this.int32b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int32b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b5.fbeSize

    if ((fbeCurrentSize + this.uint32b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint32b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b0.fbeSize

    if ((fbeCurrentSize + this.uint32b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint32b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b1.fbeSize

    if ((fbeCurrentSize + this.uint32b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint32b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b2.fbeSize

    if ((fbeCurrentSize + this.uint32b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint32b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b3.fbeSize

    if ((fbeCurrentSize + this.uint32b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint32b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b4.fbeSize

    if ((fbeCurrentSize + this.uint32b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint32b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b5.fbeSize

    if ((fbeCurrentSize + this.int64b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int64b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b0.fbeSize

    if ((fbeCurrentSize + this.int64b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int64b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b1.fbeSize

    if ((fbeCurrentSize + this.int64b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int64b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b2.fbeSize

    if ((fbeCurrentSize + this.int64b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int64b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b3.fbeSize

    if ((fbeCurrentSize + this.int64b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int64b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b4.fbeSize

    if ((fbeCurrentSize + this.int64b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.int64b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b5.fbeSize

    if ((fbeCurrentSize + this.uint64b0.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint64b0.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b0.fbeSize

    if ((fbeCurrentSize + this.uint64b1.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint64b1.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b1.fbeSize

    if ((fbeCurrentSize + this.uint64b2.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint64b2.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b2.fbeSize

    if ((fbeCurrentSize + this.uint64b3.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint64b3.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b3.fbeSize

    if ((fbeCurrentSize + this.uint64b4.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint64b4.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b4.fbeSize

    if ((fbeCurrentSize + this.uint64b5.fbeSize) > fbeStructSize) {
      return true
    }
    if (!this.uint64b5.verify()) {
      return false
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b5.fbeSize

    return true
  }

  /**
   * Get the struct value (begin phase)
   * @this {!FieldModelEnums}
   * @returns {!number} Field model begin offset
   */
  getBegin () {
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    let fbeStructOffset = this.readUInt32(this.fbeOffset)
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + 4 + 4) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset === 0) || ((this._buffer.offset + fbeStructOffset + 4 + 4) > this._buffer.size)) {
      return 0
    }

    let fbeStructSize = this.readUInt32(fbeStructOffset)
    console.assert((fbeStructSize >= (4 + 4)), 'Model is broken!')
    if (fbeStructSize < (4 + 4)) {
      return 0
    }

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Get the struct value (end phase)
   * @this {!FieldModelEnums}
   * @param {!number} fbeBegin Field model begin offset
   */
  getEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Get the struct value
   * @this {!FieldModelEnums}
   * @param {!Enums} fbeValue Default value, defaults is new Enums()
   * @returns {!Enums} Enums value
   */
  get (fbeValue = new Enums()) {
    let fbeBegin = this.getBegin()
    if (fbeBegin === 0) {
      return fbeValue
    }

    let fbeStructSize = this.readUInt32(0)
    this.getFields(fbeValue, fbeStructSize)
    this.getEnd(fbeBegin)
    return fbeValue
  }

  /**
   * Get the struct fields values
   * @this {!FieldModelEnums}
   * @param {!Enums} fbeValue Enums value
   * @param {!number} fbeStructSize Struct size
   */
  getFields (fbeValue, fbeStructSize) {
    let fbeCurrentSize = 4 + 4

    if ((fbeCurrentSize + this.byte0.fbeSize) <= fbeStructSize) {
      fbeValue.byte0 = this.byte0.get(new EnumByte(EnumByte.ENUM_VALUE_0))
    } else {
      fbeValue.byte0 = new EnumByte(EnumByte.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte0.fbeSize

    if ((fbeCurrentSize + this.byte1.fbeSize) <= fbeStructSize) {
      fbeValue.byte1 = this.byte1.get(new EnumByte(EnumByte.ENUM_VALUE_1))
    } else {
      fbeValue.byte1 = new EnumByte(EnumByte.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte1.fbeSize

    if ((fbeCurrentSize + this.byte2.fbeSize) <= fbeStructSize) {
      fbeValue.byte2 = this.byte2.get(new EnumByte(EnumByte.ENUM_VALUE_2))
    } else {
      fbeValue.byte2 = new EnumByte(EnumByte.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte2.fbeSize

    if ((fbeCurrentSize + this.byte3.fbeSize) <= fbeStructSize) {
      fbeValue.byte3 = this.byte3.get(new EnumByte(EnumByte.ENUM_VALUE_3))
    } else {
      fbeValue.byte3 = new EnumByte(EnumByte.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte3.fbeSize

    if ((fbeCurrentSize + this.byte4.fbeSize) <= fbeStructSize) {
      fbeValue.byte4 = this.byte4.get(new EnumByte(EnumByte.ENUM_VALUE_4))
    } else {
      fbeValue.byte4 = new EnumByte(EnumByte.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte4.fbeSize

    if ((fbeCurrentSize + this.byte5.fbeSize) <= fbeStructSize) {
      fbeValue.byte5 = this.byte5.get(new EnumByte(EnumByte.ENUM_VALUE_5))
    } else {
      fbeValue.byte5 = new EnumByte(EnumByte.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.byte5.fbeSize

    if ((fbeCurrentSize + this.char0.fbeSize) <= fbeStructSize) {
      fbeValue.char0 = this.char0.get(new EnumChar(EnumChar.ENUM_VALUE_0))
    } else {
      fbeValue.char0 = new EnumChar(EnumChar.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char0.fbeSize

    if ((fbeCurrentSize + this.char1.fbeSize) <= fbeStructSize) {
      fbeValue.char1 = this.char1.get(new EnumChar(EnumChar.ENUM_VALUE_1))
    } else {
      fbeValue.char1 = new EnumChar(EnumChar.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char1.fbeSize

    if ((fbeCurrentSize + this.char2.fbeSize) <= fbeStructSize) {
      fbeValue.char2 = this.char2.get(new EnumChar(EnumChar.ENUM_VALUE_2))
    } else {
      fbeValue.char2 = new EnumChar(EnumChar.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char2.fbeSize

    if ((fbeCurrentSize + this.char3.fbeSize) <= fbeStructSize) {
      fbeValue.char3 = this.char3.get(new EnumChar(EnumChar.ENUM_VALUE_3))
    } else {
      fbeValue.char3 = new EnumChar(EnumChar.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char3.fbeSize

    if ((fbeCurrentSize + this.char4.fbeSize) <= fbeStructSize) {
      fbeValue.char4 = this.char4.get(new EnumChar(EnumChar.ENUM_VALUE_4))
    } else {
      fbeValue.char4 = new EnumChar(EnumChar.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char4.fbeSize

    if ((fbeCurrentSize + this.char5.fbeSize) <= fbeStructSize) {
      fbeValue.char5 = this.char5.get(new EnumChar(EnumChar.ENUM_VALUE_5))
    } else {
      fbeValue.char5 = new EnumChar(EnumChar.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.char5.fbeSize

    if ((fbeCurrentSize + this.wchar0.fbeSize) <= fbeStructSize) {
      fbeValue.wchar0 = this.wchar0.get(new EnumWChar(EnumWChar.ENUM_VALUE_0))
    } else {
      fbeValue.wchar0 = new EnumWChar(EnumWChar.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar0.fbeSize

    if ((fbeCurrentSize + this.wchar1.fbeSize) <= fbeStructSize) {
      fbeValue.wchar1 = this.wchar1.get(new EnumWChar(EnumWChar.ENUM_VALUE_1))
    } else {
      fbeValue.wchar1 = new EnumWChar(EnumWChar.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar1.fbeSize

    if ((fbeCurrentSize + this.wchar2.fbeSize) <= fbeStructSize) {
      fbeValue.wchar2 = this.wchar2.get(new EnumWChar(EnumWChar.ENUM_VALUE_2))
    } else {
      fbeValue.wchar2 = new EnumWChar(EnumWChar.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar2.fbeSize

    if ((fbeCurrentSize + this.wchar3.fbeSize) <= fbeStructSize) {
      fbeValue.wchar3 = this.wchar3.get(new EnumWChar(EnumWChar.ENUM_VALUE_3))
    } else {
      fbeValue.wchar3 = new EnumWChar(EnumWChar.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar3.fbeSize

    if ((fbeCurrentSize + this.wchar4.fbeSize) <= fbeStructSize) {
      fbeValue.wchar4 = this.wchar4.get(new EnumWChar(EnumWChar.ENUM_VALUE_4))
    } else {
      fbeValue.wchar4 = new EnumWChar(EnumWChar.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar4.fbeSize

    if ((fbeCurrentSize + this.wchar5.fbeSize) <= fbeStructSize) {
      fbeValue.wchar5 = this.wchar5.get(new EnumWChar(EnumWChar.ENUM_VALUE_5))
    } else {
      fbeValue.wchar5 = new EnumWChar(EnumWChar.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.wchar5.fbeSize

    if ((fbeCurrentSize + this.int8b0.fbeSize) <= fbeStructSize) {
      fbeValue.int8b0 = this.int8b0.get(new EnumInt8(EnumInt8.ENUM_VALUE_0))
    } else {
      fbeValue.int8b0 = new EnumInt8(EnumInt8.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b0.fbeSize

    if ((fbeCurrentSize + this.int8b1.fbeSize) <= fbeStructSize) {
      fbeValue.int8b1 = this.int8b1.get(new EnumInt8(EnumInt8.ENUM_VALUE_1))
    } else {
      fbeValue.int8b1 = new EnumInt8(EnumInt8.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b1.fbeSize

    if ((fbeCurrentSize + this.int8b2.fbeSize) <= fbeStructSize) {
      fbeValue.int8b2 = this.int8b2.get(new EnumInt8(EnumInt8.ENUM_VALUE_2))
    } else {
      fbeValue.int8b2 = new EnumInt8(EnumInt8.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b2.fbeSize

    if ((fbeCurrentSize + this.int8b3.fbeSize) <= fbeStructSize) {
      fbeValue.int8b3 = this.int8b3.get(new EnumInt8(EnumInt8.ENUM_VALUE_3))
    } else {
      fbeValue.int8b3 = new EnumInt8(EnumInt8.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b3.fbeSize

    if ((fbeCurrentSize + this.int8b4.fbeSize) <= fbeStructSize) {
      fbeValue.int8b4 = this.int8b4.get(new EnumInt8(EnumInt8.ENUM_VALUE_4))
    } else {
      fbeValue.int8b4 = new EnumInt8(EnumInt8.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b4.fbeSize

    if ((fbeCurrentSize + this.int8b5.fbeSize) <= fbeStructSize) {
      fbeValue.int8b5 = this.int8b5.get(new EnumInt8(EnumInt8.ENUM_VALUE_5))
    } else {
      fbeValue.int8b5 = new EnumInt8(EnumInt8.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int8b5.fbeSize

    if ((fbeCurrentSize + this.uint8b0.fbeSize) <= fbeStructSize) {
      fbeValue.uint8b0 = this.uint8b0.get(new EnumUInt8(EnumUInt8.ENUM_VALUE_0))
    } else {
      fbeValue.uint8b0 = new EnumUInt8(EnumUInt8.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b0.fbeSize

    if ((fbeCurrentSize + this.uint8b1.fbeSize) <= fbeStructSize) {
      fbeValue.uint8b1 = this.uint8b1.get(new EnumUInt8(EnumUInt8.ENUM_VALUE_1))
    } else {
      fbeValue.uint8b1 = new EnumUInt8(EnumUInt8.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b1.fbeSize

    if ((fbeCurrentSize + this.uint8b2.fbeSize) <= fbeStructSize) {
      fbeValue.uint8b2 = this.uint8b2.get(new EnumUInt8(EnumUInt8.ENUM_VALUE_2))
    } else {
      fbeValue.uint8b2 = new EnumUInt8(EnumUInt8.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b2.fbeSize

    if ((fbeCurrentSize + this.uint8b3.fbeSize) <= fbeStructSize) {
      fbeValue.uint8b3 = this.uint8b3.get(new EnumUInt8(EnumUInt8.ENUM_VALUE_3))
    } else {
      fbeValue.uint8b3 = new EnumUInt8(EnumUInt8.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b3.fbeSize

    if ((fbeCurrentSize + this.uint8b4.fbeSize) <= fbeStructSize) {
      fbeValue.uint8b4 = this.uint8b4.get(new EnumUInt8(EnumUInt8.ENUM_VALUE_4))
    } else {
      fbeValue.uint8b4 = new EnumUInt8(EnumUInt8.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b4.fbeSize

    if ((fbeCurrentSize + this.uint8b5.fbeSize) <= fbeStructSize) {
      fbeValue.uint8b5 = this.uint8b5.get(new EnumUInt8(EnumUInt8.ENUM_VALUE_5))
    } else {
      fbeValue.uint8b5 = new EnumUInt8(EnumUInt8.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint8b5.fbeSize

    if ((fbeCurrentSize + this.int16b0.fbeSize) <= fbeStructSize) {
      fbeValue.int16b0 = this.int16b0.get(new EnumInt16(EnumInt16.ENUM_VALUE_0))
    } else {
      fbeValue.int16b0 = new EnumInt16(EnumInt16.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b0.fbeSize

    if ((fbeCurrentSize + this.int16b1.fbeSize) <= fbeStructSize) {
      fbeValue.int16b1 = this.int16b1.get(new EnumInt16(EnumInt16.ENUM_VALUE_1))
    } else {
      fbeValue.int16b1 = new EnumInt16(EnumInt16.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b1.fbeSize

    if ((fbeCurrentSize + this.int16b2.fbeSize) <= fbeStructSize) {
      fbeValue.int16b2 = this.int16b2.get(new EnumInt16(EnumInt16.ENUM_VALUE_2))
    } else {
      fbeValue.int16b2 = new EnumInt16(EnumInt16.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b2.fbeSize

    if ((fbeCurrentSize + this.int16b3.fbeSize) <= fbeStructSize) {
      fbeValue.int16b3 = this.int16b3.get(new EnumInt16(EnumInt16.ENUM_VALUE_3))
    } else {
      fbeValue.int16b3 = new EnumInt16(EnumInt16.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b3.fbeSize

    if ((fbeCurrentSize + this.int16b4.fbeSize) <= fbeStructSize) {
      fbeValue.int16b4 = this.int16b4.get(new EnumInt16(EnumInt16.ENUM_VALUE_4))
    } else {
      fbeValue.int16b4 = new EnumInt16(EnumInt16.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b4.fbeSize

    if ((fbeCurrentSize + this.int16b5.fbeSize) <= fbeStructSize) {
      fbeValue.int16b5 = this.int16b5.get(new EnumInt16(EnumInt16.ENUM_VALUE_5))
    } else {
      fbeValue.int16b5 = new EnumInt16(EnumInt16.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int16b5.fbeSize

    if ((fbeCurrentSize + this.uint16b0.fbeSize) <= fbeStructSize) {
      fbeValue.uint16b0 = this.uint16b0.get(new EnumUInt16(EnumUInt16.ENUM_VALUE_0))
    } else {
      fbeValue.uint16b0 = new EnumUInt16(EnumUInt16.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b0.fbeSize

    if ((fbeCurrentSize + this.uint16b1.fbeSize) <= fbeStructSize) {
      fbeValue.uint16b1 = this.uint16b1.get(new EnumUInt16(EnumUInt16.ENUM_VALUE_1))
    } else {
      fbeValue.uint16b1 = new EnumUInt16(EnumUInt16.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b1.fbeSize

    if ((fbeCurrentSize + this.uint16b2.fbeSize) <= fbeStructSize) {
      fbeValue.uint16b2 = this.uint16b2.get(new EnumUInt16(EnumUInt16.ENUM_VALUE_2))
    } else {
      fbeValue.uint16b2 = new EnumUInt16(EnumUInt16.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b2.fbeSize

    if ((fbeCurrentSize + this.uint16b3.fbeSize) <= fbeStructSize) {
      fbeValue.uint16b3 = this.uint16b3.get(new EnumUInt16(EnumUInt16.ENUM_VALUE_3))
    } else {
      fbeValue.uint16b3 = new EnumUInt16(EnumUInt16.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b3.fbeSize

    if ((fbeCurrentSize + this.uint16b4.fbeSize) <= fbeStructSize) {
      fbeValue.uint16b4 = this.uint16b4.get(new EnumUInt16(EnumUInt16.ENUM_VALUE_4))
    } else {
      fbeValue.uint16b4 = new EnumUInt16(EnumUInt16.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b4.fbeSize

    if ((fbeCurrentSize + this.uint16b5.fbeSize) <= fbeStructSize) {
      fbeValue.uint16b5 = this.uint16b5.get(new EnumUInt16(EnumUInt16.ENUM_VALUE_5))
    } else {
      fbeValue.uint16b5 = new EnumUInt16(EnumUInt16.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint16b5.fbeSize

    if ((fbeCurrentSize + this.int32b0.fbeSize) <= fbeStructSize) {
      fbeValue.int32b0 = this.int32b0.get(new EnumInt32(EnumInt32.ENUM_VALUE_0))
    } else {
      fbeValue.int32b0 = new EnumInt32(EnumInt32.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b0.fbeSize

    if ((fbeCurrentSize + this.int32b1.fbeSize) <= fbeStructSize) {
      fbeValue.int32b1 = this.int32b1.get(new EnumInt32(EnumInt32.ENUM_VALUE_1))
    } else {
      fbeValue.int32b1 = new EnumInt32(EnumInt32.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b1.fbeSize

    if ((fbeCurrentSize + this.int32b2.fbeSize) <= fbeStructSize) {
      fbeValue.int32b2 = this.int32b2.get(new EnumInt32(EnumInt32.ENUM_VALUE_2))
    } else {
      fbeValue.int32b2 = new EnumInt32(EnumInt32.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b2.fbeSize

    if ((fbeCurrentSize + this.int32b3.fbeSize) <= fbeStructSize) {
      fbeValue.int32b3 = this.int32b3.get(new EnumInt32(EnumInt32.ENUM_VALUE_3))
    } else {
      fbeValue.int32b3 = new EnumInt32(EnumInt32.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b3.fbeSize

    if ((fbeCurrentSize + this.int32b4.fbeSize) <= fbeStructSize) {
      fbeValue.int32b4 = this.int32b4.get(new EnumInt32(EnumInt32.ENUM_VALUE_4))
    } else {
      fbeValue.int32b4 = new EnumInt32(EnumInt32.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b4.fbeSize

    if ((fbeCurrentSize + this.int32b5.fbeSize) <= fbeStructSize) {
      fbeValue.int32b5 = this.int32b5.get(new EnumInt32(EnumInt32.ENUM_VALUE_5))
    } else {
      fbeValue.int32b5 = new EnumInt32(EnumInt32.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int32b5.fbeSize

    if ((fbeCurrentSize + this.uint32b0.fbeSize) <= fbeStructSize) {
      fbeValue.uint32b0 = this.uint32b0.get(new EnumUInt32(EnumUInt32.ENUM_VALUE_0))
    } else {
      fbeValue.uint32b0 = new EnumUInt32(EnumUInt32.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b0.fbeSize

    if ((fbeCurrentSize + this.uint32b1.fbeSize) <= fbeStructSize) {
      fbeValue.uint32b1 = this.uint32b1.get(new EnumUInt32(EnumUInt32.ENUM_VALUE_1))
    } else {
      fbeValue.uint32b1 = new EnumUInt32(EnumUInt32.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b1.fbeSize

    if ((fbeCurrentSize + this.uint32b2.fbeSize) <= fbeStructSize) {
      fbeValue.uint32b2 = this.uint32b2.get(new EnumUInt32(EnumUInt32.ENUM_VALUE_2))
    } else {
      fbeValue.uint32b2 = new EnumUInt32(EnumUInt32.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b2.fbeSize

    if ((fbeCurrentSize + this.uint32b3.fbeSize) <= fbeStructSize) {
      fbeValue.uint32b3 = this.uint32b3.get(new EnumUInt32(EnumUInt32.ENUM_VALUE_3))
    } else {
      fbeValue.uint32b3 = new EnumUInt32(EnumUInt32.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b3.fbeSize

    if ((fbeCurrentSize + this.uint32b4.fbeSize) <= fbeStructSize) {
      fbeValue.uint32b4 = this.uint32b4.get(new EnumUInt32(EnumUInt32.ENUM_VALUE_4))
    } else {
      fbeValue.uint32b4 = new EnumUInt32(EnumUInt32.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b4.fbeSize

    if ((fbeCurrentSize + this.uint32b5.fbeSize) <= fbeStructSize) {
      fbeValue.uint32b5 = this.uint32b5.get(new EnumUInt32(EnumUInt32.ENUM_VALUE_5))
    } else {
      fbeValue.uint32b5 = new EnumUInt32(EnumUInt32.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint32b5.fbeSize

    if ((fbeCurrentSize + this.int64b0.fbeSize) <= fbeStructSize) {
      fbeValue.int64b0 = this.int64b0.get(new EnumInt64(EnumInt64.ENUM_VALUE_0))
    } else {
      fbeValue.int64b0 = new EnumInt64(EnumInt64.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b0.fbeSize

    if ((fbeCurrentSize + this.int64b1.fbeSize) <= fbeStructSize) {
      fbeValue.int64b1 = this.int64b1.get(new EnumInt64(EnumInt64.ENUM_VALUE_1))
    } else {
      fbeValue.int64b1 = new EnumInt64(EnumInt64.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b1.fbeSize

    if ((fbeCurrentSize + this.int64b2.fbeSize) <= fbeStructSize) {
      fbeValue.int64b2 = this.int64b2.get(new EnumInt64(EnumInt64.ENUM_VALUE_2))
    } else {
      fbeValue.int64b2 = new EnumInt64(EnumInt64.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b2.fbeSize

    if ((fbeCurrentSize + this.int64b3.fbeSize) <= fbeStructSize) {
      fbeValue.int64b3 = this.int64b3.get(new EnumInt64(EnumInt64.ENUM_VALUE_3))
    } else {
      fbeValue.int64b3 = new EnumInt64(EnumInt64.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b3.fbeSize

    if ((fbeCurrentSize + this.int64b4.fbeSize) <= fbeStructSize) {
      fbeValue.int64b4 = this.int64b4.get(new EnumInt64(EnumInt64.ENUM_VALUE_4))
    } else {
      fbeValue.int64b4 = new EnumInt64(EnumInt64.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b4.fbeSize

    if ((fbeCurrentSize + this.int64b5.fbeSize) <= fbeStructSize) {
      fbeValue.int64b5 = this.int64b5.get(new EnumInt64(EnumInt64.ENUM_VALUE_5))
    } else {
      fbeValue.int64b5 = new EnumInt64(EnumInt64.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.int64b5.fbeSize

    if ((fbeCurrentSize + this.uint64b0.fbeSize) <= fbeStructSize) {
      fbeValue.uint64b0 = this.uint64b0.get(new EnumUInt64(EnumUInt64.ENUM_VALUE_0))
    } else {
      fbeValue.uint64b0 = new EnumUInt64(EnumUInt64.ENUM_VALUE_0)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b0.fbeSize

    if ((fbeCurrentSize + this.uint64b1.fbeSize) <= fbeStructSize) {
      fbeValue.uint64b1 = this.uint64b1.get(new EnumUInt64(EnumUInt64.ENUM_VALUE_1))
    } else {
      fbeValue.uint64b1 = new EnumUInt64(EnumUInt64.ENUM_VALUE_1)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b1.fbeSize

    if ((fbeCurrentSize + this.uint64b2.fbeSize) <= fbeStructSize) {
      fbeValue.uint64b2 = this.uint64b2.get(new EnumUInt64(EnumUInt64.ENUM_VALUE_2))
    } else {
      fbeValue.uint64b2 = new EnumUInt64(EnumUInt64.ENUM_VALUE_2)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b2.fbeSize

    if ((fbeCurrentSize + this.uint64b3.fbeSize) <= fbeStructSize) {
      fbeValue.uint64b3 = this.uint64b3.get(new EnumUInt64(EnumUInt64.ENUM_VALUE_3))
    } else {
      fbeValue.uint64b3 = new EnumUInt64(EnumUInt64.ENUM_VALUE_3)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b3.fbeSize

    if ((fbeCurrentSize + this.uint64b4.fbeSize) <= fbeStructSize) {
      fbeValue.uint64b4 = this.uint64b4.get(new EnumUInt64(EnumUInt64.ENUM_VALUE_4))
    } else {
      fbeValue.uint64b4 = new EnumUInt64(EnumUInt64.ENUM_VALUE_4)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b4.fbeSize

    if ((fbeCurrentSize + this.uint64b5.fbeSize) <= fbeStructSize) {
      fbeValue.uint64b5 = this.uint64b5.get(new EnumUInt64(EnumUInt64.ENUM_VALUE_5))
    } else {
      fbeValue.uint64b5 = new EnumUInt64(EnumUInt64.ENUM_VALUE_5)
    }
    // noinspection JSUnusedAssignment
    fbeCurrentSize += this.uint64b5.fbeSize
  }

  /**
   * Set the struct value (begin phase)
   * @this {!FieldModelEnums}
   * @returns {!number} Field model begin offset
   */
  setBegin () {
    console.assert(((this._buffer.offset + this.fbeOffset + this.fbeSize) <= this._buffer.size), 'Model is broken!')
    if ((this._buffer.offset + this.fbeOffset + this.fbeSize) > this._buffer.size) {
      return 0
    }

    let fbeStructSize = this.fbeBody
    let fbeStructOffset = this._buffer.allocate(fbeStructSize) - this._buffer.offset
    console.assert((fbeStructOffset > 0) && ((this._buffer.offset + fbeStructOffset + fbeStructSize) <= this._buffer.size), 'Model is broken!')
    if ((fbeStructOffset <= 0) || ((this._buffer.offset + fbeStructOffset + fbeStructSize) > this._buffer.size)) {
      return 0
    }

    this.writeUInt32(this.fbeOffset, fbeStructOffset)
    this.writeUInt32(fbeStructOffset, fbeStructSize)
    this.writeUInt32(fbeStructOffset + 4, this.fbeType)

    this._buffer.shift(fbeStructOffset)
    return fbeStructOffset
  }

  /**
   * Set the struct value (end phase)
   * @this {!FieldModelEnums}
   * @param {!number} fbeBegin Field model begin offset
   */
  setEnd (fbeBegin) {
    this._buffer.unshift(fbeBegin)
  }

  /**
   * Set the struct value
   * @this {!FieldModelEnums}
   * @param {!Enums} fbeValue Enums value
   */
  set (fbeValue) {
    let fbeBegin = this.setBegin()
    if (fbeBegin === 0) {
      return
    }

    this.setFields(fbeValue)
    this.setEnd(fbeBegin)
  }

  /**
   * Set the struct fields values
   * @this {!FieldModelEnums}
   * @param {Enums} fbeValue Enums value
   */
  setFields (fbeValue) {
    this.byte0.set(fbeValue.byte0)
    this.byte1.set(fbeValue.byte1)
    this.byte2.set(fbeValue.byte2)
    this.byte3.set(fbeValue.byte3)
    this.byte4.set(fbeValue.byte4)
    this.byte5.set(fbeValue.byte5)
    this.char0.set(fbeValue.char0)
    this.char1.set(fbeValue.char1)
    this.char2.set(fbeValue.char2)
    this.char3.set(fbeValue.char3)
    this.char4.set(fbeValue.char4)
    this.char5.set(fbeValue.char5)
    this.wchar0.set(fbeValue.wchar0)
    this.wchar1.set(fbeValue.wchar1)
    this.wchar2.set(fbeValue.wchar2)
    this.wchar3.set(fbeValue.wchar3)
    this.wchar4.set(fbeValue.wchar4)
    this.wchar5.set(fbeValue.wchar5)
    this.int8b0.set(fbeValue.int8b0)
    this.int8b1.set(fbeValue.int8b1)
    this.int8b2.set(fbeValue.int8b2)
    this.int8b3.set(fbeValue.int8b3)
    this.int8b4.set(fbeValue.int8b4)
    this.int8b5.set(fbeValue.int8b5)
    this.uint8b0.set(fbeValue.uint8b0)
    this.uint8b1.set(fbeValue.uint8b1)
    this.uint8b2.set(fbeValue.uint8b2)
    this.uint8b3.set(fbeValue.uint8b3)
    this.uint8b4.set(fbeValue.uint8b4)
    this.uint8b5.set(fbeValue.uint8b5)
    this.int16b0.set(fbeValue.int16b0)
    this.int16b1.set(fbeValue.int16b1)
    this.int16b2.set(fbeValue.int16b2)
    this.int16b3.set(fbeValue.int16b3)
    this.int16b4.set(fbeValue.int16b4)
    this.int16b5.set(fbeValue.int16b5)
    this.uint16b0.set(fbeValue.uint16b0)
    this.uint16b1.set(fbeValue.uint16b1)
    this.uint16b2.set(fbeValue.uint16b2)
    this.uint16b3.set(fbeValue.uint16b3)
    this.uint16b4.set(fbeValue.uint16b4)
    this.uint16b5.set(fbeValue.uint16b5)
    this.int32b0.set(fbeValue.int32b0)
    this.int32b1.set(fbeValue.int32b1)
    this.int32b2.set(fbeValue.int32b2)
    this.int32b3.set(fbeValue.int32b3)
    this.int32b4.set(fbeValue.int32b4)
    this.int32b5.set(fbeValue.int32b5)
    this.uint32b0.set(fbeValue.uint32b0)
    this.uint32b1.set(fbeValue.uint32b1)
    this.uint32b2.set(fbeValue.uint32b2)
    this.uint32b3.set(fbeValue.uint32b3)
    this.uint32b4.set(fbeValue.uint32b4)
    this.uint32b5.set(fbeValue.uint32b5)
    this.int64b0.set(fbeValue.int64b0)
    this.int64b1.set(fbeValue.int64b1)
    this.int64b2.set(fbeValue.int64b2)
    this.int64b3.set(fbeValue.int64b3)
    this.int64b4.set(fbeValue.int64b4)
    this.int64b5.set(fbeValue.int64b5)
    this.uint64b0.set(fbeValue.uint64b0)
    this.uint64b1.set(fbeValue.uint64b1)
    this.uint64b2.set(fbeValue.uint64b2)
    this.uint64b3.set(fbeValue.uint64b3)
    this.uint64b4.set(fbeValue.uint64b4)
    this.uint64b5.set(fbeValue.uint64b5)
  }
}

exports.FieldModelEnums = FieldModelEnums

/**
 * Fast Binary Encoding Enums model
 */
class EnumsModel extends fbe.Model {
  /**
   * Initialize model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FieldModelEnums(this.buffer, 4)
  }

  /**
   * Get the Enums model
   * @this {!EnumsModel}
   * @returns {!FieldModelEnums} model Enums model
   */
  get model () {
    return this._model
  }

  /**
   * Get the model size
   * @this {!EnumsModel}
   * @returns {!number} Model size
   */
  get fbeSize () {
    return this.model.fbeSize + this.model.fbeExtra
  }

  /**
   * Get the model type
   * @this {!EnumsModel}
   * @returns {!number} Model type
   */
  get fbeType () {
    return EnumsModel.fbeType
  }

  /**
   * Get the model type (static)
   * @this {!EnumsModel}
   * @returns {!number} Model type
   */
  static get fbeType () {
    return FieldModelEnums.fbeType
  }

  /**
   * Check if the struct value is valid
   * @this {!EnumsModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this.model.fbeOffset - 4) > this.buffer.size) {
      return false
    }

    let fbeFullSize = this.readUInt32(this.model.fbeOffset - 4)
    if (fbeFullSize < this.model.fbeSize) {
      return false
    }

    return this.model.verify()
  }

  /**
   * Create a new model (begin phase)
   * @this {!EnumsModel}
   * @returns {!number} Model begin offset
   */
  createBegin () {
    return this.buffer.allocate(4 + this.model.fbeSize)
  }

  /**
   * Create a new model (end phase)
   * @this {!EnumsModel}
   * @param {!number} fbeBegin Model begin offset
   */
  createEnd (fbeBegin) {
    let fbeEnd = this.buffer.size
    let fbeFullSize = fbeEnd - fbeBegin
    this.writeUInt32(this.model.fbeOffset - 4, fbeFullSize)
    return fbeFullSize
  }

  /**
   * Serialize the struct value
   * @this {!EnumsModel}
   * @param {!Enums} value Enums value
   * @return {!number} Model begin offset
   */
  serialize (value) {
    let fbeBegin = this.createBegin()
    this.model.set(value)
    return this.createEnd(fbeBegin)
  }

  /**
   * Deserialize the struct value
   * @this {!EnumsModel}
   * @param {!Enums} value Enums value, defaults is new Enums()
   * @return {!object} Deserialized Enums value and its size
   */
  deserialize (value = new Enums()) {
    if ((this.buffer.offset + this.model.fbeOffset - 4) > this.buffer.size) {
      return { value: new Enums(), size: 0 }
    }

    let fbeFullSize = this.readUInt32(this.model.fbeOffset - 4)
    console.assert((fbeFullSize >= this.model.fbeSize), 'Model is broken!')
    if (fbeFullSize < this.model.fbeSize) {
      return { value: new Enums(), size: 0 }
    }

    this.model.get(value)
    return { value: value, size: fbeFullSize }
  }

  /**
   * Move to the next struct value
   * @this {!EnumsModel}
   * @param {!number} prev Previous Enums model size
   */
  next (prev) {
    this.model.fbeShift(prev)
  }
}

exports.EnumsModel = EnumsModel

/**
 * Fast Binary Encoding Enums final model
 */
class FinalModelEnums extends fbe.FinalModel {
  /**
   * Initialize final model with the given buffer and offset
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Buffer
   * @param {!number} offset Offset
   * @constructor
   */
  constructor (buffer, offset) {
    super(buffer, offset)
    this._byte0 = new FinalModelEnumByte(buffer, 0)
    this._byte1 = new FinalModelEnumByte(buffer, 0)
    this._byte2 = new FinalModelEnumByte(buffer, 0)
    this._byte3 = new FinalModelEnumByte(buffer, 0)
    this._byte4 = new FinalModelEnumByte(buffer, 0)
    this._byte5 = new FinalModelEnumByte(buffer, 0)
    this._char0 = new FinalModelEnumChar(buffer, 0)
    this._char1 = new FinalModelEnumChar(buffer, 0)
    this._char2 = new FinalModelEnumChar(buffer, 0)
    this._char3 = new FinalModelEnumChar(buffer, 0)
    this._char4 = new FinalModelEnumChar(buffer, 0)
    this._char5 = new FinalModelEnumChar(buffer, 0)
    this._wchar0 = new FinalModelEnumWChar(buffer, 0)
    this._wchar1 = new FinalModelEnumWChar(buffer, 0)
    this._wchar2 = new FinalModelEnumWChar(buffer, 0)
    this._wchar3 = new FinalModelEnumWChar(buffer, 0)
    this._wchar4 = new FinalModelEnumWChar(buffer, 0)
    this._wchar5 = new FinalModelEnumWChar(buffer, 0)
    this._int8b0 = new FinalModelEnumInt8(buffer, 0)
    this._int8b1 = new FinalModelEnumInt8(buffer, 0)
    this._int8b2 = new FinalModelEnumInt8(buffer, 0)
    this._int8b3 = new FinalModelEnumInt8(buffer, 0)
    this._int8b4 = new FinalModelEnumInt8(buffer, 0)
    this._int8b5 = new FinalModelEnumInt8(buffer, 0)
    this._uint8b0 = new FinalModelEnumUInt8(buffer, 0)
    this._uint8b1 = new FinalModelEnumUInt8(buffer, 0)
    this._uint8b2 = new FinalModelEnumUInt8(buffer, 0)
    this._uint8b3 = new FinalModelEnumUInt8(buffer, 0)
    this._uint8b4 = new FinalModelEnumUInt8(buffer, 0)
    this._uint8b5 = new FinalModelEnumUInt8(buffer, 0)
    this._int16b0 = new FinalModelEnumInt16(buffer, 0)
    this._int16b1 = new FinalModelEnumInt16(buffer, 0)
    this._int16b2 = new FinalModelEnumInt16(buffer, 0)
    this._int16b3 = new FinalModelEnumInt16(buffer, 0)
    this._int16b4 = new FinalModelEnumInt16(buffer, 0)
    this._int16b5 = new FinalModelEnumInt16(buffer, 0)
    this._uint16b0 = new FinalModelEnumUInt16(buffer, 0)
    this._uint16b1 = new FinalModelEnumUInt16(buffer, 0)
    this._uint16b2 = new FinalModelEnumUInt16(buffer, 0)
    this._uint16b3 = new FinalModelEnumUInt16(buffer, 0)
    this._uint16b4 = new FinalModelEnumUInt16(buffer, 0)
    this._uint16b5 = new FinalModelEnumUInt16(buffer, 0)
    this._int32b0 = new FinalModelEnumInt32(buffer, 0)
    this._int32b1 = new FinalModelEnumInt32(buffer, 0)
    this._int32b2 = new FinalModelEnumInt32(buffer, 0)
    this._int32b3 = new FinalModelEnumInt32(buffer, 0)
    this._int32b4 = new FinalModelEnumInt32(buffer, 0)
    this._int32b5 = new FinalModelEnumInt32(buffer, 0)
    this._uint32b0 = new FinalModelEnumUInt32(buffer, 0)
    this._uint32b1 = new FinalModelEnumUInt32(buffer, 0)
    this._uint32b2 = new FinalModelEnumUInt32(buffer, 0)
    this._uint32b3 = new FinalModelEnumUInt32(buffer, 0)
    this._uint32b4 = new FinalModelEnumUInt32(buffer, 0)
    this._uint32b5 = new FinalModelEnumUInt32(buffer, 0)
    this._int64b0 = new FinalModelEnumInt64(buffer, 0)
    this._int64b1 = new FinalModelEnumInt64(buffer, 0)
    this._int64b2 = new FinalModelEnumInt64(buffer, 0)
    this._int64b3 = new FinalModelEnumInt64(buffer, 0)
    this._int64b4 = new FinalModelEnumInt64(buffer, 0)
    this._int64b5 = new FinalModelEnumInt64(buffer, 0)
    this._uint64b0 = new FinalModelEnumUInt64(buffer, 0)
    this._uint64b1 = new FinalModelEnumUInt64(buffer, 0)
    this._uint64b2 = new FinalModelEnumUInt64(buffer, 0)
    this._uint64b3 = new FinalModelEnumUInt64(buffer, 0)
    this._uint64b4 = new FinalModelEnumUInt64(buffer, 0)
    this._uint64b5 = new FinalModelEnumUInt64(buffer, 0)
  }

  /**
   * Get the byte0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumByte} byte0 final model
   */
  get byte0 () {
    return this._byte0
  }

  /**
   * Get the byte1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumByte} byte1 final model
   */
  get byte1 () {
    return this._byte1
  }

  /**
   * Get the byte2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumByte} byte2 final model
   */
  get byte2 () {
    return this._byte2
  }

  /**
   * Get the byte3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumByte} byte3 final model
   */
  get byte3 () {
    return this._byte3
  }

  /**
   * Get the byte4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumByte} byte4 final model
   */
  get byte4 () {
    return this._byte4
  }

  /**
   * Get the byte5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumByte} byte5 final model
   */
  get byte5 () {
    return this._byte5
  }

  /**
   * Get the char0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumChar} char0 final model
   */
  get char0 () {
    return this._char0
  }

  /**
   * Get the char1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumChar} char1 final model
   */
  get char1 () {
    return this._char1
  }

  /**
   * Get the char2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumChar} char2 final model
   */
  get char2 () {
    return this._char2
  }

  /**
   * Get the char3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumChar} char3 final model
   */
  get char3 () {
    return this._char3
  }

  /**
   * Get the char4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumChar} char4 final model
   */
  get char4 () {
    return this._char4
  }

  /**
   * Get the char5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumChar} char5 final model
   */
  get char5 () {
    return this._char5
  }

  /**
   * Get the wchar0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumWChar} wchar0 final model
   */
  get wchar0 () {
    return this._wchar0
  }

  /**
   * Get the wchar1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumWChar} wchar1 final model
   */
  get wchar1 () {
    return this._wchar1
  }

  /**
   * Get the wchar2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumWChar} wchar2 final model
   */
  get wchar2 () {
    return this._wchar2
  }

  /**
   * Get the wchar3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumWChar} wchar3 final model
   */
  get wchar3 () {
    return this._wchar3
  }

  /**
   * Get the wchar4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumWChar} wchar4 final model
   */
  get wchar4 () {
    return this._wchar4
  }

  /**
   * Get the wchar5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumWChar} wchar5 final model
   */
  get wchar5 () {
    return this._wchar5
  }

  /**
   * Get the int8b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt8} int8b0 final model
   */
  get int8b0 () {
    return this._int8b0
  }

  /**
   * Get the int8b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt8} int8b1 final model
   */
  get int8b1 () {
    return this._int8b1
  }

  /**
   * Get the int8b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt8} int8b2 final model
   */
  get int8b2 () {
    return this._int8b2
  }

  /**
   * Get the int8b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt8} int8b3 final model
   */
  get int8b3 () {
    return this._int8b3
  }

  /**
   * Get the int8b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt8} int8b4 final model
   */
  get int8b4 () {
    return this._int8b4
  }

  /**
   * Get the int8b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt8} int8b5 final model
   */
  get int8b5 () {
    return this._int8b5
  }

  /**
   * Get the uint8b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt8} uint8b0 final model
   */
  get uint8b0 () {
    return this._uint8b0
  }

  /**
   * Get the uint8b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt8} uint8b1 final model
   */
  get uint8b1 () {
    return this._uint8b1
  }

  /**
   * Get the uint8b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt8} uint8b2 final model
   */
  get uint8b2 () {
    return this._uint8b2
  }

  /**
   * Get the uint8b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt8} uint8b3 final model
   */
  get uint8b3 () {
    return this._uint8b3
  }

  /**
   * Get the uint8b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt8} uint8b4 final model
   */
  get uint8b4 () {
    return this._uint8b4
  }

  /**
   * Get the uint8b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt8} uint8b5 final model
   */
  get uint8b5 () {
    return this._uint8b5
  }

  /**
   * Get the int16b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt16} int16b0 final model
   */
  get int16b0 () {
    return this._int16b0
  }

  /**
   * Get the int16b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt16} int16b1 final model
   */
  get int16b1 () {
    return this._int16b1
  }

  /**
   * Get the int16b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt16} int16b2 final model
   */
  get int16b2 () {
    return this._int16b2
  }

  /**
   * Get the int16b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt16} int16b3 final model
   */
  get int16b3 () {
    return this._int16b3
  }

  /**
   * Get the int16b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt16} int16b4 final model
   */
  get int16b4 () {
    return this._int16b4
  }

  /**
   * Get the int16b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt16} int16b5 final model
   */
  get int16b5 () {
    return this._int16b5
  }

  /**
   * Get the uint16b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt16} uint16b0 final model
   */
  get uint16b0 () {
    return this._uint16b0
  }

  /**
   * Get the uint16b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt16} uint16b1 final model
   */
  get uint16b1 () {
    return this._uint16b1
  }

  /**
   * Get the uint16b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt16} uint16b2 final model
   */
  get uint16b2 () {
    return this._uint16b2
  }

  /**
   * Get the uint16b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt16} uint16b3 final model
   */
  get uint16b3 () {
    return this._uint16b3
  }

  /**
   * Get the uint16b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt16} uint16b4 final model
   */
  get uint16b4 () {
    return this._uint16b4
  }

  /**
   * Get the uint16b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt16} uint16b5 final model
   */
  get uint16b5 () {
    return this._uint16b5
  }

  /**
   * Get the int32b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt32} int32b0 final model
   */
  get int32b0 () {
    return this._int32b0
  }

  /**
   * Get the int32b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt32} int32b1 final model
   */
  get int32b1 () {
    return this._int32b1
  }

  /**
   * Get the int32b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt32} int32b2 final model
   */
  get int32b2 () {
    return this._int32b2
  }

  /**
   * Get the int32b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt32} int32b3 final model
   */
  get int32b3 () {
    return this._int32b3
  }

  /**
   * Get the int32b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt32} int32b4 final model
   */
  get int32b4 () {
    return this._int32b4
  }

  /**
   * Get the int32b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt32} int32b5 final model
   */
  get int32b5 () {
    return this._int32b5
  }

  /**
   * Get the uint32b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt32} uint32b0 final model
   */
  get uint32b0 () {
    return this._uint32b0
  }

  /**
   * Get the uint32b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt32} uint32b1 final model
   */
  get uint32b1 () {
    return this._uint32b1
  }

  /**
   * Get the uint32b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt32} uint32b2 final model
   */
  get uint32b2 () {
    return this._uint32b2
  }

  /**
   * Get the uint32b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt32} uint32b3 final model
   */
  get uint32b3 () {
    return this._uint32b3
  }

  /**
   * Get the uint32b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt32} uint32b4 final model
   */
  get uint32b4 () {
    return this._uint32b4
  }

  /**
   * Get the uint32b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt32} uint32b5 final model
   */
  get uint32b5 () {
    return this._uint32b5
  }

  /**
   * Get the int64b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt64} int64b0 final model
   */
  get int64b0 () {
    return this._int64b0
  }

  /**
   * Get the int64b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt64} int64b1 final model
   */
  get int64b1 () {
    return this._int64b1
  }

  /**
   * Get the int64b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt64} int64b2 final model
   */
  get int64b2 () {
    return this._int64b2
  }

  /**
   * Get the int64b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt64} int64b3 final model
   */
  get int64b3 () {
    return this._int64b3
  }

  /**
   * Get the int64b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt64} int64b4 final model
   */
  get int64b4 () {
    return this._int64b4
  }

  /**
   * Get the int64b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumInt64} int64b5 final model
   */
  get int64b5 () {
    return this._int64b5
  }

  /**
   * Get the uint64b0 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt64} uint64b0 final model
   */
  get uint64b0 () {
    return this._uint64b0
  }

  /**
   * Get the uint64b1 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt64} uint64b1 final model
   */
  get uint64b1 () {
    return this._uint64b1
  }

  /**
   * Get the uint64b2 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt64} uint64b2 final model
   */
  get uint64b2 () {
    return this._uint64b2
  }

  /**
   * Get the uint64b3 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt64} uint64b3 final model
   */
  get uint64b3 () {
    return this._uint64b3
  }

  /**
   * Get the uint64b4 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt64} uint64b4 final model
   */
  get uint64b4 () {
    return this._uint64b4
  }

  /**
   * Get the uint64b5 final model
   * @this {!FinalModelEnums}
   * @returns {!FinalModelEnumUInt64} uint64b5 final model
   */
  get uint64b5 () {
    return this._uint64b5
  }

  /**
   * Get the allocation size
   * @this {!FinalModelEnums}
   * @param {!Enums} fbeValue Enums value
   * @returns {!number} Allocation size
   */
  fbeAllocationSize (fbeValue) {
    return 0 + this.byte0.fbeAllocationSize(fbeValue.byte0) + this.byte1.fbeAllocationSize(fbeValue.byte1) + this.byte2.fbeAllocationSize(fbeValue.byte2) + this.byte3.fbeAllocationSize(fbeValue.byte3) + this.byte4.fbeAllocationSize(fbeValue.byte4) + this.byte5.fbeAllocationSize(fbeValue.byte5) + this.char0.fbeAllocationSize(fbeValue.char0) + this.char1.fbeAllocationSize(fbeValue.char1) + this.char2.fbeAllocationSize(fbeValue.char2) + this.char3.fbeAllocationSize(fbeValue.char3) + this.char4.fbeAllocationSize(fbeValue.char4) + this.char5.fbeAllocationSize(fbeValue.char5) + this.wchar0.fbeAllocationSize(fbeValue.wchar0) + this.wchar1.fbeAllocationSize(fbeValue.wchar1) + this.wchar2.fbeAllocationSize(fbeValue.wchar2) + this.wchar3.fbeAllocationSize(fbeValue.wchar3) + this.wchar4.fbeAllocationSize(fbeValue.wchar4) + this.wchar5.fbeAllocationSize(fbeValue.wchar5) + this.int8b0.fbeAllocationSize(fbeValue.int8b0) + this.int8b1.fbeAllocationSize(fbeValue.int8b1) + this.int8b2.fbeAllocationSize(fbeValue.int8b2) + this.int8b3.fbeAllocationSize(fbeValue.int8b3) + this.int8b4.fbeAllocationSize(fbeValue.int8b4) + this.int8b5.fbeAllocationSize(fbeValue.int8b5) + this.uint8b0.fbeAllocationSize(fbeValue.uint8b0) + this.uint8b1.fbeAllocationSize(fbeValue.uint8b1) + this.uint8b2.fbeAllocationSize(fbeValue.uint8b2) + this.uint8b3.fbeAllocationSize(fbeValue.uint8b3) + this.uint8b4.fbeAllocationSize(fbeValue.uint8b4) + this.uint8b5.fbeAllocationSize(fbeValue.uint8b5) + this.int16b0.fbeAllocationSize(fbeValue.int16b0) + this.int16b1.fbeAllocationSize(fbeValue.int16b1) + this.int16b2.fbeAllocationSize(fbeValue.int16b2) + this.int16b3.fbeAllocationSize(fbeValue.int16b3) + this.int16b4.fbeAllocationSize(fbeValue.int16b4) + this.int16b5.fbeAllocationSize(fbeValue.int16b5) + this.uint16b0.fbeAllocationSize(fbeValue.uint16b0) + this.uint16b1.fbeAllocationSize(fbeValue.uint16b1) + this.uint16b2.fbeAllocationSize(fbeValue.uint16b2) + this.uint16b3.fbeAllocationSize(fbeValue.uint16b3) + this.uint16b4.fbeAllocationSize(fbeValue.uint16b4) + this.uint16b5.fbeAllocationSize(fbeValue.uint16b5) + this.int32b0.fbeAllocationSize(fbeValue.int32b0) + this.int32b1.fbeAllocationSize(fbeValue.int32b1) + this.int32b2.fbeAllocationSize(fbeValue.int32b2) + this.int32b3.fbeAllocationSize(fbeValue.int32b3) + this.int32b4.fbeAllocationSize(fbeValue.int32b4) + this.int32b5.fbeAllocationSize(fbeValue.int32b5) + this.uint32b0.fbeAllocationSize(fbeValue.uint32b0) + this.uint32b1.fbeAllocationSize(fbeValue.uint32b1) + this.uint32b2.fbeAllocationSize(fbeValue.uint32b2) + this.uint32b3.fbeAllocationSize(fbeValue.uint32b3) + this.uint32b4.fbeAllocationSize(fbeValue.uint32b4) + this.uint32b5.fbeAllocationSize(fbeValue.uint32b5) + this.int64b0.fbeAllocationSize(fbeValue.int64b0) + this.int64b1.fbeAllocationSize(fbeValue.int64b1) + this.int64b2.fbeAllocationSize(fbeValue.int64b2) + this.int64b3.fbeAllocationSize(fbeValue.int64b3) + this.int64b4.fbeAllocationSize(fbeValue.int64b4) + this.int64b5.fbeAllocationSize(fbeValue.int64b5) + this.uint64b0.fbeAllocationSize(fbeValue.uint64b0) + this.uint64b1.fbeAllocationSize(fbeValue.uint64b1) + this.uint64b2.fbeAllocationSize(fbeValue.uint64b2) + this.uint64b3.fbeAllocationSize(fbeValue.uint64b3) + this.uint64b4.fbeAllocationSize(fbeValue.uint64b4) + this.uint64b5.fbeAllocationSize(fbeValue.uint64b5)
  }

  /**
   * Get the final type
   * @this {!FinalModelEnums}
   * @returns {!number} Final type
   */
  get fbeType () {
    return FinalModelEnums.fbeType
  }

  /**
   * Get the final type (static)
   * @this {!FinalModelEnums}
   * @returns {!number} Final type
   */
  static get fbeType () {
    return 1
  }

  /**
   * Check if the struct value is valid
   * @this {!FinalModelEnums}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verify () {
    this._buffer.shift(this.fbeOffset)
    let fbeResult = this.verifyFields()
    this._buffer.unshift(this.fbeOffset)
    return fbeResult
  }

  /**
   * Check if the struct fields are valid
   * @this {!FinalModelEnums}
   * @returns {!number} Final model size or Number.MAX_SAFE_INTEGER in case of any error
   */
  verifyFields () {
    let fbeCurrentOffset = 0
    let fbeFieldSize

    this.byte0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.byte1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.byte2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.byte3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.byte4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.byte5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.char0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.char1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.char2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.char3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.char4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.char5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.wchar0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.wchar1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.wchar2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.wchar3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.wchar4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.wchar5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int8b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int8b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int8b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int8b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int8b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int8b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint8b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint8b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint8b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint8b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint8b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint8b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int16b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int16b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int16b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int16b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int16b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int16b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint16b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint16b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint16b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint16b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint16b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint16b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int32b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int32b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int32b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int32b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int32b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int32b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint32b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint32b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint32b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint32b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint32b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint32b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int64b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int64b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int64b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int64b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int64b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.int64b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint64b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b0.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint64b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b1.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint64b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b2.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint64b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b3.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint64b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b4.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    this.uint64b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b5.verify()
    if (fbeFieldSize === Number.MAX_SAFE_INTEGER) {
      return Number.MAX_SAFE_INTEGER
    }
    fbeCurrentOffset += fbeFieldSize

    return fbeCurrentOffset
  }

  /**
   * Get the struct value
   * @this {!FinalModelEnums}
   * @param {!Enums} fbeValue Enums value, defaults is new Enums()
   * @returns {!object} Result struct value and its size
   */
  get (fbeValue = new Enums()) {
    this._buffer.shift(this.fbeOffset)
    let fbeSize = this.getFields(fbeValue)
    this._buffer.unshift(this.fbeOffset)
    return { value: fbeValue, size: fbeSize }
  }

  /**
   * Get the struct fields values
   * @this {!FinalModelEnums}
   * @param {!Enums} fbeValue Enums value
   * @returns {!number} Struct size
   */
  getFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeResult

    this.byte0.fbeOffset = fbeCurrentOffset
    fbeResult = this.byte0.get()
    fbeValue.byte0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.byte1.fbeOffset = fbeCurrentOffset
    fbeResult = this.byte1.get()
    fbeValue.byte1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.byte2.fbeOffset = fbeCurrentOffset
    fbeResult = this.byte2.get()
    fbeValue.byte2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.byte3.fbeOffset = fbeCurrentOffset
    fbeResult = this.byte3.get()
    fbeValue.byte3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.byte4.fbeOffset = fbeCurrentOffset
    fbeResult = this.byte4.get()
    fbeValue.byte4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.byte5.fbeOffset = fbeCurrentOffset
    fbeResult = this.byte5.get()
    fbeValue.byte5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.char0.fbeOffset = fbeCurrentOffset
    fbeResult = this.char0.get()
    fbeValue.char0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.char1.fbeOffset = fbeCurrentOffset
    fbeResult = this.char1.get()
    fbeValue.char1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.char2.fbeOffset = fbeCurrentOffset
    fbeResult = this.char2.get()
    fbeValue.char2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.char3.fbeOffset = fbeCurrentOffset
    fbeResult = this.char3.get()
    fbeValue.char3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.char4.fbeOffset = fbeCurrentOffset
    fbeResult = this.char4.get()
    fbeValue.char4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.char5.fbeOffset = fbeCurrentOffset
    fbeResult = this.char5.get()
    fbeValue.char5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.wchar0.fbeOffset = fbeCurrentOffset
    fbeResult = this.wchar0.get()
    fbeValue.wchar0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.wchar1.fbeOffset = fbeCurrentOffset
    fbeResult = this.wchar1.get()
    fbeValue.wchar1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.wchar2.fbeOffset = fbeCurrentOffset
    fbeResult = this.wchar2.get()
    fbeValue.wchar2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.wchar3.fbeOffset = fbeCurrentOffset
    fbeResult = this.wchar3.get()
    fbeValue.wchar3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.wchar4.fbeOffset = fbeCurrentOffset
    fbeResult = this.wchar4.get()
    fbeValue.wchar4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.wchar5.fbeOffset = fbeCurrentOffset
    fbeResult = this.wchar5.get()
    fbeValue.wchar5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int8b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.int8b0.get()
    fbeValue.int8b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int8b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.int8b1.get()
    fbeValue.int8b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int8b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.int8b2.get()
    fbeValue.int8b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int8b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.int8b3.get()
    fbeValue.int8b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int8b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.int8b4.get()
    fbeValue.int8b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int8b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.int8b5.get()
    fbeValue.int8b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint8b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint8b0.get()
    fbeValue.uint8b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint8b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint8b1.get()
    fbeValue.uint8b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint8b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint8b2.get()
    fbeValue.uint8b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint8b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint8b3.get()
    fbeValue.uint8b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint8b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint8b4.get()
    fbeValue.uint8b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint8b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint8b5.get()
    fbeValue.uint8b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int16b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.int16b0.get()
    fbeValue.int16b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int16b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.int16b1.get()
    fbeValue.int16b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int16b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.int16b2.get()
    fbeValue.int16b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int16b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.int16b3.get()
    fbeValue.int16b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int16b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.int16b4.get()
    fbeValue.int16b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int16b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.int16b5.get()
    fbeValue.int16b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint16b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint16b0.get()
    fbeValue.uint16b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint16b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint16b1.get()
    fbeValue.uint16b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint16b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint16b2.get()
    fbeValue.uint16b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint16b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint16b3.get()
    fbeValue.uint16b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint16b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint16b4.get()
    fbeValue.uint16b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint16b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint16b5.get()
    fbeValue.uint16b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int32b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.int32b0.get()
    fbeValue.int32b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int32b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.int32b1.get()
    fbeValue.int32b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int32b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.int32b2.get()
    fbeValue.int32b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int32b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.int32b3.get()
    fbeValue.int32b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int32b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.int32b4.get()
    fbeValue.int32b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int32b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.int32b5.get()
    fbeValue.int32b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint32b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint32b0.get()
    fbeValue.uint32b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint32b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint32b1.get()
    fbeValue.uint32b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint32b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint32b2.get()
    fbeValue.uint32b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint32b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint32b3.get()
    fbeValue.uint32b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint32b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint32b4.get()
    fbeValue.uint32b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint32b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint32b5.get()
    fbeValue.uint32b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int64b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.int64b0.get()
    fbeValue.int64b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int64b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.int64b1.get()
    fbeValue.int64b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int64b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.int64b2.get()
    fbeValue.int64b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int64b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.int64b3.get()
    fbeValue.int64b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int64b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.int64b4.get()
    fbeValue.int64b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.int64b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.int64b5.get()
    fbeValue.int64b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint64b0.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint64b0.get()
    fbeValue.uint64b0 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint64b1.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint64b1.get()
    fbeValue.uint64b1 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint64b2.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint64b2.get()
    fbeValue.uint64b2 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint64b3.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint64b3.get()
    fbeValue.uint64b3 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint64b4.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint64b4.get()
    fbeValue.uint64b4 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    this.uint64b5.fbeOffset = fbeCurrentOffset
    fbeResult = this.uint64b5.get()
    fbeValue.uint64b5 = fbeResult.value
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeResult.size
    fbeCurrentSize += fbeResult.size

    return fbeCurrentSize
  }

  /**
   * Set the struct value
   * @this {!FinalModelEnums}
   * @param {!Enums} fbeValue Enums value
   * @returns {!number} Final model size
   */
  set (fbeValue) {
    this._buffer.shift(this.fbeOffset)
    let fbeSize = this.setFields(fbeValue)
    this._buffer.unshift(this.fbeOffset)
    return fbeSize
  }

  /**
   * Set the struct fields values
   * @this {!FinalModelEnums}
   * @param {Enums} fbeValue Enums value
   * @returns {!number} Final model size
   */
  setFields (fbeValue) {
    let fbeCurrentOffset = 0
    let fbeCurrentSize = 0
    let fbeFieldSize

    this.byte0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte0.set(fbeValue.byte0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.byte1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte1.set(fbeValue.byte1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.byte2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte2.set(fbeValue.byte2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.byte3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte3.set(fbeValue.byte3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.byte4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte4.set(fbeValue.byte4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.byte5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.byte5.set(fbeValue.byte5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.char0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char0.set(fbeValue.char0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.char1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char1.set(fbeValue.char1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.char2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char2.set(fbeValue.char2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.char3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char3.set(fbeValue.char3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.char4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char4.set(fbeValue.char4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.char5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.char5.set(fbeValue.char5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.wchar0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar0.set(fbeValue.wchar0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.wchar1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar1.set(fbeValue.wchar1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.wchar2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar2.set(fbeValue.wchar2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.wchar3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar3.set(fbeValue.wchar3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.wchar4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar4.set(fbeValue.wchar4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.wchar5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.wchar5.set(fbeValue.wchar5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int8b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b0.set(fbeValue.int8b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int8b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b1.set(fbeValue.int8b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int8b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b2.set(fbeValue.int8b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int8b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b3.set(fbeValue.int8b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int8b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b4.set(fbeValue.int8b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int8b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int8b5.set(fbeValue.int8b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint8b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b0.set(fbeValue.uint8b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint8b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b1.set(fbeValue.uint8b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint8b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b2.set(fbeValue.uint8b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint8b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b3.set(fbeValue.uint8b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint8b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b4.set(fbeValue.uint8b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint8b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint8b5.set(fbeValue.uint8b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int16b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b0.set(fbeValue.int16b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int16b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b1.set(fbeValue.int16b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int16b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b2.set(fbeValue.int16b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int16b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b3.set(fbeValue.int16b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int16b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b4.set(fbeValue.int16b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int16b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int16b5.set(fbeValue.int16b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint16b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b0.set(fbeValue.uint16b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint16b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b1.set(fbeValue.uint16b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint16b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b2.set(fbeValue.uint16b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint16b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b3.set(fbeValue.uint16b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint16b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b4.set(fbeValue.uint16b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint16b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint16b5.set(fbeValue.uint16b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int32b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b0.set(fbeValue.int32b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int32b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b1.set(fbeValue.int32b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int32b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b2.set(fbeValue.int32b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int32b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b3.set(fbeValue.int32b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int32b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b4.set(fbeValue.int32b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int32b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int32b5.set(fbeValue.int32b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint32b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b0.set(fbeValue.uint32b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint32b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b1.set(fbeValue.uint32b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint32b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b2.set(fbeValue.uint32b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint32b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b3.set(fbeValue.uint32b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint32b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b4.set(fbeValue.uint32b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint32b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint32b5.set(fbeValue.uint32b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int64b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b0.set(fbeValue.int64b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int64b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b1.set(fbeValue.int64b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int64b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b2.set(fbeValue.int64b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int64b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b3.set(fbeValue.int64b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int64b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b4.set(fbeValue.int64b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.int64b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.int64b5.set(fbeValue.int64b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint64b0.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b0.set(fbeValue.uint64b0)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint64b1.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b1.set(fbeValue.uint64b1)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint64b2.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b2.set(fbeValue.uint64b2)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint64b3.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b3.set(fbeValue.uint64b3)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint64b4.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b4.set(fbeValue.uint64b4)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    this.uint64b5.fbeOffset = fbeCurrentOffset
    fbeFieldSize = this.uint64b5.set(fbeValue.uint64b5)
    // noinspection JSUnusedAssignment
    fbeCurrentOffset += fbeFieldSize
    fbeCurrentSize += fbeFieldSize

    return fbeCurrentSize
  }
}

exports.FinalModelEnums = FinalModelEnums

/**
 * Fast Binary Encoding Enums final model
 */
class EnumsFinalModel extends fbe.Model {
  /**
   * Initialize final model with the given buffer
   * @param {!fbe.ReadBuffer|!fbe.WriteBuffer} buffer Read/Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer)
    this._model = new FinalModelEnums(this.buffer, 8)
  }

  /**
   * Get the model type
   * @this {!EnumsFinalModel}
   * @returns {!number} Model type
   */
  get fbeType () {
    return EnumsFinalModel.fbeType
  }

  /**
   * Get the model type (static)
   * @this {!EnumsFinalModel}
   * @returns {!number} Model type
   */
  static get fbeType () {
    return FinalModelEnums.fbeType
  }

  /**
   * Check if the struct value is valid
   * @this {!EnumsFinalModel}
   * @returns {!boolean} Model valid state
   */
  verify () {
    if ((this.buffer.offset + this._model.fbeOffset) > this.buffer.size) {
      return false
    }

    let fbeStructSize = this.readUInt32(this._model.fbeOffset - 8)
    let fbeStructType = this.readUInt32(this._model.fbeOffset - 4)
    if ((fbeStructSize <= 0) || (fbeStructType !== this.fbeType)) {
      return false
    }

    return ((8 + this._model.verify()) === fbeStructSize)
  }

  /**
   * Serialize the struct value
   * @this {!EnumsFinalModel}
   * @param {!Enums} value Enums value
   * @return {!number} Struct size
   */
  serialize (value) {
    let fbeInitialSize = this.buffer.size

    let fbeStructType = this.fbeType
    let fbeStructSize = 8 + this._model.fbeAllocationSize(value)
    let fbeStructOffset = this.buffer.allocate(fbeStructSize) - this.buffer.offset
    console.assert(((this.buffer.offset + fbeStructOffset + fbeStructSize) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + fbeStructOffset + fbeStructSize) > this.buffer.size) {
      return 0
    }

    fbeStructSize = 8 + this._model.set(value)
    this.buffer.resize(fbeInitialSize + fbeStructSize)

    this.writeUInt32(this._model.fbeOffset - 8, fbeStructSize)
    this.writeUInt32(this._model.fbeOffset - 4, fbeStructType)

    return fbeStructSize
  }

  /**
   * Deserialize the struct value
   * @this {!EnumsFinalModel}
   * @param {!Enums} value Enums value, defaults is new Enums()
   * @return {!object} Deserialized Enums value and its size
   */
  deserialize (value = new Enums()) {
    console.assert(((this.buffer.offset + this._model.fbeOffset) <= this.buffer.size), 'Model is broken!')
    if ((this.buffer.offset + this._model.fbeOffset) > this.buffer.size) {
      return { value: new Enums(), size: 0 }
    }

    let fbeStructSize = this.readUInt32(this._model.fbeOffset - 8)
    let fbeStructType = this.readUInt32(this._model.fbeOffset - 4)
    console.assert(((fbeStructSize > 0) && (fbeStructType === this.fbeType)), 'Model is broken!')
    if ((fbeStructSize <= 0) || (fbeStructType !== this.fbeType)) {
      return { value: new Enums(), size: 8 }
    }

    let fbeResult = this._model.get(value)
    return { value: fbeResult.value, size: (8 + fbeResult.size) }
  }

  /**
   * Move to the next struct value
   * @this {!EnumsFinalModel}
   * @param {!number} prev Previous Enums model size
   */
  next (prev) {
    this._model.fbeShift(prev)
  }
}

exports.EnumsFinalModel = EnumsFinalModel

// Protocol major version
const ProtocolVersionMajor = 1
// Protocol minor version
const ProtocolVersionMinor = 0

exports.ProtocolVersionMajor = ProtocolVersionMajor
exports.ProtocolVersionMinor = ProtocolVersionMinor

/**
 * Fast Binary Encoding enums sender
 */
class Sender extends fbe.Sender {
  /**
   * Initialize enums sender with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false)
    this.onSendHandler = this.onSend
    this.onSendLogHandler = this.onSendLog
  }

  // Sender models accessors

  // Send methods

  /**
   * Send value
   * @this {!Sender}
   * @param {!object} value Value to send
   * @returns {!number} Sent bytes
   */
  send (value) {
    return 0
  }

  /**
   * Send message handler
   * @this {!Sender}
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   */
  onSend (buffer, offset, size) {
    console.assert(true, 'enums.Sender.onSend() not implemented!')
    debugger // eslint-disable-line
    return 0
  }

  /**
   * Setup send message handler
   * @this {!Sender}
   * @param {!function} handler Send message handler
   */
  set onSendHandler (handler) { // eslint-disable-line
    this.onSend = handler
  }

  /**
   * Setup send log message handler
   * @this {!Sender}
   * @param {!function} handler Send log message handler
   */
  set onSendLogHandler (handler) { // eslint-disable-line
    this.onSendLog = handler
  }
}

exports.Sender = Sender

/**
 * Fast Binary Encoding enums receiver
 */
class Receiver extends fbe.Receiver {
  /**
   * Initialize enums receiver with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false)
    this.onReceiveLogHandler = this.onReceiveLog
  }

  // Receive handlers

  /**
   * enums receive message handler
   * @this {!Receiver}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      default: break
    }
    return false
  }

  /**
   * Setup receive log message handler
   * @this {!Receiver}
   * @param {!function} handler Receive log message handler
   */
  set onReceiveLogHandler (handler) { // eslint-disable-line
    this.onReceiveLog = handler
  }
}

exports.Receiver = Receiver

/**
 * Fast Binary Encoding enums proxy
 */
class Proxy extends fbe.Receiver {
  /**
   * Initialize enums proxy with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, false)
  }

  // Proxy handlers

  /**
   * enums receive message handler
   * @this {!Proxy}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      default: break
    }
    return false
  }
}

exports.Proxy = Proxy

/**
 * Fast Binary Encoding enums client
 */
class Client extends fbe.Client {
  /**
   * Initialize enums client with the given buffers
   * @param {!fbe.WriteBuffer} sendBuffer Send buffer, defaults is new fbe.WriteBuffer()
   * @param {!fbe.WriteBuffer} receiveBuffer Receive buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (sendBuffer = new fbe.WriteBuffer(), receiveBuffer = new fbe.WriteBuffer()) {
    super(sendBuffer, receiveBuffer, false)
    this.onSendHandler = this.onSend
    this.onSendLogHandler = this.onSendLog
    this.onReceiveLogHandler = this.onReceiveLog
    this._timestamp = 0
    this._requests_by_id = new Map()
    this._requests_by_timestamp = new Map()
  }

  // Sender models accessors

  // Reset and watchdog methods

  /**
   * Reset the client
   * @this {!Client}
   */
  reset () {
    super.reset()
    this.resetRequests()
  }

  /**
   * Watchdog for timeouts
   * @this {!Client}
   * @param {!number} utc UTC timestamp
   */
  watchdog (utc) {
    this.watchdogRequests(utc)
  }

  // Send methods

  /**
   * Send value
   * @this {!Client}
   * @param {!object} value Value to send
   * @returns {!number} Sent bytes
   */
  send (value) {
    return 0
  }

  /**
   * Send message handler
   * @this {!Client}
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   */
  onSend (buffer, offset, size) {
    console.assert(true, 'enums.Client.onSend() not implemented!')
    debugger // eslint-disable-line
    return 0
  }

  /**
   * Setup send message handler
   * @this {!Client}
   * @param {!function} handler Send message handler
   */
  set onSendHandler (handler) { // eslint-disable-line
    this.onSend = handler
  }

  /**
   * Setup send log message handler
   * @this {!Client}
   * @param {!function} handler Send log message handler
   */
  set onSendLogHandler (handler) { // eslint-disable-line
    this.onSendLog = handler
  }

  // Receive handlers

  /**
   * enums receive message handler
   * @this {!Client}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      default: break
    }
    return false
  }

  /**
   * Setup receive log message handler
   * @this {!Client}
   * @param {!function} handler Receive log message handler
   */
  set onReceiveLogHandler (handler) { // eslint-disable-line
    this.onReceiveLog = handler
  }

  // Request methods

  /**
   * Request value
   * @this {!Client}
   * @param {!object} value Value to request
   * @param {!number} timeout Timeout in milliseconds (default is 0)
   * @returns {Promise} Response promise
   */
  request (value, timeout = 0) {
    let promise = new fbe.DeferredPromise()
    let current = Date.now()

    // Send the request message
    let serialized = this.send(value)
    if (serialized > 0) {
      // Calculate the unique timestamp
      this._timestamp = (current <= this._timestamp) ? this._timestamp + 1 : current

      // Register the request
      this._requests_by_id.set(value.id, [this._timestamp, timeout, promise])
      if (timeout > 0) {
        this._requests_by_timestamp.set(this._timestamp, value.id)
      }
    } else {
      promise.reject(new Error('Send request failed!'))
    }

    return promise
  }

  /**
   * Response value
   * @this {!Client}
   * @param {!object} value Value to response
   * @returns {!boolean} Response handle flag
   */
  response (value) {
    let item = this._requests_by_id.get(value.id)
    if (item != null) {
      let timestamp = item[0]
      let promise = item[2]
      promise.resolve(value)
      this._requests_by_id.delete(value.id)
      this._requests_by_timestamp.delete(timestamp)
      return true
    }
    return false
  }

  /**
   * Reject value
   * @this {!Client}
   * @param {!object} value Value to reject
   * @returns {!boolean} Reject handle flag
   */
  reject (value) {
    let item = this._requests_by_id.get(value.id)
    if (item != null) {
      let timestamp = item[0]
      let promise = item[2]
      promise.reject(value)
      this._requests_by_id.delete(value.id)
      this._requests_by_timestamp.delete(timestamp)
      return true
    }
    return false
  }

  /**
   * Reset client requests
   * @this {!Client}
   */
  resetRequests () {
    for (let [, value] of this._requests_by_id) {
      value[2].reject(new Error('Reset client!'))
    }
    this._requests_by_id.clear()
    this._requests_by_timestamp.clear()
  }

  /**
   * Watchdog client requests for timeouts
   * @this {!Client}
   * @param {!number} utc UTC timestamp in milliseconds
   */
  watchdogRequests (utc) {
    for (let [, value] of this._requests_by_timestamp) {
      let item = this._requests_by_id.get(value)
      let id = value
      let timestamp = item[0]
      let timespan = item[1]
      if ((timestamp + timespan) <= utc) {
        let promise = item[2]
        promise.reject(new Error('Timeout!'))
        this._requests_by_id.delete(id)
        this._requests_by_timestamp.delete(timestamp)
      }
    }
  }
}

exports.Client = Client

/**
 * Fast Binary Encoding enums final sender
 */
class FinalSender extends fbe.Sender {
  /**
   * Initialize enums sender with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, true)
    this.onSendHandler = this.onSend
    this.onSendLogHandler = this.onSendLog
  }

  // Sender models accessors

  // Send methods

  /**
   * Send value
   * @this {!FinalSender}
   * @param {!object} value Value to send
   * @returns {!number} Sent bytes
   */
  send (value) {
    return 0
  }

  /**
   * Send message handler
   * @this {!FinalSender}
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   */
  onSend (buffer, offset, size) {
    console.assert(true, 'enums.Sender.onSend() not implemented!')
    debugger // eslint-disable-line
    return 0
  }

  /**
   * Setup send message handler
   * @this {!FinalSender}
   * @param {!function} handler Send message handler
   */
  set onSendHandler (handler) { // eslint-disable-line
    this.onSend = handler
  }

  /**
   * Setup send log message handler
   * @this {!FinalSender}
   * @param {!function} handler Send log message handler
   */
  set onSendLogHandler (handler) { // eslint-disable-line
    this.onSendLog = handler
  }
}

exports.FinalSender = FinalSender

/**
 * Fast Binary Encoding enums final receiver
 */
class FinalReceiver extends fbe.Receiver {
  /**
   * Initialize enums receiver with the given buffer
   * @param {!fbe.WriteBuffer} buffer Write buffer, defaults is new WriteBuffer()
   * @constructor
   */
  constructor (buffer = new fbe.WriteBuffer()) {
    super(buffer, true)
    this.onReceiveLogHandler = this.onReceiveLog
  }

  // Receive handlers

  /**
   * enums receive message handler
   * @this {!FinalReceiver}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      default: break
    }
    return false
  }

  /**
   * Setup receive log message handler
   * @this {!FinalReceiver}
   * @param {!function} handler Receive log message handler
   */
  set onReceiveLogHandler (handler) { // eslint-disable-line
    this.onReceiveLog = handler
  }
}

exports.FinalReceiver = FinalReceiver

/**
 * Fast Binary Encoding enums final client
 */
class FinalClient extends fbe.Client {
  /**
   * Initialize enums client with the given buffers
   * @param {!fbe.WriteBuffer} sendBuffer Send buffer, defaults is new fbe.WriteBuffer()
   * @param {!fbe.WriteBuffer} receiveBuffer Receive buffer, defaults is new fbe.WriteBuffer()
   * @constructor
   */
  constructor (sendBuffer = new fbe.WriteBuffer(), receiveBuffer = new fbe.WriteBuffer()) {
    super(sendBuffer, receiveBuffer, true)
    this.onSendHandler = this.onSend
    this.onSendLogHandler = this.onSendLog
    this.onReceiveLogHandler = this.onReceiveLog
    this._timestamp = 0
    this._requests_by_id = new Map()
    this._requests_by_timestamp = new Map()
  }

  // Sender models accessors

  // Reset and watchdog methods

  /**
   * Reset the client
   * @this {!FinalClient}
   */
  reset () {
    super.reset()
    this.resetRequests()
  }

  /**
   * Watchdog for timeouts
   * @this {!FinalClient}
   * @param {!number} utc UTC timestamp
   */
  watchdog (utc) {
    this.watchdogRequests(utc)
  }

  // Send methods

  /**
   * Send value
   * @this {!FinalClient}
   * @param {!object} value Value to send
   * @returns {!number} Sent bytes
   */
  send (value) {
    return 0
  }

  /**
   * Send message handler
   * @this {!FinalClient}
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   */
  onSend (buffer, offset, size) {
    console.assert(true, 'enums.Client.onSend() not implemented!')
    debugger // eslint-disable-line
    return 0
  }

  /**
   * Setup send message handler
   * @this {!FinalClient}
   * @param {!function} handler Send message handler
   */
  set onSendHandler (handler) { // eslint-disable-line
    this.onSend = handler
  }

  /**
   * Setup send log message handler
   * @this {!FinalClient}
   * @param {!function} handler Send log message handler
   */
  set onSendLogHandler (handler) { // eslint-disable-line
    this.onSendLog = handler
  }

  // Receive handlers

  /**
   * enums receive message handler
   * @this {!FinalClient}
   * @param {!number} type Message type
   * @param {!Uint8Array} buffer Buffer to send
   * @param {!number} offset Buffer offset
   * @param {!number} size Buffer size
   * @returns {!boolean} Success flag
   */
  onReceive (type, buffer, offset, size) {
    switch (type) {
      default: break
    }
    return false
  }

  /**
   * Setup receive log message handler
   * @this {!FinalClient}
   * @param {!function} handler Receive log message handler
   */
  set onReceiveLogHandler (handler) { // eslint-disable-line
    this.onReceiveLog = handler
  }

  // Request methods

  /**
   * Request value
   * @this {!FinalClient}
   * @param {!object} value Value to request
   * @param {!number} timeout Timeout in milliseconds (default is 0)
   * @returns {Promise} Response promise
   */
  request (value, timeout = 0) {
    let promise = new fbe.DeferredPromise()
    let current = Date.now()

    // Send the request message
    let serialized = this.send(value)
    if (serialized > 0) {
      // Calculate the unique timestamp
      this._timestamp = (current <= this._timestamp) ? this._timestamp + 1 : current

      // Register the request
      this._requests_by_id.set(value.id, [this._timestamp, timeout, promise])
      if (timeout > 0) {
        this._requests_by_timestamp.set(this._timestamp, value.id)
      }
    } else {
      promise.reject(new Error('Send request failed!'))
    }

    return promise
  }

  /**
   * Response value
   * @this {!FinalClient}
   * @param {!object} value Value to response
   * @returns {!boolean} Response handle flag
   */
  response (value) {
    let item = this._requests_by_id.get(value.id)
    if (item != null) {
      let timestamp = item[0]
      let promise = item[2]
      promise.resolve(value)
      this._requests_by_id.delete(value.id)
      this._requests_by_timestamp.delete(timestamp)
      return true
    }
    return false
  }

  /**
   * Reject value
   * @this {!FinalClient}
   * @param {!object} value Value to reject
   * @returns {!boolean} Reject handle flag
   */
  reject (value) {
    let item = this._requests_by_id.get(value.id)
    if (item != null) {
      let timestamp = item[0]
      let promise = item[2]
      promise.reject(value)
      this._requests_by_id.delete(value.id)
      this._requests_by_timestamp.delete(timestamp)
      return true
    }
    return false
  }

  /**
   * Reset client requests
   * @this {!FinalClient}
   */
  resetRequests () {
    for (let [, value] of this._requests_by_id) {
      value[2].reject(new Error('Reset client!'))
    }
    this._requests_by_id.clear()
    this._requests_by_timestamp.clear()
  }

  /**
   * Watchdog client requests for timeouts
   * @this {!FinalClient}
   * @param {!number} utc UTC timestamp in milliseconds
   */
  watchdogRequests (utc) {
    for (let [, value] of this._requests_by_timestamp) {
      let item = this._requests_by_id.get(value)
      let id = value
      let timestamp = item[0]
      let timespan = item[1]
      if ((timestamp + timespan) <= utc) {
        let promise = item[2]
        promise.reject(new Error('Timeout!'))
        this._requests_by_id.delete(id)
        this._requests_by_timestamp.delete(timestamp)
      }
    }
  }
}

exports.FinalClient = FinalClient
