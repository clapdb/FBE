#------------------------------------------------------------------------------
# Automatically generated by the Fast Binary Encoding compiler, do not modify!
# https://github.com/chronoxor/FastBinaryEncoding
# Source: protoex.fbe
# FBE version: 1.10.0.0
#------------------------------------------------------------------------------

import base64
import decimal
import enum
import functools
import json
import sys
import uuid

import fbe
from . import proto


class OrderSide(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    buy = int(0) + 0
    sell = int(0) + 1
    tell = int(0) + 2
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == OrderSide.buy:
            return "buy"
        if self.value == OrderSide.sell:
            return "sell"
        if self.value == OrderSide.tell:
            return "tell"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return OrderSide.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return OrderSide(value)


# Fast Binary Encoding OrderSide field model
class FieldModelOrderSide(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = OrderSide()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return OrderSide(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding OrderSide final model
class FinalModelOrderSide(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return OrderSide(), 0

        return OrderSide(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


class OrderType(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    market = int(0) + 0
    limit = int(0) + 1
    stop = int(0) + 2
    stoplimit = int(0) + 3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == OrderType.market:
            return "market"
        if self.value == OrderType.limit:
            return "limit"
        if self.value == OrderType.stop:
            return "stop"
        if self.value == OrderType.stoplimit:
            return "stoplimit"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return OrderType.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return OrderType(value)


# Fast Binary Encoding OrderType field model
class FieldModelOrderType(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = OrderType()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return OrderType(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding OrderType final model
class FinalModelOrderType(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return OrderType(), 0

        return OrderType(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


class StateEx(enum.IntFlag, metaclass=fbe.DefaultEnumMeta):
    unknown = int(0x00)
    invalid = int(0x01)
    initialized = int(0x02)
    calculated = int(0x04)
    broken = int(0x08)
    happy = int(0x10)
    sad = int(0x20)
    good = initialized | calculated
    bad = unknown | invalid | broken

    __slots__ = ()

    # Is flags set?
    def has_flags(self, flags):
        return ((self.value & flags.value) != 0) and ((self.value & flags.value) == flags.value)

    # Set flags
    def set_flags(self, flags):
        self.value |= flags.value
        return self

    # Remove flags
    def remove_flags(self, flags):
        self.value &= ~flags.value
        return self

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        first = True
        if (self.value & StateEx.unknown.value) and ((self.value & StateEx.unknown.value) == StateEx.unknown.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("unknown")
        if (self.value & StateEx.invalid.value) and ((self.value & StateEx.invalid.value) == StateEx.invalid.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("invalid")
        if (self.value & StateEx.initialized.value) and ((self.value & StateEx.initialized.value) == StateEx.initialized.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("initialized")
        if (self.value & StateEx.calculated.value) and ((self.value & StateEx.calculated.value) == StateEx.calculated.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("calculated")
        if (self.value & StateEx.broken.value) and ((self.value & StateEx.broken.value) == StateEx.broken.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("broken")
        if (self.value & StateEx.happy.value) and ((self.value & StateEx.happy.value) == StateEx.happy.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("happy")
        if (self.value & StateEx.sad.value) and ((self.value & StateEx.sad.value) == StateEx.sad.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("sad")
        if (self.value & StateEx.good.value) and ((self.value & StateEx.good.value) == StateEx.good.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("good")
        if (self.value & StateEx.bad.value) and ((self.value & StateEx.bad.value) == StateEx.bad.value):
            if first:
                # noinspection PyUnusedLocal
                first = False
            else:
                sb.append("|")
            sb.append("bad")
        return "".join(sb)

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return StateEx(value)


# Fast Binary Encoding StateEx field model
class FieldModelStateEx(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = StateEx()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return StateEx(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding StateEx final model
class FinalModelStateEx(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return StateEx(), 0

        return StateEx(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


@functools.total_ordering
class Order(object):
    __slots__ = "id", "symbol", "side", "type", "price", "volume", "tp", "sl", 

    def __init__(self, id=0, symbol="", side=None, type=None, price=float(0.0), volume=float(0.0), tp=float(10.0), sl=float(-10.0)):
        if side is None:
            side = OrderSide()
        if type is None:
            type = OrderType()
        self.id = id
        self.symbol = symbol
        self.side = side
        self.type = type
        self.price = price
        self.volume = volume
        self.tp = tp
        self.sl = sl

    # Struct shallow copy
    def copy(self, other):
        self.id = other.id
        self.symbol = other.symbol
        self.side = other.side
        self.type = other.type
        self.price = other.price
        self.volume = other.volume
        self.tp = other.tp
        self.sl = other.sl
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = OrderModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = OrderModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        if not self.id == other.id:
            return False
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        if self.id < other.id:
            return True
        if self.id == other.id:
            return False
        return False

    @property
    def __key__(self):
        return self.id, 

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Order(")
        sb.append("id=")
        sb.append(str(self.id))
        sb.append(",symbol=")
        if self.symbol is not None:
            sb.append("\"" + str(self.symbol) + "\"")
        else:
            sb.append("null")
        sb.append(",side=")
        sb.append(str(self.side))
        sb.append(",type=")
        sb.append(str(self.type))
        sb.append(",price=")
        sb.append(str(self.price))
        sb.append(",volume=")
        sb.append(str(self.volume))
        sb.append(",tp=")
        sb.append(str(self.tp))
        sb.append(",sl=")
        sb.append(str(self.sl))
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(dict(
            id=self.id, 
            symbol=self.symbol, 
            side=self.side, 
            type=self.type, 
            price=self.price, 
            volume=self.volume, 
            tp=self.tp, 
            sl=self.sl, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Order.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Order(
            None if "id" not in fields else fields["id"],
            None if "symbol" not in fields else fields["symbol"],
            None if "side" not in fields else OrderSide.__from_json__(fields["side"]),
            None if "type" not in fields else OrderType.__from_json__(fields["type"]),
            None if "price" not in fields else fields["price"],
            None if "volume" not in fields else fields["volume"],
            None if "tp" not in fields else fields["tp"],
            None if "sl" not in fields else fields["sl"],
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1


class FieldModelOrder(fbe.FieldModel):
    __slots__ = "_id", "_symbol", "_side", "_type", "_price", "_volume", "_tp", "_sl", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._id = fbe.FieldModelInt32(buffer, 4 + 4)
        self._symbol = fbe.FieldModelString(buffer, self._id.fbe_offset + self._id.fbe_size)
        self._side = FieldModelOrderSide(buffer, self._symbol.fbe_offset + self._symbol.fbe_size)
        self._type = FieldModelOrderType(buffer, self._side.fbe_offset + self._side.fbe_size)
        self._price = fbe.FieldModelDouble(buffer, self._type.fbe_offset + self._type.fbe_size)
        self._volume = fbe.FieldModelDouble(buffer, self._price.fbe_offset + self._price.fbe_size)
        self._tp = fbe.FieldModelDouble(buffer, self._volume.fbe_offset + self._volume.fbe_size)
        self._sl = fbe.FieldModelDouble(buffer, self._tp.fbe_offset + self._tp.fbe_size)

    @property
    def id(self):
        return self._id

    @property
    def symbol(self):
        return self._symbol

    @property
    def side(self):
        return self._side

    @property
    def type(self):
        return self._type

    @property
    def price(self):
        return self._price

    @property
    def volume(self):
        return self._volume

    @property
    def tp(self):
        return self._tp

    @property
    def sl(self):
        return self._sl

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.id.fbe_size \
            + self.symbol.fbe_size \
            + self.side.fbe_size \
            + self.type.fbe_size \
            + self.price.fbe_size \
            + self.volume.fbe_size \
            + self.tp.fbe_size \
            + self.sl.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.id.fbe_extra \
            + self.symbol.fbe_extra \
            + self.side.fbe_extra \
            + self.type.fbe_extra \
            + self.price.fbe_extra \
            + self.volume.fbe_extra \
            + self.tp.fbe_extra \
            + self.sl.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.id.fbe_size) > fbe_struct_size:
            return True
        if not self.id.verify():
            return False
        fbe_current_size += self.id.fbe_size

        if (fbe_current_size + self.symbol.fbe_size) > fbe_struct_size:
            return True
        if not self.symbol.verify():
            return False
        fbe_current_size += self.symbol.fbe_size

        if (fbe_current_size + self.side.fbe_size) > fbe_struct_size:
            return True
        if not self.side.verify():
            return False
        fbe_current_size += self.side.fbe_size

        if (fbe_current_size + self.type.fbe_size) > fbe_struct_size:
            return True
        if not self.type.verify():
            return False
        fbe_current_size += self.type.fbe_size

        if (fbe_current_size + self.price.fbe_size) > fbe_struct_size:
            return True
        if not self.price.verify():
            return False
        fbe_current_size += self.price.fbe_size

        if (fbe_current_size + self.volume.fbe_size) > fbe_struct_size:
            return True
        if not self.volume.verify():
            return False
        fbe_current_size += self.volume.fbe_size

        if (fbe_current_size + self.tp.fbe_size) > fbe_struct_size:
            return True
        if not self.tp.verify():
            return False
        fbe_current_size += self.tp.fbe_size

        if (fbe_current_size + self.sl.fbe_size) > fbe_struct_size:
            return True
        if not self.sl.verify():
            return False
        fbe_current_size += self.sl.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Order()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.id.fbe_size) <= fbe_struct_size:
            fbe_value.id = self.id.get()
        else:
            fbe_value.id = 0
        fbe_current_size += self.id.fbe_size

        if (fbe_current_size + self.symbol.fbe_size) <= fbe_struct_size:
            fbe_value.symbol = self.symbol.get()
        else:
            fbe_value.symbol = ""
        fbe_current_size += self.symbol.fbe_size

        if (fbe_current_size + self.side.fbe_size) <= fbe_struct_size:
            fbe_value.side = self.side.get()
        else:
            fbe_value.side = OrderSide()
        fbe_current_size += self.side.fbe_size

        if (fbe_current_size + self.type.fbe_size) <= fbe_struct_size:
            fbe_value.type = self.type.get()
        else:
            fbe_value.type = OrderType()
        fbe_current_size += self.type.fbe_size

        if (fbe_current_size + self.price.fbe_size) <= fbe_struct_size:
            fbe_value.price = self.price.get(float(0.0))
        else:
            fbe_value.price = float(0.0)
        fbe_current_size += self.price.fbe_size

        if (fbe_current_size + self.volume.fbe_size) <= fbe_struct_size:
            fbe_value.volume = self.volume.get(float(0.0))
        else:
            fbe_value.volume = float(0.0)
        fbe_current_size += self.volume.fbe_size

        if (fbe_current_size + self.tp.fbe_size) <= fbe_struct_size:
            fbe_value.tp = self.tp.get(float(10.0))
        else:
            fbe_value.tp = float(10.0)
        fbe_current_size += self.tp.fbe_size

        if (fbe_current_size + self.sl.fbe_size) <= fbe_struct_size:
            fbe_value.sl = self.sl.get(float(-10.0))
        else:
            fbe_value.sl = float(-10.0)
        fbe_current_size += self.sl.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.id.set(fbe_value.id)
        self.symbol.set(fbe_value.symbol)
        self.side.set(fbe_value.side)
        self.type.set(fbe_value.type)
        self.price.set(fbe_value.price)
        self.volume.set(fbe_value.volume)
        self.tp.set(fbe_value.tp)
        self.sl.set(fbe_value.sl)


# Fast Binary Encoding Order model
class OrderModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelOrder(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelOrder.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Order()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Order()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Order()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelOrder(fbe.FinalModel):
    __slots__ = "_id", "_symbol", "_side", "_type", "_price", "_volume", "_tp", "_sl", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._id = fbe.FinalModelInt32(buffer, 0)
        self._symbol = fbe.FinalModelString(buffer, 0)
        self._side = FinalModelOrderSide(buffer, 0)
        self._type = FinalModelOrderType(buffer, 0)
        self._price = fbe.FinalModelDouble(buffer, 0)
        self._volume = fbe.FinalModelDouble(buffer, 0)
        self._tp = fbe.FinalModelDouble(buffer, 0)
        self._sl = fbe.FinalModelDouble(buffer, 0)

    @property
    def id(self):
        return self._id

    @property
    def symbol(self):
        return self._symbol

    @property
    def side(self):
        return self._side

    @property
    def type(self):
        return self._type

    @property
    def price(self):
        return self._price

    @property
    def volume(self):
        return self._volume

    @property
    def tp(self):
        return self._tp

    @property
    def sl(self):
        return self._sl

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.id.fbe_allocation_size(fbe_value.id) \
            + self.symbol.fbe_allocation_size(fbe_value.symbol) \
            + self.side.fbe_allocation_size(fbe_value.side) \
            + self.type.fbe_allocation_size(fbe_value.type) \
            + self.price.fbe_allocation_size(fbe_value.price) \
            + self.volume.fbe_allocation_size(fbe_value.volume) \
            + self.tp.fbe_allocation_size(fbe_value.tp) \
            + self.sl.fbe_allocation_size(fbe_value.sl) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.id.fbe_offset = fbe_current_offset
        fbe_field_size = self.id.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.symbol.fbe_offset = fbe_current_offset
        fbe_field_size = self.symbol.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.side.fbe_offset = fbe_current_offset
        fbe_field_size = self.side.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.type.fbe_offset = fbe_current_offset
        fbe_field_size = self.type.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.price.fbe_offset = fbe_current_offset
        fbe_field_size = self.price.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.volume.fbe_offset = fbe_current_offset
        fbe_field_size = self.volume.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.tp.fbe_offset = fbe_current_offset
        fbe_field_size = self.tp.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.sl.fbe_offset = fbe_current_offset
        fbe_field_size = self.sl.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Order()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.id.fbe_offset = fbe_current_offset
        fbe_result = self.id.get()
        fbe_value.id = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.symbol.fbe_offset = fbe_current_offset
        fbe_result = self.symbol.get()
        fbe_value.symbol = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.side.fbe_offset = fbe_current_offset
        fbe_result = self.side.get()
        fbe_value.side = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.type.fbe_offset = fbe_current_offset
        fbe_result = self.type.get()
        fbe_value.type = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.price.fbe_offset = fbe_current_offset
        fbe_result = self.price.get()
        fbe_value.price = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.volume.fbe_offset = fbe_current_offset
        fbe_result = self.volume.get()
        fbe_value.volume = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.tp.fbe_offset = fbe_current_offset
        fbe_result = self.tp.get()
        fbe_value.tp = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.sl.fbe_offset = fbe_current_offset
        fbe_result = self.sl.get()
        fbe_value.sl = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.id.fbe_offset = fbe_current_offset
        fbe_field_size = self.id.set(fbe_value.id)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.symbol.fbe_offset = fbe_current_offset
        fbe_field_size = self.symbol.set(fbe_value.symbol)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.side.fbe_offset = fbe_current_offset
        fbe_field_size = self.side.set(fbe_value.side)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.type.fbe_offset = fbe_current_offset
        fbe_field_size = self.type.set(fbe_value.type)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.price.fbe_offset = fbe_current_offset
        fbe_field_size = self.price.set(fbe_value.price)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.volume.fbe_offset = fbe_current_offset
        fbe_field_size = self.volume.set(fbe_value.volume)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.tp.fbe_offset = fbe_current_offset
        fbe_field_size = self.tp.set(fbe_value.tp)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.sl.fbe_offset = fbe_current_offset
        fbe_field_size = self.sl.set(fbe_value.sl)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding Order final model
class OrderFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelOrder(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelOrder.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Order()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Order(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Order(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class Balance(proto.Balance):
    __slots__ = "locked", 

    def __init__(self, parent=None, locked=float(0.0)):
        super().__init__()
        if parent is None:
            parent = proto.Balance()
        super().copy(parent)
        self.locked = locked

    # Struct shallow copy
    def copy(self, other):
        super().copy(other)
        self.locked = other.locked
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = BalanceModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = BalanceModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        if not super().__eq__(other):
            return False
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        if super().__lt__(other):
            return True
        if super().__eq__(other):
            return False
        return False

    @property
    def __key__(self):
        return super().__key__ + ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Balance(")
        sb.append(proto.Balance.__str__(self))
        sb.append(",locked=")
        sb.append(str(self.locked))
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(super().__to_json__())
        result.update(dict(
            locked=self.locked, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Balance.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Balance(
            proto.Balance.__from_json__(fields),
            None if "locked" not in fields else fields["locked"],
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = proto.Balance.TYPE


class FieldModelBalance(fbe.FieldModel):
    __slots__ = "_parent", "_locked", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._parent = proto.FieldModelBalance(buffer, 4 + 4)
        self._locked = fbe.FieldModelDouble(buffer, self._parent.fbe_offset + self._parent.fbe_body - 4 - 4)

    @property
    def parent(self):
        return self._parent

    @property
    def locked(self):
        return self._locked

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.parent.fbe_body - 4 - 4 \
            + self.locked.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.parent.fbe_extra \
            + self.locked.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = proto.FieldModelBalance.TYPE

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.parent.fbe_body - 4 - 4) > fbe_struct_size:
            return True
        if not self.parent.verify_fields(fbe_struct_size):
            return False
        fbe_current_size += self.parent.fbe_body - 4 - 4

        if (fbe_current_size + self.locked.fbe_size) > fbe_struct_size:
            return True
        if not self.locked.verify():
            return False
        fbe_current_size += self.locked.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Balance()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.parent.fbe_body - 4 - 4) <= fbe_struct_size:
            self.parent.get_fields(fbe_value, fbe_struct_size)
        fbe_current_size += self.parent.fbe_body - 4 - 4

        if (fbe_current_size + self.locked.fbe_size) <= fbe_struct_size:
            fbe_value.locked = self.locked.get(float(0.0))
        else:
            fbe_value.locked = float(0.0)
        fbe_current_size += self.locked.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.parent.set_fields(fbe_value)
        self.locked.set(fbe_value.locked)


# Fast Binary Encoding Balance model
class BalanceModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelBalance(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelBalance.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Balance()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Balance()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Balance()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelBalance(fbe.FinalModel):
    __slots__ = "_parent", "_locked", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._parent = proto.FinalModelBalance(buffer, 0)
        self._locked = fbe.FinalModelDouble(buffer, 0)

    @property
    def parent(self):
        return self._parent

    @property
    def locked(self):
        return self._locked

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.parent.fbe_allocation_size(fbe_value) \
            + self.locked.fbe_allocation_size(fbe_value.locked) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = proto.FinalModelBalance.TYPE

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.parent.fbe_offset = fbe_current_offset
        fbe_field_size = self.parent.verify_fields()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.locked.fbe_offset = fbe_current_offset
        fbe_field_size = self.locked.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Balance()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.parent.fbe_offset = fbe_current_offset
        fbe_result = self.parent.get_fields(fbe_value)
        fbe_current_offset += fbe_result
        fbe_current_size += fbe_result

        self.locked.fbe_offset = fbe_current_offset
        fbe_result = self.locked.get()
        fbe_value.locked = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.parent.fbe_offset = fbe_current_offset
        fbe_field_size = self.parent.set_fields(fbe_value)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.locked.fbe_offset = fbe_current_offset
        fbe_field_size = self.locked.set(fbe_value.locked)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding Balance final model
class BalanceFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelBalance(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelBalance.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Balance()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Balance(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Balance(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class Account(object):
    __slots__ = "id", "name", "state", "wallet", "asset", "orders", 

    def __init__(self, id=0, name="", state=StateEx.initialized | StateEx.bad | StateEx.sad, wallet=None, asset=None, orders=None):
        if wallet is None:
            wallet = Balance()
        if orders is None:
            orders = list()
        self.id = id
        self.name = name
        self.state = state
        self.wallet = wallet
        self.asset = asset
        self.orders = orders

    # Struct shallow copy
    def copy(self, other):
        self.id = other.id
        self.name = other.name
        self.state = other.state
        self.wallet = other.wallet
        self.asset = other.asset
        self.orders = other.orders
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = AccountModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = AccountModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        if not self.id == other.id:
            return False
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        if self.id < other.id:
            return True
        if self.id == other.id:
            return False
        return False

    @property
    def __key__(self):
        return self.id, 

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Account(")
        sb.append("id=")
        sb.append(str(self.id))
        sb.append(",name=")
        if self.name is not None:
            sb.append("\"" + str(self.name) + "\"")
        else:
            sb.append("null")
        sb.append(",state=")
        sb.append(str(self.state))
        sb.append(",wallet=")
        sb.append(str(self.wallet))
        sb.append(",asset=")
        if self.asset is not None:
            sb.append(str(self.asset))
        else:
            sb.append("null")
        sb.append(",orders=")
        if self.orders is not None:
            first = True
            sb.append("[" + str(len(self.orders)) + "][")
            for item in self.orders:
                sb.append("" if first else ",")
                sb.append(str(item))
                first = False
            sb.append("]")
        else:
            sb.append("[0][]")
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(dict(
            id=self.id, 
            name=self.name, 
            state=self.state, 
            wallet=self.wallet, 
            asset=self.asset, 
            orders=self.orders, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Account.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Account(
            None if "id" not in fields else fields["id"],
            None if "name" not in fields else fields["name"],
            None if "state" not in fields else StateEx.__from_json__(fields["state"]),
            None if "wallet" not in fields else Balance.__from_json__(fields["wallet"]),
            None if "asset" not in fields else Balance.__from_json__(fields["asset"]),
            None if "orders" not in fields else [Order.__from_json__(value) for value in fields["orders"]],
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 3


class FieldModelAccount(fbe.FieldModel):
    __slots__ = "_id", "_name", "_state", "_wallet", "_asset", "_orders", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._id = fbe.FieldModelInt32(buffer, 4 + 4)
        self._name = fbe.FieldModelString(buffer, self._id.fbe_offset + self._id.fbe_size)
        self._state = FieldModelStateEx(buffer, self._name.fbe_offset + self._name.fbe_size)
        self._wallet = FieldModelBalance(buffer, self._state.fbe_offset + self._state.fbe_size)
        self._asset = fbe.FieldModelOptional(FieldModelBalance(buffer, self._wallet.fbe_offset + self._wallet.fbe_size), buffer, self._wallet.fbe_offset + self._wallet.fbe_size)
        self._orders = fbe.FieldModelVector(FieldModelOrder(buffer, self._asset.fbe_offset + self._asset.fbe_size), buffer, self._asset.fbe_offset + self._asset.fbe_size)

    @property
    def id(self):
        return self._id

    @property
    def name(self):
        return self._name

    @property
    def state(self):
        return self._state

    @property
    def wallet(self):
        return self._wallet

    @property
    def asset(self):
        return self._asset

    @property
    def orders(self):
        return self._orders

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.id.fbe_size \
            + self.name.fbe_size \
            + self.state.fbe_size \
            + self.wallet.fbe_size \
            + self.asset.fbe_size \
            + self.orders.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.id.fbe_extra \
            + self.name.fbe_extra \
            + self.state.fbe_extra \
            + self.wallet.fbe_extra \
            + self.asset.fbe_extra \
            + self.orders.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 3

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.id.fbe_size) > fbe_struct_size:
            return True
        if not self.id.verify():
            return False
        fbe_current_size += self.id.fbe_size

        if (fbe_current_size + self.name.fbe_size) > fbe_struct_size:
            return True
        if not self.name.verify():
            return False
        fbe_current_size += self.name.fbe_size

        if (fbe_current_size + self.state.fbe_size) > fbe_struct_size:
            return True
        if not self.state.verify():
            return False
        fbe_current_size += self.state.fbe_size

        if (fbe_current_size + self.wallet.fbe_size) > fbe_struct_size:
            return True
        if not self.wallet.verify():
            return False
        fbe_current_size += self.wallet.fbe_size

        if (fbe_current_size + self.asset.fbe_size) > fbe_struct_size:
            return True
        if not self.asset.verify():
            return False
        fbe_current_size += self.asset.fbe_size

        if (fbe_current_size + self.orders.fbe_size) > fbe_struct_size:
            return True
        if not self.orders.verify():
            return False
        fbe_current_size += self.orders.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Account()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.id.fbe_size) <= fbe_struct_size:
            fbe_value.id = self.id.get()
        else:
            fbe_value.id = 0
        fbe_current_size += self.id.fbe_size

        if (fbe_current_size + self.name.fbe_size) <= fbe_struct_size:
            fbe_value.name = self.name.get()
        else:
            fbe_value.name = ""
        fbe_current_size += self.name.fbe_size

        if (fbe_current_size + self.state.fbe_size) <= fbe_struct_size:
            fbe_value.state = self.state.get(StateEx.initialized | StateEx.bad | StateEx.sad)
        else:
            fbe_value.state = StateEx.initialized | StateEx.bad | StateEx.sad
        fbe_current_size += self.state.fbe_size

        if (fbe_current_size + self.wallet.fbe_size) <= fbe_struct_size:
            fbe_value.wallet = self.wallet.get()
        else:
            fbe_value.wallet = Balance()
        fbe_current_size += self.wallet.fbe_size

        if (fbe_current_size + self.asset.fbe_size) <= fbe_struct_size:
            fbe_value.asset = self.asset.get()
        else:
            fbe_value.asset = None
        fbe_current_size += self.asset.fbe_size

        if (fbe_current_size + self.orders.fbe_size) <= fbe_struct_size:
            self.orders.get(fbe_value.orders)
        else:
            fbe_value.orders.clear()
        fbe_current_size += self.orders.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.id.set(fbe_value.id)
        self.name.set(fbe_value.name)
        self.state.set(fbe_value.state)
        self.wallet.set(fbe_value.wallet)
        self.asset.set(fbe_value.asset)
        self.orders.set(fbe_value.orders)


# Fast Binary Encoding Account model
class AccountModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelAccount(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelAccount.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Account()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Account()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Account()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelAccount(fbe.FinalModel):
    __slots__ = "_id", "_name", "_state", "_wallet", "_asset", "_orders", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._id = fbe.FinalModelInt32(buffer, 0)
        self._name = fbe.FinalModelString(buffer, 0)
        self._state = FinalModelStateEx(buffer, 0)
        self._wallet = FinalModelBalance(buffer, 0)
        self._asset = fbe.FinalModelOptional(FinalModelBalance(buffer, 0), buffer, 0)
        self._orders = fbe.FinalModelVector(FinalModelOrder(buffer, 0), buffer, 0)

    @property
    def id(self):
        return self._id

    @property
    def name(self):
        return self._name

    @property
    def state(self):
        return self._state

    @property
    def wallet(self):
        return self._wallet

    @property
    def asset(self):
        return self._asset

    @property
    def orders(self):
        return self._orders

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.id.fbe_allocation_size(fbe_value.id) \
            + self.name.fbe_allocation_size(fbe_value.name) \
            + self.state.fbe_allocation_size(fbe_value.state) \
            + self.wallet.fbe_allocation_size(fbe_value.wallet) \
            + self.asset.fbe_allocation_size(fbe_value.asset) \
            + self.orders.fbe_allocation_size(fbe_value.orders) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 3

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.id.fbe_offset = fbe_current_offset
        fbe_field_size = self.id.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.name.fbe_offset = fbe_current_offset
        fbe_field_size = self.name.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.state.fbe_offset = fbe_current_offset
        fbe_field_size = self.state.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wallet.fbe_offset = fbe_current_offset
        fbe_field_size = self.wallet.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.asset.fbe_offset = fbe_current_offset
        fbe_field_size = self.asset.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.orders.fbe_offset = fbe_current_offset
        fbe_field_size = self.orders.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Account()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.id.fbe_offset = fbe_current_offset
        fbe_result = self.id.get()
        fbe_value.id = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.name.fbe_offset = fbe_current_offset
        fbe_result = self.name.get()
        fbe_value.name = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.state.fbe_offset = fbe_current_offset
        fbe_result = self.state.get()
        fbe_value.state = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wallet.fbe_offset = fbe_current_offset
        fbe_result = self.wallet.get()
        fbe_value.wallet = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.asset.fbe_offset = fbe_current_offset
        fbe_result = self.asset.get()
        fbe_value.asset = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.orders.fbe_offset = fbe_current_offset
        fbe_result = self.orders.get(fbe_value.orders)
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.id.fbe_offset = fbe_current_offset
        fbe_field_size = self.id.set(fbe_value.id)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.name.fbe_offset = fbe_current_offset
        fbe_field_size = self.name.set(fbe_value.name)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.state.fbe_offset = fbe_current_offset
        fbe_field_size = self.state.set(fbe_value.state)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wallet.fbe_offset = fbe_current_offset
        fbe_field_size = self.wallet.set(fbe_value.wallet)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.asset.fbe_offset = fbe_current_offset
        fbe_field_size = self.asset.set(fbe_value.asset)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.orders.fbe_offset = fbe_current_offset
        fbe_field_size = self.orders.set(fbe_value.orders)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding Account final model
class AccountFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelAccount(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelAccount.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Account()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Account(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Account(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class OrderMessage(object):
    __slots__ = "body", 

    def __init__(self, body=None):
        if body is None:
            body = Order()
        self.body = body

    # Struct shallow copy
    def copy(self, other):
        self.body = other.body
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = OrderMessageModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = OrderMessageModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("OrderMessage(")
        sb.append("body=")
        sb.append(str(self.body))
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(dict(
            body=self.body, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return OrderMessage.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return OrderMessage(
            None if "body" not in fields else Order.__from_json__(fields["body"]),
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 11


class FieldModelOrderMessage(fbe.FieldModel):
    __slots__ = "_body", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._body = FieldModelOrder(buffer, 4 + 4)

    @property
    def body(self):
        return self._body

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.body.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.body.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 11

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.body.fbe_size) > fbe_struct_size:
            return True
        if not self.body.verify():
            return False
        fbe_current_size += self.body.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = OrderMessage()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.body.fbe_size) <= fbe_struct_size:
            fbe_value.body = self.body.get()
        else:
            fbe_value.body = Order()
        fbe_current_size += self.body.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.body.set(fbe_value.body)


# Fast Binary Encoding OrderMessage model
class OrderMessageModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelOrderMessage(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelOrderMessage.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = OrderMessage()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = OrderMessage()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = OrderMessage()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelOrderMessage(fbe.FinalModel):
    __slots__ = "_body", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._body = FinalModelOrder(buffer, 0)

    @property
    def body(self):
        return self._body

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.body.fbe_allocation_size(fbe_value.body) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 11

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_field_size = self.body.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = OrderMessage()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_result = self.body.get()
        fbe_value.body = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_field_size = self.body.set(fbe_value.body)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding OrderMessage final model
class OrderMessageFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelOrderMessage(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelOrderMessage.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = OrderMessage()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return OrderMessage(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return OrderMessage(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class BalanceMessage(object):
    __slots__ = "body", 

    def __init__(self, body=None):
        if body is None:
            body = Balance()
        self.body = body

    # Struct shallow copy
    def copy(self, other):
        self.body = other.body
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = BalanceMessageModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = BalanceMessageModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("BalanceMessage(")
        sb.append("body=")
        sb.append(str(self.body))
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(dict(
            body=self.body, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return BalanceMessage.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return BalanceMessage(
            None if "body" not in fields else Balance.__from_json__(fields["body"]),
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 12


class FieldModelBalanceMessage(fbe.FieldModel):
    __slots__ = "_body", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._body = FieldModelBalance(buffer, 4 + 4)

    @property
    def body(self):
        return self._body

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.body.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.body.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 12

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.body.fbe_size) > fbe_struct_size:
            return True
        if not self.body.verify():
            return False
        fbe_current_size += self.body.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = BalanceMessage()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.body.fbe_size) <= fbe_struct_size:
            fbe_value.body = self.body.get()
        else:
            fbe_value.body = Balance()
        fbe_current_size += self.body.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.body.set(fbe_value.body)


# Fast Binary Encoding BalanceMessage model
class BalanceMessageModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelBalanceMessage(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelBalanceMessage.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = BalanceMessage()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = BalanceMessage()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = BalanceMessage()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelBalanceMessage(fbe.FinalModel):
    __slots__ = "_body", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._body = FinalModelBalance(buffer, 0)

    @property
    def body(self):
        return self._body

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.body.fbe_allocation_size(fbe_value.body) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 12

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_field_size = self.body.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = BalanceMessage()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_result = self.body.get()
        fbe_value.body = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_field_size = self.body.set(fbe_value.body)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding BalanceMessage final model
class BalanceMessageFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelBalanceMessage(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelBalanceMessage.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = BalanceMessage()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return BalanceMessage(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return BalanceMessage(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


@functools.total_ordering
class AccountMessage(object):
    __slots__ = "body", 

    def __init__(self, body=None):
        if body is None:
            body = Account()
        self.body = body

    # Struct shallow copy
    def copy(self, other):
        self.body = other.body
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = AccountMessageModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = AccountMessageModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("AccountMessage(")
        sb.append("body=")
        sb.append(str(self.body))
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(dict(
            body=self.body, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return AccountMessage.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return AccountMessage(
            None if "body" not in fields else Account.__from_json__(fields["body"]),
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 13


class FieldModelAccountMessage(fbe.FieldModel):
    __slots__ = "_body", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._body = FieldModelAccount(buffer, 4 + 4)

    @property
    def body(self):
        return self._body

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.body.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.body.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 13

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.body.fbe_size) > fbe_struct_size:
            return True
        if not self.body.verify():
            return False
        fbe_current_size += self.body.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = AccountMessage()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.body.fbe_size) <= fbe_struct_size:
            fbe_value.body = self.body.get()
        else:
            fbe_value.body = Account()
        fbe_current_size += self.body.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.body.set(fbe_value.body)


# Fast Binary Encoding AccountMessage model
class AccountMessageModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelAccountMessage(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelAccountMessage.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = AccountMessage()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = AccountMessage()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = AccountMessage()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelAccountMessage(fbe.FinalModel):
    __slots__ = "_body", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._body = FinalModelAccount(buffer, 0)

    @property
    def body(self):
        return self._body

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.body.fbe_allocation_size(fbe_value.body) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 13

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_field_size = self.body.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = AccountMessage()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_result = self.body.get()
        fbe_value.body = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.body.fbe_offset = fbe_current_offset
        fbe_field_size = self.body.set(fbe_value.body)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding AccountMessage final model
class AccountMessageFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelAccountMessage(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelAccountMessage.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = AccountMessage()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return AccountMessage(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return AccountMessage(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


# Fast Binary Encoding protoex protocol version
class ProtocolVersion(object):
    # Protocol major version
    Major = 1
    # Protocol minor version
    Minor = 0


# Fast Binary Encoding protoex sender
class Sender(fbe.Sender):
    __slots__ = "_proto_sender", "_ordermessage_model", "_balancemessage_model", "_accountmessage_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, False)
        self._proto_sender = proto.Sender(self.buffer)
        self._ordermessage_model = ordermessageModel(self.buffer)
        self._balancemessage_model = balancemessageModel(self.buffer)
        self._accountmessage_model = accountmessageModel(self.buffer)

    # Imported senders

    @property
    def proto_sender(self):
        return self._proto_sender

    # Sender models accessors

    @property
    def ordermessage_model(self):
        return self._ordermessage_model

    @property
    def balancemessage_model(self):
        return self._balancemessage_model

    @property
    def accountmessage_model(self):
        return self._accountmessage_model

    # Send methods

    def send(self, value):
        if isinstance(value, ordermessage) and (value.fbe_type == self.ordermessage_model.fbe_type):
            return self.send_ordermessage(value)
        if isinstance(value, balancemessage) and (value.fbe_type == self.balancemessage_model.fbe_type):
            return self.send_balancemessage(value)
        if isinstance(value, accountmessage) and (value.fbe_type == self.accountmessage_model.fbe_type):
            return self.send_accountmessage(value)
        result = self._proto_sender.send(value)
        if result > 0:
            return result
        return 0

    def send_ordermessage(self, value):
        # Serialize the value into the FBE stream
        serialized = self.ordermessage_model.serialize(value)
        assert (serialized > 0), "protoex.ordermessage serialization failed!"
        assert self.ordermessage_model.verify(), "protoex.ordermessage validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_balancemessage(self, value):
        # Serialize the value into the FBE stream
        serialized = self.balancemessage_model.serialize(value)
        assert (serialized > 0), "protoex.balancemessage serialization failed!"
        assert self.balancemessage_model.verify(), "protoex.balancemessage validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_accountmessage(self, value):
        # Serialize the value into the FBE stream
        serialized = self.accountmessage_model.serialize(value)
        assert (serialized > 0), "protoex.accountmessage serialization failed!"
        assert self.accountmessage_model.verify(), "protoex.accountmessage validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    # Send message handler
    def on_send(self, buffer, offset, size):
        raise NotImplementedError("protoex.Sender.on_send() not implemented!")


# Fast Binary Encoding protoex receiver
class Receiver(fbe.Receiver):
    __slots__ = "_proto_receiver", "_ordermessage_value", "_ordermessage_model", "_balancemessage_value", "_balancemessage_model", "_accountmessage_value", "_accountmessage_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, False)
        self._proto_receiver = proto.Receiver(self.buffer)
        self._ordermessage_value = ordermessage()
        self._ordermessage_model = ordermessageModel()
        self._balancemessage_value = balancemessage()
        self._balancemessage_model = balancemessageModel()
        self._accountmessage_value = accountmessage()
        self._accountmessage_model = accountmessageModel()

    # Imported receivers

    @property
    def proto_receiver(self):
        return self._proto_receiver

    @proto_receiver.setter
    def proto_receiver(self, receiver):
        self._proto_receiver = receiver

    # Receive handlers

    def on_receive_ordermessage(self, value):
        pass

    def on_receive_balancemessage(self, value):
        pass

    def on_receive_accountmessage(self, value):
        pass

    def on_receive(self, type, buffer, offset, size):

        if type == ordermessageModel.TYPE:
            # Deserialize the value from the FBE stream
            self._ordermessage_model.attach_buffer(buffer, offset)
            assert self._ordermessage_model.verify(), "protoex.ordermessage validation failed!"
            (_, deserialized) = self._ordermessage_model.deserialize(self._ordermessage_value)
            assert (deserialized > 0), "protoex.ordermessage deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._ordermessage_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_ordermessage(self._ordermessage_value)
            return True

        if type == balancemessageModel.TYPE:
            # Deserialize the value from the FBE stream
            self._balancemessage_model.attach_buffer(buffer, offset)
            assert self._balancemessage_model.verify(), "protoex.balancemessage validation failed!"
            (_, deserialized) = self._balancemessage_model.deserialize(self._balancemessage_value)
            assert (deserialized > 0), "protoex.balancemessage deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._balancemessage_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_balancemessage(self._balancemessage_value)
            return True

        if type == accountmessageModel.TYPE:
            # Deserialize the value from the FBE stream
            self._accountmessage_model.attach_buffer(buffer, offset)
            assert self._accountmessage_model.verify(), "protoex.accountmessage validation failed!"
            (_, deserialized) = self._accountmessage_model.deserialize(self._accountmessage_value)
            assert (deserialized > 0), "protoex.accountmessage deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._accountmessage_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_accountmessage(self._accountmessage_value)
            return True

        if (self.proto_receiver is not None) and self.proto_receiver.on_receive(type, buffer, offset, size):
            return True

        return False


# Fast Binary Encoding protoex proxy
class Proxy(fbe.Receiver):
    __slots__ = "_proto_proxy", "_ordermessage_model", "_balancemessage_model", "_accountmessage_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, False)
        self._proto_proxy = proto.Proxy(self.buffer)
        self._ordermessage_model = ordermessageModel()
        self._balancemessage_model = balancemessageModel()
        self._accountmessage_model = accountmessageModel()

    # Imported proxy

    @property
    def proto_proxy(self):
        return self._proto_proxy

    @proto_proxy.setter
    def proto_proxy(self, proxy):
        self._proto_proxy = proxy

    # Receive handlers

    def on_proxy_ordermessage(self, model, type, buffer, offset, size):
        pass

    def on_proxy_balancemessage(self, model, type, buffer, offset, size):
        pass

    def on_proxy_accountmessage(self, model, type, buffer, offset, size):
        pass

    def on_receive(self, type, buffer, offset, size):

        if type == ordermessageModel.TYPE:
            # Attach the FBE stream to the proxy model
            self._ordermessage_model.attach_buffer(buffer, offset)
            assert self._ordermessage_model.verify(), "protoex.ordermessage validation failed!"

            fbe_begin = self._ordermessage_model.model.get_begin()
            if fbe_begin == 0:
                return False
            # Call proxy handler
            self.on_proxy_ordermessage(self._ordermessage_model, type, buffer, offset, size)
            self._ordermessage_model.model.get_end(fbe_begin)
            return True

        if type == balancemessageModel.TYPE:
            # Attach the FBE stream to the proxy model
            self._balancemessage_model.attach_buffer(buffer, offset)
            assert self._balancemessage_model.verify(), "protoex.balancemessage validation failed!"

            fbe_begin = self._balancemessage_model.model.get_begin()
            if fbe_begin == 0:
                return False
            # Call proxy handler
            self.on_proxy_balancemessage(self._balancemessage_model, type, buffer, offset, size)
            self._balancemessage_model.model.get_end(fbe_begin)
            return True

        if type == accountmessageModel.TYPE:
            # Attach the FBE stream to the proxy model
            self._accountmessage_model.attach_buffer(buffer, offset)
            assert self._accountmessage_model.verify(), "protoex.accountmessage validation failed!"

            fbe_begin = self._accountmessage_model.model.get_begin()
            if fbe_begin == 0:
                return False
            # Call proxy handler
            self.on_proxy_accountmessage(self._accountmessage_model, type, buffer, offset, size)
            self._accountmessage_model.model.get_end(fbe_begin)
            return True

        if (self.proto_proxy is not None) and self.proto_proxy.on_receive(type, buffer, offset, size):
            return True

        return False


# Fast Binary Encoding protoex final sender
class FinalSender(fbe.Sender):
    __slots__ = "_proto_sender", "_ordermessage_model", "_balancemessage_model", "_accountmessage_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, True)
        self._proto_sender = proto.FinalSender(self.buffer)
        self._ordermessage_model = ordermessageFinalModel(self.buffer)
        self._balancemessage_model = balancemessageFinalModel(self.buffer)
        self._accountmessage_model = accountmessageFinalModel(self.buffer)

    # Imported senders

    @property
    def proto_sender(self):
        return self._proto_sender

    # Sender models accessors

    @property
    def ordermessage_model(self):
        return self._ordermessage_model

    @property
    def balancemessage_model(self):
        return self._balancemessage_model

    @property
    def accountmessage_model(self):
        return self._accountmessage_model

    # Send methods

    def send(self, value):
        if isinstance(value, ordermessage) and (value.fbe_type == self.ordermessage_model.fbe_type):
            return self.send_ordermessage(value)
        if isinstance(value, balancemessage) and (value.fbe_type == self.balancemessage_model.fbe_type):
            return self.send_balancemessage(value)
        if isinstance(value, accountmessage) and (value.fbe_type == self.accountmessage_model.fbe_type):
            return self.send_accountmessage(value)
        result = self._proto_sender.send(value)
        if result > 0:
            return result
        return 0

    def send_ordermessage(self, value):
        # Serialize the value into the FBE stream
        serialized = self.ordermessage_model.serialize(value)
        assert (serialized > 0), "protoex.ordermessage serialization failed!"
        assert self.ordermessage_model.verify(), "protoex.ordermessage validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_balancemessage(self, value):
        # Serialize the value into the FBE stream
        serialized = self.balancemessage_model.serialize(value)
        assert (serialized > 0), "protoex.balancemessage serialization failed!"
        assert self.balancemessage_model.verify(), "protoex.balancemessage validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    def send_accountmessage(self, value):
        # Serialize the value into the FBE stream
        serialized = self.accountmessage_model.serialize(value)
        assert (serialized > 0), "protoex.accountmessage serialization failed!"
        assert self.accountmessage_model.verify(), "protoex.accountmessage validation failed!"

        # Log the value
        if self.logging:
            message = str(value)
            self.on_send_log(message)

        # Send the serialized value
        return self.send_serialized(serialized)

    # Send message handler
    def on_send(self, buffer, offset, size):
        raise NotImplementedError("protoex.Sender.on_send() not implemented!")


# Fast Binary Encoding protoex final receiver
class FinalReceiver(fbe.Receiver):
    __slots__ = "_proto_receiver", "_ordermessage_value", "_ordermessage_model", "_balancemessage_value", "_balancemessage_model", "_accountmessage_value", "_accountmessage_model", 

    def __init__(self, buffer=None):
        super().__init__(buffer, True)
        self._proto_receiver = proto.FinalReceiver(self.buffer)
        self._ordermessage_value = ordermessage()
        self._ordermessage_model = ordermessageFinalModel()
        self._balancemessage_value = balancemessage()
        self._balancemessage_model = balancemessageFinalModel()
        self._accountmessage_value = accountmessage()
        self._accountmessage_model = accountmessageFinalModel()

    # Imported receivers

    @property
    def proto_receiver(self):
        return self._proto_receiver

    @proto_receiver.setter
    def proto_receiver(self, receiver):
        self._proto_receiver = receiver

    # Receive handlers

    def on_receive_ordermessage(self, value):
        pass

    def on_receive_balancemessage(self, value):
        pass

    def on_receive_accountmessage(self, value):
        pass

    def on_receive(self, type, buffer, offset, size):

        if type == ordermessageFinalModel.TYPE:
            # Deserialize the value from the FBE stream
            self._ordermessage_model.attach_buffer(buffer, offset)
            assert self._ordermessage_model.verify(), "protoex.ordermessage validation failed!"
            (_, deserialized) = self._ordermessage_model.deserialize(self._ordermessage_value)
            assert (deserialized > 0), "protoex.ordermessage deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._ordermessage_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_ordermessage(self._ordermessage_value)
            return True

        if type == balancemessageFinalModel.TYPE:
            # Deserialize the value from the FBE stream
            self._balancemessage_model.attach_buffer(buffer, offset)
            assert self._balancemessage_model.verify(), "protoex.balancemessage validation failed!"
            (_, deserialized) = self._balancemessage_model.deserialize(self._balancemessage_value)
            assert (deserialized > 0), "protoex.balancemessage deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._balancemessage_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_balancemessage(self._balancemessage_value)
            return True

        if type == accountmessageFinalModel.TYPE:
            # Deserialize the value from the FBE stream
            self._accountmessage_model.attach_buffer(buffer, offset)
            assert self._accountmessage_model.verify(), "protoex.accountmessage validation failed!"
            (_, deserialized) = self._accountmessage_model.deserialize(self._accountmessage_value)
            assert (deserialized > 0), "protoex.accountmessage deserialization failed!"

            # Log the value
            if self.logging:
                message = str(self._accountmessage_value)
                self.on_receive_log(message)

            # Call receive handler with deserialized value
            self.on_receive_accountmessage(self._accountmessage_value)
            return True

        if (self.proto_receiver is not None) and self.proto_receiver.on_receive(type, buffer, offset, size):
            return True

        return False
