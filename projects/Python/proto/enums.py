#------------------------------------------------------------------------------
# Automatically generated by the Fast Binary Encoding compiler, do not modify!
# https://github.com/chronoxor/FastBinaryEncoding
# Source: enums.fbe
# FBE version: 1.10.0.0
#------------------------------------------------------------------------------

import base64
import decimal
import enum
import functools
import json
import sys
import uuid

import fbe


class EnumByte(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(0) + 0
    ENUM_VALUE_2 = int(0) + 1
    ENUM_VALUE_3 = int(254) + 0
    ENUM_VALUE_4 = int(254) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumByte.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumByte.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumByte.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumByte.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumByte.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumByte.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumByte.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumByte(value)


# Fast Binary Encoding EnumByte field model
class FieldModelEnumByte(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumByte()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumByte(self.read_byte(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_byte(self.fbe_offset, value)


# Fast Binary Encoding EnumByte final model
class FinalModelEnumByte(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumByte(), 0

        return EnumByte(self.read_byte(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_byte(self.fbe_offset, value)
        return self.fbe_size


class EnumChar(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = ord('1') + 0
    ENUM_VALUE_2 = ord('1') + 1
    ENUM_VALUE_3 = ord('3') + 0
    ENUM_VALUE_4 = ord('3') + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumChar.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumChar.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumChar.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumChar.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumChar.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumChar.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumChar.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumChar(value)


# Fast Binary Encoding EnumChar field model
class FieldModelEnumChar(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumChar()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumChar(self.read_uint8(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_uint8(self.fbe_offset, value)


# Fast Binary Encoding EnumChar final model
class FinalModelEnumChar(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumChar(), 0

        return EnumChar(self.read_uint8(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_uint8(self.fbe_offset, value)
        return self.fbe_size


class EnumWChar(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(0x0444) + 0
    ENUM_VALUE_2 = int(0x0444) + 1
    ENUM_VALUE_3 = int(0x0555) + 0
    ENUM_VALUE_4 = int(0x0555) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumWChar.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumWChar.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumWChar.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumWChar.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumWChar.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumWChar.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumWChar.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumWChar(value)


# Fast Binary Encoding EnumWChar field model
class FieldModelEnumWChar(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumWChar()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumWChar(self.read_uint32(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_uint32(self.fbe_offset, value)


# Fast Binary Encoding EnumWChar final model
class FinalModelEnumWChar(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 4

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumWChar(), 0

        return EnumWChar(self.read_uint32(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_uint32(self.fbe_offset, value)
        return self.fbe_size


class EnumInt8(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(-128) + 0
    ENUM_VALUE_2 = int(-128) + 1
    ENUM_VALUE_3 = int(126) + 0
    ENUM_VALUE_4 = int(126) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumInt8.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumInt8.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumInt8.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumInt8.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumInt8.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumInt8.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumInt8.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumInt8(value)


# Fast Binary Encoding EnumInt8 field model
class FieldModelEnumInt8(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumInt8()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumInt8(self.read_int8(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_int8(self.fbe_offset, value)


# Fast Binary Encoding EnumInt8 final model
class FinalModelEnumInt8(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumInt8(), 0

        return EnumInt8(self.read_int8(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_int8(self.fbe_offset, value)
        return self.fbe_size


class EnumUInt8(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(0) + 0
    ENUM_VALUE_2 = int(0) + 1
    ENUM_VALUE_3 = int(254) + 0
    ENUM_VALUE_4 = int(254) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumUInt8.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumUInt8.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumUInt8.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumUInt8.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumUInt8.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumUInt8.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumUInt8.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumUInt8(value)


# Fast Binary Encoding EnumUInt8 field model
class FieldModelEnumUInt8(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 1

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumUInt8()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumUInt8(self.read_uint8(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_uint8(self.fbe_offset, value)


# Fast Binary Encoding EnumUInt8 final model
class FinalModelEnumUInt8(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 1

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumUInt8(), 0

        return EnumUInt8(self.read_uint8(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_uint8(self.fbe_offset, value)
        return self.fbe_size


class EnumInt16(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(-32768) + 0
    ENUM_VALUE_2 = int(-32768) + 1
    ENUM_VALUE_3 = int(32766) + 0
    ENUM_VALUE_4 = int(32766) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumInt16.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumInt16.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumInt16.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumInt16.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumInt16.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumInt16.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumInt16.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumInt16(value)


# Fast Binary Encoding EnumInt16 field model
class FieldModelEnumInt16(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 2

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumInt16()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumInt16(self.read_int16(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_int16(self.fbe_offset, value)


# Fast Binary Encoding EnumInt16 final model
class FinalModelEnumInt16(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 2

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumInt16(), 0

        return EnumInt16(self.read_int16(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_int16(self.fbe_offset, value)
        return self.fbe_size


class EnumUInt16(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(0) + 0
    ENUM_VALUE_2 = int(0) + 1
    ENUM_VALUE_3 = int(65534) + 0
    ENUM_VALUE_4 = int(65534) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumUInt16.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumUInt16.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumUInt16.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumUInt16.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumUInt16.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumUInt16.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumUInt16.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumUInt16(value)


# Fast Binary Encoding EnumUInt16 field model
class FieldModelEnumUInt16(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 2

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumUInt16()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumUInt16(self.read_uint16(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_uint16(self.fbe_offset, value)


# Fast Binary Encoding EnumUInt16 final model
class FinalModelEnumUInt16(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 2

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumUInt16(), 0

        return EnumUInt16(self.read_uint16(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_uint16(self.fbe_offset, value)
        return self.fbe_size


class EnumInt32(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(-2147483648) + 0
    ENUM_VALUE_2 = int(-2147483648) + 1
    ENUM_VALUE_3 = int(2147483646) + 0
    ENUM_VALUE_4 = int(2147483646) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumInt32.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumInt32.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumInt32.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumInt32.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumInt32.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumInt32.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumInt32.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumInt32(value)


# Fast Binary Encoding EnumInt32 field model
class FieldModelEnumInt32(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumInt32()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumInt32(self.read_int32(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_int32(self.fbe_offset, value)


# Fast Binary Encoding EnumInt32 final model
class FinalModelEnumInt32(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 4

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumInt32(), 0

        return EnumInt32(self.read_int32(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_int32(self.fbe_offset, value)
        return self.fbe_size


class EnumUInt32(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(0) + 0
    ENUM_VALUE_2 = int(0) + 1
    ENUM_VALUE_3 = int(0xFFFFFFFE) + 0
    ENUM_VALUE_4 = int(0xFFFFFFFE) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumUInt32.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumUInt32.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumUInt32.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumUInt32.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumUInt32.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumUInt32.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumUInt32.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumUInt32(value)


# Fast Binary Encoding EnumUInt32 field model
class FieldModelEnumUInt32(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumUInt32()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumUInt32(self.read_uint32(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_uint32(self.fbe_offset, value)


# Fast Binary Encoding EnumUInt32 final model
class FinalModelEnumUInt32(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 4

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumUInt32(), 0

        return EnumUInt32(self.read_uint32(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_uint32(self.fbe_offset, value)
        return self.fbe_size


class EnumInt64(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(-9223372036854775807) + 0
    ENUM_VALUE_2 = int(-9223372036854775807) + 1
    ENUM_VALUE_3 = int(9223372036854775806) + 0
    ENUM_VALUE_4 = int(9223372036854775806) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumInt64.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumInt64.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumInt64.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumInt64.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumInt64.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumInt64.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumInt64.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumInt64(value)


# Fast Binary Encoding EnumInt64 field model
class FieldModelEnumInt64(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 8

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumInt64()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumInt64(self.read_int64(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_int64(self.fbe_offset, value)


# Fast Binary Encoding EnumInt64 final model
class FinalModelEnumInt64(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 8

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumInt64(), 0

        return EnumInt64(self.read_int64(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_int64(self.fbe_offset, value)
        return self.fbe_size


class EnumUInt64(enum.IntEnum, metaclass=fbe.DefaultEnumMeta):
    ENUM_VALUE_0 = int(0) + 0
    ENUM_VALUE_1 = int(0) + 0
    ENUM_VALUE_2 = int(0) + 1
    ENUM_VALUE_3 = int(0xFFFFFFFFFFFFFFFE) + 0
    ENUM_VALUE_4 = int(0xFFFFFFFFFFFFFFFE) + 1
    ENUM_VALUE_5 = ENUM_VALUE_3
    unknown = ~0

    __slots__ = ()

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        if self.value == EnumUInt64.ENUM_VALUE_0:
            return "ENUM_VALUE_0"
        if self.value == EnumUInt64.ENUM_VALUE_1:
            return "ENUM_VALUE_1"
        if self.value == EnumUInt64.ENUM_VALUE_2:
            return "ENUM_VALUE_2"
        if self.value == EnumUInt64.ENUM_VALUE_3:
            return "ENUM_VALUE_3"
        if self.value == EnumUInt64.ENUM_VALUE_4:
            return "ENUM_VALUE_4"
        if self.value == EnumUInt64.ENUM_VALUE_5:
            return "ENUM_VALUE_5"
        return "<unknown>"

    @classmethod
    def _missing_(cls, value):
        return EnumUInt64.unknown

    @staticmethod
    def __from_json__(value):
        if value is None:
            return None
        return EnumUInt64(value)


# Fast Binary Encoding EnumUInt64 field model
class FieldModelEnumUInt64(fbe.FieldModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the field size
    @property
    def fbe_size(self):
        return 8

    # Get the value
    def get(self, defaults=None):
        if defaults is None:
            defaults = EnumUInt64()

        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return defaults

        return EnumUInt64(self.read_uint64(self.fbe_offset))

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return

        self.write_uint64(self.fbe_offset, value)


# Fast Binary Encoding EnumUInt64 final model
class FinalModelEnumUInt64(fbe.FinalModel):
    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)

    # Get the allocation size
    # noinspection PyUnusedLocal
    def fbe_allocation_size(self, value):
        return self.fbe_size

    # Get the final size
    @property
    def fbe_size(self):
        return 8

    # Check if the value is valid
    def verify(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return sys.maxsize

        return self.fbe_size

    # Get the value
    def get(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return EnumUInt64(), 0

        return EnumUInt64(self.read_uint64(self.fbe_offset)), self.fbe_size

    # Set the value
    def set(self, value):
        assert ((self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size), "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        self.write_uint64(self.fbe_offset, value)
        return self.fbe_size


@functools.total_ordering
class Enums(object):
    __slots__ = "byte0", "byte1", "byte2", "byte3", "byte4", "byte5", "char0", "char1", "char2", "char3", "char4", "char5", "wchar0", "wchar1", "wchar2", "wchar3", "wchar4", "wchar5", "int8b0", "int8b1", "int8b2", "int8b3", "int8b4", "int8b5", "uint8b0", "uint8b1", "uint8b2", "uint8b3", "uint8b4", "uint8b5", "int16b0", "int16b1", "int16b2", "int16b3", "int16b4", "int16b5", "uint16b0", "uint16b1", "uint16b2", "uint16b3", "uint16b4", "uint16b5", "int32b0", "int32b1", "int32b2", "int32b3", "int32b4", "int32b5", "uint32b0", "uint32b1", "uint32b2", "uint32b3", "uint32b4", "uint32b5", "int64b0", "int64b1", "int64b2", "int64b3", "int64b4", "int64b5", "uint64b0", "uint64b1", "uint64b2", "uint64b3", "uint64b4", "uint64b5", 

    def __init__(self, byte0=EnumByte.ENUM_VALUE_0, byte1=EnumByte.ENUM_VALUE_1, byte2=EnumByte.ENUM_VALUE_2, byte3=EnumByte.ENUM_VALUE_3, byte4=EnumByte.ENUM_VALUE_4, byte5=EnumByte.ENUM_VALUE_5, char0=EnumChar.ENUM_VALUE_0, char1=EnumChar.ENUM_VALUE_1, char2=EnumChar.ENUM_VALUE_2, char3=EnumChar.ENUM_VALUE_3, char4=EnumChar.ENUM_VALUE_4, char5=EnumChar.ENUM_VALUE_5, wchar0=EnumWChar.ENUM_VALUE_0, wchar1=EnumWChar.ENUM_VALUE_1, wchar2=EnumWChar.ENUM_VALUE_2, wchar3=EnumWChar.ENUM_VALUE_3, wchar4=EnumWChar.ENUM_VALUE_4, wchar5=EnumWChar.ENUM_VALUE_5, int8b0=EnumInt8.ENUM_VALUE_0, int8b1=EnumInt8.ENUM_VALUE_1, int8b2=EnumInt8.ENUM_VALUE_2, int8b3=EnumInt8.ENUM_VALUE_3, int8b4=EnumInt8.ENUM_VALUE_4, int8b5=EnumInt8.ENUM_VALUE_5, uint8b0=EnumUInt8.ENUM_VALUE_0, uint8b1=EnumUInt8.ENUM_VALUE_1, uint8b2=EnumUInt8.ENUM_VALUE_2, uint8b3=EnumUInt8.ENUM_VALUE_3, uint8b4=EnumUInt8.ENUM_VALUE_4, uint8b5=EnumUInt8.ENUM_VALUE_5, int16b0=EnumInt16.ENUM_VALUE_0, int16b1=EnumInt16.ENUM_VALUE_1, int16b2=EnumInt16.ENUM_VALUE_2, int16b3=EnumInt16.ENUM_VALUE_3, int16b4=EnumInt16.ENUM_VALUE_4, int16b5=EnumInt16.ENUM_VALUE_5, uint16b0=EnumUInt16.ENUM_VALUE_0, uint16b1=EnumUInt16.ENUM_VALUE_1, uint16b2=EnumUInt16.ENUM_VALUE_2, uint16b3=EnumUInt16.ENUM_VALUE_3, uint16b4=EnumUInt16.ENUM_VALUE_4, uint16b5=EnumUInt16.ENUM_VALUE_5, int32b0=EnumInt32.ENUM_VALUE_0, int32b1=EnumInt32.ENUM_VALUE_1, int32b2=EnumInt32.ENUM_VALUE_2, int32b3=EnumInt32.ENUM_VALUE_3, int32b4=EnumInt32.ENUM_VALUE_4, int32b5=EnumInt32.ENUM_VALUE_5, uint32b0=EnumUInt32.ENUM_VALUE_0, uint32b1=EnumUInt32.ENUM_VALUE_1, uint32b2=EnumUInt32.ENUM_VALUE_2, uint32b3=EnumUInt32.ENUM_VALUE_3, uint32b4=EnumUInt32.ENUM_VALUE_4, uint32b5=EnumUInt32.ENUM_VALUE_5, int64b0=EnumInt64.ENUM_VALUE_0, int64b1=EnumInt64.ENUM_VALUE_1, int64b2=EnumInt64.ENUM_VALUE_2, int64b3=EnumInt64.ENUM_VALUE_3, int64b4=EnumInt64.ENUM_VALUE_4, int64b5=EnumInt64.ENUM_VALUE_5, uint64b0=EnumUInt64.ENUM_VALUE_0, uint64b1=EnumUInt64.ENUM_VALUE_1, uint64b2=EnumUInt64.ENUM_VALUE_2, uint64b3=EnumUInt64.ENUM_VALUE_3, uint64b4=EnumUInt64.ENUM_VALUE_4, uint64b5=EnumUInt64.ENUM_VALUE_5):
        self.byte0 = byte0
        self.byte1 = byte1
        self.byte2 = byte2
        self.byte3 = byte3
        self.byte4 = byte4
        self.byte5 = byte5
        self.char0 = char0
        self.char1 = char1
        self.char2 = char2
        self.char3 = char3
        self.char4 = char4
        self.char5 = char5
        self.wchar0 = wchar0
        self.wchar1 = wchar1
        self.wchar2 = wchar2
        self.wchar3 = wchar3
        self.wchar4 = wchar4
        self.wchar5 = wchar5
        self.int8b0 = int8b0
        self.int8b1 = int8b1
        self.int8b2 = int8b2
        self.int8b3 = int8b3
        self.int8b4 = int8b4
        self.int8b5 = int8b5
        self.uint8b0 = uint8b0
        self.uint8b1 = uint8b1
        self.uint8b2 = uint8b2
        self.uint8b3 = uint8b3
        self.uint8b4 = uint8b4
        self.uint8b5 = uint8b5
        self.int16b0 = int16b0
        self.int16b1 = int16b1
        self.int16b2 = int16b2
        self.int16b3 = int16b3
        self.int16b4 = int16b4
        self.int16b5 = int16b5
        self.uint16b0 = uint16b0
        self.uint16b1 = uint16b1
        self.uint16b2 = uint16b2
        self.uint16b3 = uint16b3
        self.uint16b4 = uint16b4
        self.uint16b5 = uint16b5
        self.int32b0 = int32b0
        self.int32b1 = int32b1
        self.int32b2 = int32b2
        self.int32b3 = int32b3
        self.int32b4 = int32b4
        self.int32b5 = int32b5
        self.uint32b0 = uint32b0
        self.uint32b1 = uint32b1
        self.uint32b2 = uint32b2
        self.uint32b3 = uint32b3
        self.uint32b4 = uint32b4
        self.uint32b5 = uint32b5
        self.int64b0 = int64b0
        self.int64b1 = int64b1
        self.int64b2 = int64b2
        self.int64b3 = int64b3
        self.int64b4 = int64b4
        self.int64b5 = int64b5
        self.uint64b0 = uint64b0
        self.uint64b1 = uint64b1
        self.uint64b2 = uint64b2
        self.uint64b3 = uint64b3
        self.uint64b4 = uint64b4
        self.uint64b5 = uint64b5

    # Struct shallow copy
    def copy(self, other):
        self.byte0 = other.byte0
        self.byte1 = other.byte1
        self.byte2 = other.byte2
        self.byte3 = other.byte3
        self.byte4 = other.byte4
        self.byte5 = other.byte5
        self.char0 = other.char0
        self.char1 = other.char1
        self.char2 = other.char2
        self.char3 = other.char3
        self.char4 = other.char4
        self.char5 = other.char5
        self.wchar0 = other.wchar0
        self.wchar1 = other.wchar1
        self.wchar2 = other.wchar2
        self.wchar3 = other.wchar3
        self.wchar4 = other.wchar4
        self.wchar5 = other.wchar5
        self.int8b0 = other.int8b0
        self.int8b1 = other.int8b1
        self.int8b2 = other.int8b2
        self.int8b3 = other.int8b3
        self.int8b4 = other.int8b4
        self.int8b5 = other.int8b5
        self.uint8b0 = other.uint8b0
        self.uint8b1 = other.uint8b1
        self.uint8b2 = other.uint8b2
        self.uint8b3 = other.uint8b3
        self.uint8b4 = other.uint8b4
        self.uint8b5 = other.uint8b5
        self.int16b0 = other.int16b0
        self.int16b1 = other.int16b1
        self.int16b2 = other.int16b2
        self.int16b3 = other.int16b3
        self.int16b4 = other.int16b4
        self.int16b5 = other.int16b5
        self.uint16b0 = other.uint16b0
        self.uint16b1 = other.uint16b1
        self.uint16b2 = other.uint16b2
        self.uint16b3 = other.uint16b3
        self.uint16b4 = other.uint16b4
        self.uint16b5 = other.uint16b5
        self.int32b0 = other.int32b0
        self.int32b1 = other.int32b1
        self.int32b2 = other.int32b2
        self.int32b3 = other.int32b3
        self.int32b4 = other.int32b4
        self.int32b5 = other.int32b5
        self.uint32b0 = other.uint32b0
        self.uint32b1 = other.uint32b1
        self.uint32b2 = other.uint32b2
        self.uint32b3 = other.uint32b3
        self.uint32b4 = other.uint32b4
        self.uint32b5 = other.uint32b5
        self.int64b0 = other.int64b0
        self.int64b1 = other.int64b1
        self.int64b2 = other.int64b2
        self.int64b3 = other.int64b3
        self.int64b4 = other.int64b4
        self.int64b5 = other.int64b5
        self.uint64b0 = other.uint64b0
        self.uint64b1 = other.uint64b1
        self.uint64b2 = other.uint64b2
        self.uint64b3 = other.uint64b3
        self.uint64b4 = other.uint64b4
        self.uint64b5 = other.uint64b5
        return self

    # Struct deep clone
    def clone(self):
        # Serialize the struct to the FBE stream
        writer = EnumsModel(fbe.WriteBuffer())
        writer.serialize(self)

        # Deserialize the struct from the FBE stream
        reader = EnumsModel(fbe.ReadBuffer())
        reader.attach_buffer(writer.buffer)
        return reader.deserialize()[0]

    def __eq__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return True

    def __lt__(self, other):
        if not isinstance(self, other.__class__):
            return NotImplemented
        return False

    @property
    def __key__(self):
        return ()

    def __hash__(self):
        return hash(self.__key__)

    def __format__(self, format_spec):
        return self.__str__()

    def __str__(self):
        sb = list()
        sb.append("Enums(")
        sb.append("byte0=")
        sb.append(str(self.byte0))
        sb.append(",byte1=")
        sb.append(str(self.byte1))
        sb.append(",byte2=")
        sb.append(str(self.byte2))
        sb.append(",byte3=")
        sb.append(str(self.byte3))
        sb.append(",byte4=")
        sb.append(str(self.byte4))
        sb.append(",byte5=")
        sb.append(str(self.byte5))
        sb.append(",char0=")
        sb.append(str(self.char0))
        sb.append(",char1=")
        sb.append(str(self.char1))
        sb.append(",char2=")
        sb.append(str(self.char2))
        sb.append(",char3=")
        sb.append(str(self.char3))
        sb.append(",char4=")
        sb.append(str(self.char4))
        sb.append(",char5=")
        sb.append(str(self.char5))
        sb.append(",wchar0=")
        sb.append(str(self.wchar0))
        sb.append(",wchar1=")
        sb.append(str(self.wchar1))
        sb.append(",wchar2=")
        sb.append(str(self.wchar2))
        sb.append(",wchar3=")
        sb.append(str(self.wchar3))
        sb.append(",wchar4=")
        sb.append(str(self.wchar4))
        sb.append(",wchar5=")
        sb.append(str(self.wchar5))
        sb.append(",int8b0=")
        sb.append(str(self.int8b0))
        sb.append(",int8b1=")
        sb.append(str(self.int8b1))
        sb.append(",int8b2=")
        sb.append(str(self.int8b2))
        sb.append(",int8b3=")
        sb.append(str(self.int8b3))
        sb.append(",int8b4=")
        sb.append(str(self.int8b4))
        sb.append(",int8b5=")
        sb.append(str(self.int8b5))
        sb.append(",uint8b0=")
        sb.append(str(self.uint8b0))
        sb.append(",uint8b1=")
        sb.append(str(self.uint8b1))
        sb.append(",uint8b2=")
        sb.append(str(self.uint8b2))
        sb.append(",uint8b3=")
        sb.append(str(self.uint8b3))
        sb.append(",uint8b4=")
        sb.append(str(self.uint8b4))
        sb.append(",uint8b5=")
        sb.append(str(self.uint8b5))
        sb.append(",int16b0=")
        sb.append(str(self.int16b0))
        sb.append(",int16b1=")
        sb.append(str(self.int16b1))
        sb.append(",int16b2=")
        sb.append(str(self.int16b2))
        sb.append(",int16b3=")
        sb.append(str(self.int16b3))
        sb.append(",int16b4=")
        sb.append(str(self.int16b4))
        sb.append(",int16b5=")
        sb.append(str(self.int16b5))
        sb.append(",uint16b0=")
        sb.append(str(self.uint16b0))
        sb.append(",uint16b1=")
        sb.append(str(self.uint16b1))
        sb.append(",uint16b2=")
        sb.append(str(self.uint16b2))
        sb.append(",uint16b3=")
        sb.append(str(self.uint16b3))
        sb.append(",uint16b4=")
        sb.append(str(self.uint16b4))
        sb.append(",uint16b5=")
        sb.append(str(self.uint16b5))
        sb.append(",int32b0=")
        sb.append(str(self.int32b0))
        sb.append(",int32b1=")
        sb.append(str(self.int32b1))
        sb.append(",int32b2=")
        sb.append(str(self.int32b2))
        sb.append(",int32b3=")
        sb.append(str(self.int32b3))
        sb.append(",int32b4=")
        sb.append(str(self.int32b4))
        sb.append(",int32b5=")
        sb.append(str(self.int32b5))
        sb.append(",uint32b0=")
        sb.append(str(self.uint32b0))
        sb.append(",uint32b1=")
        sb.append(str(self.uint32b1))
        sb.append(",uint32b2=")
        sb.append(str(self.uint32b2))
        sb.append(",uint32b3=")
        sb.append(str(self.uint32b3))
        sb.append(",uint32b4=")
        sb.append(str(self.uint32b4))
        sb.append(",uint32b5=")
        sb.append(str(self.uint32b5))
        sb.append(",int64b0=")
        sb.append(str(self.int64b0))
        sb.append(",int64b1=")
        sb.append(str(self.int64b1))
        sb.append(",int64b2=")
        sb.append(str(self.int64b2))
        sb.append(",int64b3=")
        sb.append(str(self.int64b3))
        sb.append(",int64b4=")
        sb.append(str(self.int64b4))
        sb.append(",int64b5=")
        sb.append(str(self.int64b5))
        sb.append(",uint64b0=")
        sb.append(str(self.uint64b0))
        sb.append(",uint64b1=")
        sb.append(str(self.uint64b1))
        sb.append(",uint64b2=")
        sb.append(str(self.uint64b2))
        sb.append(",uint64b3=")
        sb.append(str(self.uint64b3))
        sb.append(",uint64b4=")
        sb.append(str(self.uint64b4))
        sb.append(",uint64b5=")
        sb.append(str(self.uint64b5))
        sb.append(")")
        return "".join(sb)

    # Get struct JSON value
    def to_json(self):
        return json.dumps(self.__to_json__(), cls=fbe.JSONEncoder, separators=(',', ':'))

    def __to_json__(self):
        result = dict()
        result.update(dict(
            byte0=self.byte0, 
            byte1=self.byte1, 
            byte2=self.byte2, 
            byte3=self.byte3, 
            byte4=self.byte4, 
            byte5=self.byte5, 
            char0=self.char0, 
            char1=self.char1, 
            char2=self.char2, 
            char3=self.char3, 
            char4=self.char4, 
            char5=self.char5, 
            wchar0=self.wchar0, 
            wchar1=self.wchar1, 
            wchar2=self.wchar2, 
            wchar3=self.wchar3, 
            wchar4=self.wchar4, 
            wchar5=self.wchar5, 
            int8b0=self.int8b0, 
            int8b1=self.int8b1, 
            int8b2=self.int8b2, 
            int8b3=self.int8b3, 
            int8b4=self.int8b4, 
            int8b5=self.int8b5, 
            uint8b0=self.uint8b0, 
            uint8b1=self.uint8b1, 
            uint8b2=self.uint8b2, 
            uint8b3=self.uint8b3, 
            uint8b4=self.uint8b4, 
            uint8b5=self.uint8b5, 
            int16b0=self.int16b0, 
            int16b1=self.int16b1, 
            int16b2=self.int16b2, 
            int16b3=self.int16b3, 
            int16b4=self.int16b4, 
            int16b5=self.int16b5, 
            uint16b0=self.uint16b0, 
            uint16b1=self.uint16b1, 
            uint16b2=self.uint16b2, 
            uint16b3=self.uint16b3, 
            uint16b4=self.uint16b4, 
            uint16b5=self.uint16b5, 
            int32b0=self.int32b0, 
            int32b1=self.int32b1, 
            int32b2=self.int32b2, 
            int32b3=self.int32b3, 
            int32b4=self.int32b4, 
            int32b5=self.int32b5, 
            uint32b0=self.uint32b0, 
            uint32b1=self.uint32b1, 
            uint32b2=self.uint32b2, 
            uint32b3=self.uint32b3, 
            uint32b4=self.uint32b4, 
            uint32b5=self.uint32b5, 
            int64b0=self.int64b0, 
            int64b1=self.int64b1, 
            int64b2=self.int64b2, 
            int64b3=self.int64b3, 
            int64b4=self.int64b4, 
            int64b5=self.int64b5, 
            uint64b0=self.uint64b0, 
            uint64b1=self.uint64b1, 
            uint64b2=self.uint64b2, 
            uint64b3=self.uint64b3, 
            uint64b4=self.uint64b4, 
            uint64b5=self.uint64b5, 
        ))
        return result

    # Create struct from JSON value
    @staticmethod
    def from_json(document):
        return Enums.__from_json__(json.loads(document))

    @staticmethod
    def __from_json__(fields):
        if fields is None:
            return None
        return Enums(
            None if "byte0" not in fields else EnumByte.__from_json__(fields["byte0"]),
            None if "byte1" not in fields else EnumByte.__from_json__(fields["byte1"]),
            None if "byte2" not in fields else EnumByte.__from_json__(fields["byte2"]),
            None if "byte3" not in fields else EnumByte.__from_json__(fields["byte3"]),
            None if "byte4" not in fields else EnumByte.__from_json__(fields["byte4"]),
            None if "byte5" not in fields else EnumByte.__from_json__(fields["byte5"]),
            None if "char0" not in fields else EnumChar.__from_json__(fields["char0"]),
            None if "char1" not in fields else EnumChar.__from_json__(fields["char1"]),
            None if "char2" not in fields else EnumChar.__from_json__(fields["char2"]),
            None if "char3" not in fields else EnumChar.__from_json__(fields["char3"]),
            None if "char4" not in fields else EnumChar.__from_json__(fields["char4"]),
            None if "char5" not in fields else EnumChar.__from_json__(fields["char5"]),
            None if "wchar0" not in fields else EnumWChar.__from_json__(fields["wchar0"]),
            None if "wchar1" not in fields else EnumWChar.__from_json__(fields["wchar1"]),
            None if "wchar2" not in fields else EnumWChar.__from_json__(fields["wchar2"]),
            None if "wchar3" not in fields else EnumWChar.__from_json__(fields["wchar3"]),
            None if "wchar4" not in fields else EnumWChar.__from_json__(fields["wchar4"]),
            None if "wchar5" not in fields else EnumWChar.__from_json__(fields["wchar5"]),
            None if "int8b0" not in fields else EnumInt8.__from_json__(fields["int8b0"]),
            None if "int8b1" not in fields else EnumInt8.__from_json__(fields["int8b1"]),
            None if "int8b2" not in fields else EnumInt8.__from_json__(fields["int8b2"]),
            None if "int8b3" not in fields else EnumInt8.__from_json__(fields["int8b3"]),
            None if "int8b4" not in fields else EnumInt8.__from_json__(fields["int8b4"]),
            None if "int8b5" not in fields else EnumInt8.__from_json__(fields["int8b5"]),
            None if "uint8b0" not in fields else EnumUInt8.__from_json__(fields["uint8b0"]),
            None if "uint8b1" not in fields else EnumUInt8.__from_json__(fields["uint8b1"]),
            None if "uint8b2" not in fields else EnumUInt8.__from_json__(fields["uint8b2"]),
            None if "uint8b3" not in fields else EnumUInt8.__from_json__(fields["uint8b3"]),
            None if "uint8b4" not in fields else EnumUInt8.__from_json__(fields["uint8b4"]),
            None if "uint8b5" not in fields else EnumUInt8.__from_json__(fields["uint8b5"]),
            None if "int16b0" not in fields else EnumInt16.__from_json__(fields["int16b0"]),
            None if "int16b1" not in fields else EnumInt16.__from_json__(fields["int16b1"]),
            None if "int16b2" not in fields else EnumInt16.__from_json__(fields["int16b2"]),
            None if "int16b3" not in fields else EnumInt16.__from_json__(fields["int16b3"]),
            None if "int16b4" not in fields else EnumInt16.__from_json__(fields["int16b4"]),
            None if "int16b5" not in fields else EnumInt16.__from_json__(fields["int16b5"]),
            None if "uint16b0" not in fields else EnumUInt16.__from_json__(fields["uint16b0"]),
            None if "uint16b1" not in fields else EnumUInt16.__from_json__(fields["uint16b1"]),
            None if "uint16b2" not in fields else EnumUInt16.__from_json__(fields["uint16b2"]),
            None if "uint16b3" not in fields else EnumUInt16.__from_json__(fields["uint16b3"]),
            None if "uint16b4" not in fields else EnumUInt16.__from_json__(fields["uint16b4"]),
            None if "uint16b5" not in fields else EnumUInt16.__from_json__(fields["uint16b5"]),
            None if "int32b0" not in fields else EnumInt32.__from_json__(fields["int32b0"]),
            None if "int32b1" not in fields else EnumInt32.__from_json__(fields["int32b1"]),
            None if "int32b2" not in fields else EnumInt32.__from_json__(fields["int32b2"]),
            None if "int32b3" not in fields else EnumInt32.__from_json__(fields["int32b3"]),
            None if "int32b4" not in fields else EnumInt32.__from_json__(fields["int32b4"]),
            None if "int32b5" not in fields else EnumInt32.__from_json__(fields["int32b5"]),
            None if "uint32b0" not in fields else EnumUInt32.__from_json__(fields["uint32b0"]),
            None if "uint32b1" not in fields else EnumUInt32.__from_json__(fields["uint32b1"]),
            None if "uint32b2" not in fields else EnumUInt32.__from_json__(fields["uint32b2"]),
            None if "uint32b3" not in fields else EnumUInt32.__from_json__(fields["uint32b3"]),
            None if "uint32b4" not in fields else EnumUInt32.__from_json__(fields["uint32b4"]),
            None if "uint32b5" not in fields else EnumUInt32.__from_json__(fields["uint32b5"]),
            None if "int64b0" not in fields else EnumInt64.__from_json__(fields["int64b0"]),
            None if "int64b1" not in fields else EnumInt64.__from_json__(fields["int64b1"]),
            None if "int64b2" not in fields else EnumInt64.__from_json__(fields["int64b2"]),
            None if "int64b3" not in fields else EnumInt64.__from_json__(fields["int64b3"]),
            None if "int64b4" not in fields else EnumInt64.__from_json__(fields["int64b4"]),
            None if "int64b5" not in fields else EnumInt64.__from_json__(fields["int64b5"]),
            None if "uint64b0" not in fields else EnumUInt64.__from_json__(fields["uint64b0"]),
            None if "uint64b1" not in fields else EnumUInt64.__from_json__(fields["uint64b1"]),
            None if "uint64b2" not in fields else EnumUInt64.__from_json__(fields["uint64b2"]),
            None if "uint64b3" not in fields else EnumUInt64.__from_json__(fields["uint64b3"]),
            None if "uint64b4" not in fields else EnumUInt64.__from_json__(fields["uint64b4"]),
            None if "uint64b5" not in fields else EnumUInt64.__from_json__(fields["uint64b5"]),
        )

    # Get the FBE type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1


class FieldModelEnums(fbe.FieldModel):
    __slots__ = "_byte0", "_byte1", "_byte2", "_byte3", "_byte4", "_byte5", "_char0", "_char1", "_char2", "_char3", "_char4", "_char5", "_wchar0", "_wchar1", "_wchar2", "_wchar3", "_wchar4", "_wchar5", "_int8b0", "_int8b1", "_int8b2", "_int8b3", "_int8b4", "_int8b5", "_uint8b0", "_uint8b1", "_uint8b2", "_uint8b3", "_uint8b4", "_uint8b5", "_int16b0", "_int16b1", "_int16b2", "_int16b3", "_int16b4", "_int16b5", "_uint16b0", "_uint16b1", "_uint16b2", "_uint16b3", "_uint16b4", "_uint16b5", "_int32b0", "_int32b1", "_int32b2", "_int32b3", "_int32b4", "_int32b5", "_uint32b0", "_uint32b1", "_uint32b2", "_uint32b3", "_uint32b4", "_uint32b5", "_int64b0", "_int64b1", "_int64b2", "_int64b3", "_int64b4", "_int64b5", "_uint64b0", "_uint64b1", "_uint64b2", "_uint64b3", "_uint64b4", "_uint64b5", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._byte0 = FieldModelEnumByte(buffer, 4 + 4)
        self._byte1 = FieldModelEnumByte(buffer, self._byte0.fbe_offset + self._byte0.fbe_size)
        self._byte2 = FieldModelEnumByte(buffer, self._byte1.fbe_offset + self._byte1.fbe_size)
        self._byte3 = FieldModelEnumByte(buffer, self._byte2.fbe_offset + self._byte2.fbe_size)
        self._byte4 = FieldModelEnumByte(buffer, self._byte3.fbe_offset + self._byte3.fbe_size)
        self._byte5 = FieldModelEnumByte(buffer, self._byte4.fbe_offset + self._byte4.fbe_size)
        self._char0 = FieldModelEnumChar(buffer, self._byte5.fbe_offset + self._byte5.fbe_size)
        self._char1 = FieldModelEnumChar(buffer, self._char0.fbe_offset + self._char0.fbe_size)
        self._char2 = FieldModelEnumChar(buffer, self._char1.fbe_offset + self._char1.fbe_size)
        self._char3 = FieldModelEnumChar(buffer, self._char2.fbe_offset + self._char2.fbe_size)
        self._char4 = FieldModelEnumChar(buffer, self._char3.fbe_offset + self._char3.fbe_size)
        self._char5 = FieldModelEnumChar(buffer, self._char4.fbe_offset + self._char4.fbe_size)
        self._wchar0 = FieldModelEnumWChar(buffer, self._char5.fbe_offset + self._char5.fbe_size)
        self._wchar1 = FieldModelEnumWChar(buffer, self._wchar0.fbe_offset + self._wchar0.fbe_size)
        self._wchar2 = FieldModelEnumWChar(buffer, self._wchar1.fbe_offset + self._wchar1.fbe_size)
        self._wchar3 = FieldModelEnumWChar(buffer, self._wchar2.fbe_offset + self._wchar2.fbe_size)
        self._wchar4 = FieldModelEnumWChar(buffer, self._wchar3.fbe_offset + self._wchar3.fbe_size)
        self._wchar5 = FieldModelEnumWChar(buffer, self._wchar4.fbe_offset + self._wchar4.fbe_size)
        self._int8b0 = FieldModelEnumInt8(buffer, self._wchar5.fbe_offset + self._wchar5.fbe_size)
        self._int8b1 = FieldModelEnumInt8(buffer, self._int8b0.fbe_offset + self._int8b0.fbe_size)
        self._int8b2 = FieldModelEnumInt8(buffer, self._int8b1.fbe_offset + self._int8b1.fbe_size)
        self._int8b3 = FieldModelEnumInt8(buffer, self._int8b2.fbe_offset + self._int8b2.fbe_size)
        self._int8b4 = FieldModelEnumInt8(buffer, self._int8b3.fbe_offset + self._int8b3.fbe_size)
        self._int8b5 = FieldModelEnumInt8(buffer, self._int8b4.fbe_offset + self._int8b4.fbe_size)
        self._uint8b0 = FieldModelEnumUInt8(buffer, self._int8b5.fbe_offset + self._int8b5.fbe_size)
        self._uint8b1 = FieldModelEnumUInt8(buffer, self._uint8b0.fbe_offset + self._uint8b0.fbe_size)
        self._uint8b2 = FieldModelEnumUInt8(buffer, self._uint8b1.fbe_offset + self._uint8b1.fbe_size)
        self._uint8b3 = FieldModelEnumUInt8(buffer, self._uint8b2.fbe_offset + self._uint8b2.fbe_size)
        self._uint8b4 = FieldModelEnumUInt8(buffer, self._uint8b3.fbe_offset + self._uint8b3.fbe_size)
        self._uint8b5 = FieldModelEnumUInt8(buffer, self._uint8b4.fbe_offset + self._uint8b4.fbe_size)
        self._int16b0 = FieldModelEnumInt16(buffer, self._uint8b5.fbe_offset + self._uint8b5.fbe_size)
        self._int16b1 = FieldModelEnumInt16(buffer, self._int16b0.fbe_offset + self._int16b0.fbe_size)
        self._int16b2 = FieldModelEnumInt16(buffer, self._int16b1.fbe_offset + self._int16b1.fbe_size)
        self._int16b3 = FieldModelEnumInt16(buffer, self._int16b2.fbe_offset + self._int16b2.fbe_size)
        self._int16b4 = FieldModelEnumInt16(buffer, self._int16b3.fbe_offset + self._int16b3.fbe_size)
        self._int16b5 = FieldModelEnumInt16(buffer, self._int16b4.fbe_offset + self._int16b4.fbe_size)
        self._uint16b0 = FieldModelEnumUInt16(buffer, self._int16b5.fbe_offset + self._int16b5.fbe_size)
        self._uint16b1 = FieldModelEnumUInt16(buffer, self._uint16b0.fbe_offset + self._uint16b0.fbe_size)
        self._uint16b2 = FieldModelEnumUInt16(buffer, self._uint16b1.fbe_offset + self._uint16b1.fbe_size)
        self._uint16b3 = FieldModelEnumUInt16(buffer, self._uint16b2.fbe_offset + self._uint16b2.fbe_size)
        self._uint16b4 = FieldModelEnumUInt16(buffer, self._uint16b3.fbe_offset + self._uint16b3.fbe_size)
        self._uint16b5 = FieldModelEnumUInt16(buffer, self._uint16b4.fbe_offset + self._uint16b4.fbe_size)
        self._int32b0 = FieldModelEnumInt32(buffer, self._uint16b5.fbe_offset + self._uint16b5.fbe_size)
        self._int32b1 = FieldModelEnumInt32(buffer, self._int32b0.fbe_offset + self._int32b0.fbe_size)
        self._int32b2 = FieldModelEnumInt32(buffer, self._int32b1.fbe_offset + self._int32b1.fbe_size)
        self._int32b3 = FieldModelEnumInt32(buffer, self._int32b2.fbe_offset + self._int32b2.fbe_size)
        self._int32b4 = FieldModelEnumInt32(buffer, self._int32b3.fbe_offset + self._int32b3.fbe_size)
        self._int32b5 = FieldModelEnumInt32(buffer, self._int32b4.fbe_offset + self._int32b4.fbe_size)
        self._uint32b0 = FieldModelEnumUInt32(buffer, self._int32b5.fbe_offset + self._int32b5.fbe_size)
        self._uint32b1 = FieldModelEnumUInt32(buffer, self._uint32b0.fbe_offset + self._uint32b0.fbe_size)
        self._uint32b2 = FieldModelEnumUInt32(buffer, self._uint32b1.fbe_offset + self._uint32b1.fbe_size)
        self._uint32b3 = FieldModelEnumUInt32(buffer, self._uint32b2.fbe_offset + self._uint32b2.fbe_size)
        self._uint32b4 = FieldModelEnumUInt32(buffer, self._uint32b3.fbe_offset + self._uint32b3.fbe_size)
        self._uint32b5 = FieldModelEnumUInt32(buffer, self._uint32b4.fbe_offset + self._uint32b4.fbe_size)
        self._int64b0 = FieldModelEnumInt64(buffer, self._uint32b5.fbe_offset + self._uint32b5.fbe_size)
        self._int64b1 = FieldModelEnumInt64(buffer, self._int64b0.fbe_offset + self._int64b0.fbe_size)
        self._int64b2 = FieldModelEnumInt64(buffer, self._int64b1.fbe_offset + self._int64b1.fbe_size)
        self._int64b3 = FieldModelEnumInt64(buffer, self._int64b2.fbe_offset + self._int64b2.fbe_size)
        self._int64b4 = FieldModelEnumInt64(buffer, self._int64b3.fbe_offset + self._int64b3.fbe_size)
        self._int64b5 = FieldModelEnumInt64(buffer, self._int64b4.fbe_offset + self._int64b4.fbe_size)
        self._uint64b0 = FieldModelEnumUInt64(buffer, self._int64b5.fbe_offset + self._int64b5.fbe_size)
        self._uint64b1 = FieldModelEnumUInt64(buffer, self._uint64b0.fbe_offset + self._uint64b0.fbe_size)
        self._uint64b2 = FieldModelEnumUInt64(buffer, self._uint64b1.fbe_offset + self._uint64b1.fbe_size)
        self._uint64b3 = FieldModelEnumUInt64(buffer, self._uint64b2.fbe_offset + self._uint64b2.fbe_size)
        self._uint64b4 = FieldModelEnumUInt64(buffer, self._uint64b3.fbe_offset + self._uint64b3.fbe_size)
        self._uint64b5 = FieldModelEnumUInt64(buffer, self._uint64b4.fbe_offset + self._uint64b4.fbe_size)

    @property
    def byte0(self):
        return self._byte0

    @property
    def byte1(self):
        return self._byte1

    @property
    def byte2(self):
        return self._byte2

    @property
    def byte3(self):
        return self._byte3

    @property
    def byte4(self):
        return self._byte4

    @property
    def byte5(self):
        return self._byte5

    @property
    def char0(self):
        return self._char0

    @property
    def char1(self):
        return self._char1

    @property
    def char2(self):
        return self._char2

    @property
    def char3(self):
        return self._char3

    @property
    def char4(self):
        return self._char4

    @property
    def char5(self):
        return self._char5

    @property
    def wchar0(self):
        return self._wchar0

    @property
    def wchar1(self):
        return self._wchar1

    @property
    def wchar2(self):
        return self._wchar2

    @property
    def wchar3(self):
        return self._wchar3

    @property
    def wchar4(self):
        return self._wchar4

    @property
    def wchar5(self):
        return self._wchar5

    @property
    def int8b0(self):
        return self._int8b0

    @property
    def int8b1(self):
        return self._int8b1

    @property
    def int8b2(self):
        return self._int8b2

    @property
    def int8b3(self):
        return self._int8b3

    @property
    def int8b4(self):
        return self._int8b4

    @property
    def int8b5(self):
        return self._int8b5

    @property
    def uint8b0(self):
        return self._uint8b0

    @property
    def uint8b1(self):
        return self._uint8b1

    @property
    def uint8b2(self):
        return self._uint8b2

    @property
    def uint8b3(self):
        return self._uint8b3

    @property
    def uint8b4(self):
        return self._uint8b4

    @property
    def uint8b5(self):
        return self._uint8b5

    @property
    def int16b0(self):
        return self._int16b0

    @property
    def int16b1(self):
        return self._int16b1

    @property
    def int16b2(self):
        return self._int16b2

    @property
    def int16b3(self):
        return self._int16b3

    @property
    def int16b4(self):
        return self._int16b4

    @property
    def int16b5(self):
        return self._int16b5

    @property
    def uint16b0(self):
        return self._uint16b0

    @property
    def uint16b1(self):
        return self._uint16b1

    @property
    def uint16b2(self):
        return self._uint16b2

    @property
    def uint16b3(self):
        return self._uint16b3

    @property
    def uint16b4(self):
        return self._uint16b4

    @property
    def uint16b5(self):
        return self._uint16b5

    @property
    def int32b0(self):
        return self._int32b0

    @property
    def int32b1(self):
        return self._int32b1

    @property
    def int32b2(self):
        return self._int32b2

    @property
    def int32b3(self):
        return self._int32b3

    @property
    def int32b4(self):
        return self._int32b4

    @property
    def int32b5(self):
        return self._int32b5

    @property
    def uint32b0(self):
        return self._uint32b0

    @property
    def uint32b1(self):
        return self._uint32b1

    @property
    def uint32b2(self):
        return self._uint32b2

    @property
    def uint32b3(self):
        return self._uint32b3

    @property
    def uint32b4(self):
        return self._uint32b4

    @property
    def uint32b5(self):
        return self._uint32b5

    @property
    def int64b0(self):
        return self._int64b0

    @property
    def int64b1(self):
        return self._int64b1

    @property
    def int64b2(self):
        return self._int64b2

    @property
    def int64b3(self):
        return self._int64b3

    @property
    def int64b4(self):
        return self._int64b4

    @property
    def int64b5(self):
        return self._int64b5

    @property
    def uint64b0(self):
        return self._uint64b0

    @property
    def uint64b1(self):
        return self._uint64b1

    @property
    def uint64b2(self):
        return self._uint64b2

    @property
    def uint64b3(self):
        return self._uint64b3

    @property
    def uint64b4(self):
        return self._uint64b4

    @property
    def uint64b5(self):
        return self._uint64b5

    # Get the field size
    @property
    def fbe_size(self):
        return 4

    # Get the field body size
    @property
    def fbe_body(self):
        fbe_result = 4 + 4 \
            + self.byte0.fbe_size \
            + self.byte1.fbe_size \
            + self.byte2.fbe_size \
            + self.byte3.fbe_size \
            + self.byte4.fbe_size \
            + self.byte5.fbe_size \
            + self.char0.fbe_size \
            + self.char1.fbe_size \
            + self.char2.fbe_size \
            + self.char3.fbe_size \
            + self.char4.fbe_size \
            + self.char5.fbe_size \
            + self.wchar0.fbe_size \
            + self.wchar1.fbe_size \
            + self.wchar2.fbe_size \
            + self.wchar3.fbe_size \
            + self.wchar4.fbe_size \
            + self.wchar5.fbe_size \
            + self.int8b0.fbe_size \
            + self.int8b1.fbe_size \
            + self.int8b2.fbe_size \
            + self.int8b3.fbe_size \
            + self.int8b4.fbe_size \
            + self.int8b5.fbe_size \
            + self.uint8b0.fbe_size \
            + self.uint8b1.fbe_size \
            + self.uint8b2.fbe_size \
            + self.uint8b3.fbe_size \
            + self.uint8b4.fbe_size \
            + self.uint8b5.fbe_size \
            + self.int16b0.fbe_size \
            + self.int16b1.fbe_size \
            + self.int16b2.fbe_size \
            + self.int16b3.fbe_size \
            + self.int16b4.fbe_size \
            + self.int16b5.fbe_size \
            + self.uint16b0.fbe_size \
            + self.uint16b1.fbe_size \
            + self.uint16b2.fbe_size \
            + self.uint16b3.fbe_size \
            + self.uint16b4.fbe_size \
            + self.uint16b5.fbe_size \
            + self.int32b0.fbe_size \
            + self.int32b1.fbe_size \
            + self.int32b2.fbe_size \
            + self.int32b3.fbe_size \
            + self.int32b4.fbe_size \
            + self.int32b5.fbe_size \
            + self.uint32b0.fbe_size \
            + self.uint32b1.fbe_size \
            + self.uint32b2.fbe_size \
            + self.uint32b3.fbe_size \
            + self.uint32b4.fbe_size \
            + self.uint32b5.fbe_size \
            + self.int64b0.fbe_size \
            + self.int64b1.fbe_size \
            + self.int64b2.fbe_size \
            + self.int64b3.fbe_size \
            + self.int64b4.fbe_size \
            + self.int64b5.fbe_size \
            + self.uint64b0.fbe_size \
            + self.uint64b1.fbe_size \
            + self.uint64b2.fbe_size \
            + self.uint64b3.fbe_size \
            + self.uint64b4.fbe_size \
            + self.uint64b5.fbe_size \

        return fbe_result

    # Get the field extra size
    @property
    def fbe_extra(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4) > self._buffer.size):
            return 0

        self._buffer.shift(fbe_struct_offset)

        fbe_result = self.fbe_body \
            + self.byte0.fbe_extra \
            + self.byte1.fbe_extra \
            + self.byte2.fbe_extra \
            + self.byte3.fbe_extra \
            + self.byte4.fbe_extra \
            + self.byte5.fbe_extra \
            + self.char0.fbe_extra \
            + self.char1.fbe_extra \
            + self.char2.fbe_extra \
            + self.char3.fbe_extra \
            + self.char4.fbe_extra \
            + self.char5.fbe_extra \
            + self.wchar0.fbe_extra \
            + self.wchar1.fbe_extra \
            + self.wchar2.fbe_extra \
            + self.wchar3.fbe_extra \
            + self.wchar4.fbe_extra \
            + self.wchar5.fbe_extra \
            + self.int8b0.fbe_extra \
            + self.int8b1.fbe_extra \
            + self.int8b2.fbe_extra \
            + self.int8b3.fbe_extra \
            + self.int8b4.fbe_extra \
            + self.int8b5.fbe_extra \
            + self.uint8b0.fbe_extra \
            + self.uint8b1.fbe_extra \
            + self.uint8b2.fbe_extra \
            + self.uint8b3.fbe_extra \
            + self.uint8b4.fbe_extra \
            + self.uint8b5.fbe_extra \
            + self.int16b0.fbe_extra \
            + self.int16b1.fbe_extra \
            + self.int16b2.fbe_extra \
            + self.int16b3.fbe_extra \
            + self.int16b4.fbe_extra \
            + self.int16b5.fbe_extra \
            + self.uint16b0.fbe_extra \
            + self.uint16b1.fbe_extra \
            + self.uint16b2.fbe_extra \
            + self.uint16b3.fbe_extra \
            + self.uint16b4.fbe_extra \
            + self.uint16b5.fbe_extra \
            + self.int32b0.fbe_extra \
            + self.int32b1.fbe_extra \
            + self.int32b2.fbe_extra \
            + self.int32b3.fbe_extra \
            + self.int32b4.fbe_extra \
            + self.int32b5.fbe_extra \
            + self.uint32b0.fbe_extra \
            + self.uint32b1.fbe_extra \
            + self.uint32b2.fbe_extra \
            + self.uint32b3.fbe_extra \
            + self.uint32b4.fbe_extra \
            + self.uint32b5.fbe_extra \
            + self.int64b0.fbe_extra \
            + self.int64b1.fbe_extra \
            + self.int64b2.fbe_extra \
            + self.int64b3.fbe_extra \
            + self.int64b4.fbe_extra \
            + self.int64b5.fbe_extra \
            + self.uint64b0.fbe_extra \
            + self.uint64b1.fbe_extra \
            + self.uint64b2.fbe_extra \
            + self.uint64b3.fbe_extra \
            + self.uint64b4.fbe_extra \
            + self.uint64b5.fbe_extra \

        self._buffer.unshift(fbe_struct_offset)

        return fbe_result

    # Get the field type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1

    # Check if the struct value is valid
    def verify(self, fbe_verify_type=True):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return True

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return False

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        if fbe_struct_size < (4 + 4):
            return False

        fbe_struct_type = self.read_uint32(fbe_struct_offset + 4)
        if fbe_verify_type and (fbe_struct_type != self.fbe_type):
            return False

        self._buffer.shift(fbe_struct_offset)
        fbe_result = self.verify_fields(fbe_struct_size)
        self._buffer.unshift(fbe_struct_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.byte0.fbe_size) > fbe_struct_size:
            return True
        if not self.byte0.verify():
            return False
        fbe_current_size += self.byte0.fbe_size

        if (fbe_current_size + self.byte1.fbe_size) > fbe_struct_size:
            return True
        if not self.byte1.verify():
            return False
        fbe_current_size += self.byte1.fbe_size

        if (fbe_current_size + self.byte2.fbe_size) > fbe_struct_size:
            return True
        if not self.byte2.verify():
            return False
        fbe_current_size += self.byte2.fbe_size

        if (fbe_current_size + self.byte3.fbe_size) > fbe_struct_size:
            return True
        if not self.byte3.verify():
            return False
        fbe_current_size += self.byte3.fbe_size

        if (fbe_current_size + self.byte4.fbe_size) > fbe_struct_size:
            return True
        if not self.byte4.verify():
            return False
        fbe_current_size += self.byte4.fbe_size

        if (fbe_current_size + self.byte5.fbe_size) > fbe_struct_size:
            return True
        if not self.byte5.verify():
            return False
        fbe_current_size += self.byte5.fbe_size

        if (fbe_current_size + self.char0.fbe_size) > fbe_struct_size:
            return True
        if not self.char0.verify():
            return False
        fbe_current_size += self.char0.fbe_size

        if (fbe_current_size + self.char1.fbe_size) > fbe_struct_size:
            return True
        if not self.char1.verify():
            return False
        fbe_current_size += self.char1.fbe_size

        if (fbe_current_size + self.char2.fbe_size) > fbe_struct_size:
            return True
        if not self.char2.verify():
            return False
        fbe_current_size += self.char2.fbe_size

        if (fbe_current_size + self.char3.fbe_size) > fbe_struct_size:
            return True
        if not self.char3.verify():
            return False
        fbe_current_size += self.char3.fbe_size

        if (fbe_current_size + self.char4.fbe_size) > fbe_struct_size:
            return True
        if not self.char4.verify():
            return False
        fbe_current_size += self.char4.fbe_size

        if (fbe_current_size + self.char5.fbe_size) > fbe_struct_size:
            return True
        if not self.char5.verify():
            return False
        fbe_current_size += self.char5.fbe_size

        if (fbe_current_size + self.wchar0.fbe_size) > fbe_struct_size:
            return True
        if not self.wchar0.verify():
            return False
        fbe_current_size += self.wchar0.fbe_size

        if (fbe_current_size + self.wchar1.fbe_size) > fbe_struct_size:
            return True
        if not self.wchar1.verify():
            return False
        fbe_current_size += self.wchar1.fbe_size

        if (fbe_current_size + self.wchar2.fbe_size) > fbe_struct_size:
            return True
        if not self.wchar2.verify():
            return False
        fbe_current_size += self.wchar2.fbe_size

        if (fbe_current_size + self.wchar3.fbe_size) > fbe_struct_size:
            return True
        if not self.wchar3.verify():
            return False
        fbe_current_size += self.wchar3.fbe_size

        if (fbe_current_size + self.wchar4.fbe_size) > fbe_struct_size:
            return True
        if not self.wchar4.verify():
            return False
        fbe_current_size += self.wchar4.fbe_size

        if (fbe_current_size + self.wchar5.fbe_size) > fbe_struct_size:
            return True
        if not self.wchar5.verify():
            return False
        fbe_current_size += self.wchar5.fbe_size

        if (fbe_current_size + self.int8b0.fbe_size) > fbe_struct_size:
            return True
        if not self.int8b0.verify():
            return False
        fbe_current_size += self.int8b0.fbe_size

        if (fbe_current_size + self.int8b1.fbe_size) > fbe_struct_size:
            return True
        if not self.int8b1.verify():
            return False
        fbe_current_size += self.int8b1.fbe_size

        if (fbe_current_size + self.int8b2.fbe_size) > fbe_struct_size:
            return True
        if not self.int8b2.verify():
            return False
        fbe_current_size += self.int8b2.fbe_size

        if (fbe_current_size + self.int8b3.fbe_size) > fbe_struct_size:
            return True
        if not self.int8b3.verify():
            return False
        fbe_current_size += self.int8b3.fbe_size

        if (fbe_current_size + self.int8b4.fbe_size) > fbe_struct_size:
            return True
        if not self.int8b4.verify():
            return False
        fbe_current_size += self.int8b4.fbe_size

        if (fbe_current_size + self.int8b5.fbe_size) > fbe_struct_size:
            return True
        if not self.int8b5.verify():
            return False
        fbe_current_size += self.int8b5.fbe_size

        if (fbe_current_size + self.uint8b0.fbe_size) > fbe_struct_size:
            return True
        if not self.uint8b0.verify():
            return False
        fbe_current_size += self.uint8b0.fbe_size

        if (fbe_current_size + self.uint8b1.fbe_size) > fbe_struct_size:
            return True
        if not self.uint8b1.verify():
            return False
        fbe_current_size += self.uint8b1.fbe_size

        if (fbe_current_size + self.uint8b2.fbe_size) > fbe_struct_size:
            return True
        if not self.uint8b2.verify():
            return False
        fbe_current_size += self.uint8b2.fbe_size

        if (fbe_current_size + self.uint8b3.fbe_size) > fbe_struct_size:
            return True
        if not self.uint8b3.verify():
            return False
        fbe_current_size += self.uint8b3.fbe_size

        if (fbe_current_size + self.uint8b4.fbe_size) > fbe_struct_size:
            return True
        if not self.uint8b4.verify():
            return False
        fbe_current_size += self.uint8b4.fbe_size

        if (fbe_current_size + self.uint8b5.fbe_size) > fbe_struct_size:
            return True
        if not self.uint8b5.verify():
            return False
        fbe_current_size += self.uint8b5.fbe_size

        if (fbe_current_size + self.int16b0.fbe_size) > fbe_struct_size:
            return True
        if not self.int16b0.verify():
            return False
        fbe_current_size += self.int16b0.fbe_size

        if (fbe_current_size + self.int16b1.fbe_size) > fbe_struct_size:
            return True
        if not self.int16b1.verify():
            return False
        fbe_current_size += self.int16b1.fbe_size

        if (fbe_current_size + self.int16b2.fbe_size) > fbe_struct_size:
            return True
        if not self.int16b2.verify():
            return False
        fbe_current_size += self.int16b2.fbe_size

        if (fbe_current_size + self.int16b3.fbe_size) > fbe_struct_size:
            return True
        if not self.int16b3.verify():
            return False
        fbe_current_size += self.int16b3.fbe_size

        if (fbe_current_size + self.int16b4.fbe_size) > fbe_struct_size:
            return True
        if not self.int16b4.verify():
            return False
        fbe_current_size += self.int16b4.fbe_size

        if (fbe_current_size + self.int16b5.fbe_size) > fbe_struct_size:
            return True
        if not self.int16b5.verify():
            return False
        fbe_current_size += self.int16b5.fbe_size

        if (fbe_current_size + self.uint16b0.fbe_size) > fbe_struct_size:
            return True
        if not self.uint16b0.verify():
            return False
        fbe_current_size += self.uint16b0.fbe_size

        if (fbe_current_size + self.uint16b1.fbe_size) > fbe_struct_size:
            return True
        if not self.uint16b1.verify():
            return False
        fbe_current_size += self.uint16b1.fbe_size

        if (fbe_current_size + self.uint16b2.fbe_size) > fbe_struct_size:
            return True
        if not self.uint16b2.verify():
            return False
        fbe_current_size += self.uint16b2.fbe_size

        if (fbe_current_size + self.uint16b3.fbe_size) > fbe_struct_size:
            return True
        if not self.uint16b3.verify():
            return False
        fbe_current_size += self.uint16b3.fbe_size

        if (fbe_current_size + self.uint16b4.fbe_size) > fbe_struct_size:
            return True
        if not self.uint16b4.verify():
            return False
        fbe_current_size += self.uint16b4.fbe_size

        if (fbe_current_size + self.uint16b5.fbe_size) > fbe_struct_size:
            return True
        if not self.uint16b5.verify():
            return False
        fbe_current_size += self.uint16b5.fbe_size

        if (fbe_current_size + self.int32b0.fbe_size) > fbe_struct_size:
            return True
        if not self.int32b0.verify():
            return False
        fbe_current_size += self.int32b0.fbe_size

        if (fbe_current_size + self.int32b1.fbe_size) > fbe_struct_size:
            return True
        if not self.int32b1.verify():
            return False
        fbe_current_size += self.int32b1.fbe_size

        if (fbe_current_size + self.int32b2.fbe_size) > fbe_struct_size:
            return True
        if not self.int32b2.verify():
            return False
        fbe_current_size += self.int32b2.fbe_size

        if (fbe_current_size + self.int32b3.fbe_size) > fbe_struct_size:
            return True
        if not self.int32b3.verify():
            return False
        fbe_current_size += self.int32b3.fbe_size

        if (fbe_current_size + self.int32b4.fbe_size) > fbe_struct_size:
            return True
        if not self.int32b4.verify():
            return False
        fbe_current_size += self.int32b4.fbe_size

        if (fbe_current_size + self.int32b5.fbe_size) > fbe_struct_size:
            return True
        if not self.int32b5.verify():
            return False
        fbe_current_size += self.int32b5.fbe_size

        if (fbe_current_size + self.uint32b0.fbe_size) > fbe_struct_size:
            return True
        if not self.uint32b0.verify():
            return False
        fbe_current_size += self.uint32b0.fbe_size

        if (fbe_current_size + self.uint32b1.fbe_size) > fbe_struct_size:
            return True
        if not self.uint32b1.verify():
            return False
        fbe_current_size += self.uint32b1.fbe_size

        if (fbe_current_size + self.uint32b2.fbe_size) > fbe_struct_size:
            return True
        if not self.uint32b2.verify():
            return False
        fbe_current_size += self.uint32b2.fbe_size

        if (fbe_current_size + self.uint32b3.fbe_size) > fbe_struct_size:
            return True
        if not self.uint32b3.verify():
            return False
        fbe_current_size += self.uint32b3.fbe_size

        if (fbe_current_size + self.uint32b4.fbe_size) > fbe_struct_size:
            return True
        if not self.uint32b4.verify():
            return False
        fbe_current_size += self.uint32b4.fbe_size

        if (fbe_current_size + self.uint32b5.fbe_size) > fbe_struct_size:
            return True
        if not self.uint32b5.verify():
            return False
        fbe_current_size += self.uint32b5.fbe_size

        if (fbe_current_size + self.int64b0.fbe_size) > fbe_struct_size:
            return True
        if not self.int64b0.verify():
            return False
        fbe_current_size += self.int64b0.fbe_size

        if (fbe_current_size + self.int64b1.fbe_size) > fbe_struct_size:
            return True
        if not self.int64b1.verify():
            return False
        fbe_current_size += self.int64b1.fbe_size

        if (fbe_current_size + self.int64b2.fbe_size) > fbe_struct_size:
            return True
        if not self.int64b2.verify():
            return False
        fbe_current_size += self.int64b2.fbe_size

        if (fbe_current_size + self.int64b3.fbe_size) > fbe_struct_size:
            return True
        if not self.int64b3.verify():
            return False
        fbe_current_size += self.int64b3.fbe_size

        if (fbe_current_size + self.int64b4.fbe_size) > fbe_struct_size:
            return True
        if not self.int64b4.verify():
            return False
        fbe_current_size += self.int64b4.fbe_size

        if (fbe_current_size + self.int64b5.fbe_size) > fbe_struct_size:
            return True
        if not self.int64b5.verify():
            return False
        fbe_current_size += self.int64b5.fbe_size

        if (fbe_current_size + self.uint64b0.fbe_size) > fbe_struct_size:
            return True
        if not self.uint64b0.verify():
            return False
        fbe_current_size += self.uint64b0.fbe_size

        if (fbe_current_size + self.uint64b1.fbe_size) > fbe_struct_size:
            return True
        if not self.uint64b1.verify():
            return False
        fbe_current_size += self.uint64b1.fbe_size

        if (fbe_current_size + self.uint64b2.fbe_size) > fbe_struct_size:
            return True
        if not self.uint64b2.verify():
            return False
        fbe_current_size += self.uint64b2.fbe_size

        if (fbe_current_size + self.uint64b3.fbe_size) > fbe_struct_size:
            return True
        if not self.uint64b3.verify():
            return False
        fbe_current_size += self.uint64b3.fbe_size

        if (fbe_current_size + self.uint64b4.fbe_size) > fbe_struct_size:
            return True
        if not self.uint64b4.verify():
            return False
        fbe_current_size += self.uint64b4.fbe_size

        if (fbe_current_size + self.uint64b5.fbe_size) > fbe_struct_size:
            return True
        if not self.uint64b5.verify():
            return False
        fbe_current_size += self.uint64b5.fbe_size

        return True

    # Get the struct value (begin phase)
    def get_begin(self):
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_offset = self.read_uint32(self.fbe_offset)
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + 4 + 4) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset == 0) or ((self._buffer.offset + fbe_struct_offset + 4 + 4) > self._buffer.size):
            return 0

        fbe_struct_size = self.read_uint32(fbe_struct_offset)
        assert (fbe_struct_size >= (4 + 4)), "Model is broken!"
        if fbe_struct_size < (4 + 4):
            return 0

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Get the struct value (end phase)
    def get_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Enums()

        fbe_begin = self.get_begin()
        if fbe_begin == 0:
            return fbe_value

        fbe_struct_size = self.read_uint32(0)
        self.get_fields(fbe_value, fbe_struct_size)
        self.get_end(fbe_begin)
        return fbe_value

    # Get the struct fields values
    def get_fields(self, fbe_value, fbe_struct_size):
        fbe_current_size = 4 + 4

        if (fbe_current_size + self.byte0.fbe_size) <= fbe_struct_size:
            fbe_value.byte0 = self.byte0.get(EnumByte.ENUM_VALUE_0)
        else:
            fbe_value.byte0 = EnumByte.ENUM_VALUE_0
        fbe_current_size += self.byte0.fbe_size

        if (fbe_current_size + self.byte1.fbe_size) <= fbe_struct_size:
            fbe_value.byte1 = self.byte1.get(EnumByte.ENUM_VALUE_1)
        else:
            fbe_value.byte1 = EnumByte.ENUM_VALUE_1
        fbe_current_size += self.byte1.fbe_size

        if (fbe_current_size + self.byte2.fbe_size) <= fbe_struct_size:
            fbe_value.byte2 = self.byte2.get(EnumByte.ENUM_VALUE_2)
        else:
            fbe_value.byte2 = EnumByte.ENUM_VALUE_2
        fbe_current_size += self.byte2.fbe_size

        if (fbe_current_size + self.byte3.fbe_size) <= fbe_struct_size:
            fbe_value.byte3 = self.byte3.get(EnumByte.ENUM_VALUE_3)
        else:
            fbe_value.byte3 = EnumByte.ENUM_VALUE_3
        fbe_current_size += self.byte3.fbe_size

        if (fbe_current_size + self.byte4.fbe_size) <= fbe_struct_size:
            fbe_value.byte4 = self.byte4.get(EnumByte.ENUM_VALUE_4)
        else:
            fbe_value.byte4 = EnumByte.ENUM_VALUE_4
        fbe_current_size += self.byte4.fbe_size

        if (fbe_current_size + self.byte5.fbe_size) <= fbe_struct_size:
            fbe_value.byte5 = self.byte5.get(EnumByte.ENUM_VALUE_5)
        else:
            fbe_value.byte5 = EnumByte.ENUM_VALUE_5
        fbe_current_size += self.byte5.fbe_size

        if (fbe_current_size + self.char0.fbe_size) <= fbe_struct_size:
            fbe_value.char0 = self.char0.get(EnumChar.ENUM_VALUE_0)
        else:
            fbe_value.char0 = EnumChar.ENUM_VALUE_0
        fbe_current_size += self.char0.fbe_size

        if (fbe_current_size + self.char1.fbe_size) <= fbe_struct_size:
            fbe_value.char1 = self.char1.get(EnumChar.ENUM_VALUE_1)
        else:
            fbe_value.char1 = EnumChar.ENUM_VALUE_1
        fbe_current_size += self.char1.fbe_size

        if (fbe_current_size + self.char2.fbe_size) <= fbe_struct_size:
            fbe_value.char2 = self.char2.get(EnumChar.ENUM_VALUE_2)
        else:
            fbe_value.char2 = EnumChar.ENUM_VALUE_2
        fbe_current_size += self.char2.fbe_size

        if (fbe_current_size + self.char3.fbe_size) <= fbe_struct_size:
            fbe_value.char3 = self.char3.get(EnumChar.ENUM_VALUE_3)
        else:
            fbe_value.char3 = EnumChar.ENUM_VALUE_3
        fbe_current_size += self.char3.fbe_size

        if (fbe_current_size + self.char4.fbe_size) <= fbe_struct_size:
            fbe_value.char4 = self.char4.get(EnumChar.ENUM_VALUE_4)
        else:
            fbe_value.char4 = EnumChar.ENUM_VALUE_4
        fbe_current_size += self.char4.fbe_size

        if (fbe_current_size + self.char5.fbe_size) <= fbe_struct_size:
            fbe_value.char5 = self.char5.get(EnumChar.ENUM_VALUE_5)
        else:
            fbe_value.char5 = EnumChar.ENUM_VALUE_5
        fbe_current_size += self.char5.fbe_size

        if (fbe_current_size + self.wchar0.fbe_size) <= fbe_struct_size:
            fbe_value.wchar0 = self.wchar0.get(EnumWChar.ENUM_VALUE_0)
        else:
            fbe_value.wchar0 = EnumWChar.ENUM_VALUE_0
        fbe_current_size += self.wchar0.fbe_size

        if (fbe_current_size + self.wchar1.fbe_size) <= fbe_struct_size:
            fbe_value.wchar1 = self.wchar1.get(EnumWChar.ENUM_VALUE_1)
        else:
            fbe_value.wchar1 = EnumWChar.ENUM_VALUE_1
        fbe_current_size += self.wchar1.fbe_size

        if (fbe_current_size + self.wchar2.fbe_size) <= fbe_struct_size:
            fbe_value.wchar2 = self.wchar2.get(EnumWChar.ENUM_VALUE_2)
        else:
            fbe_value.wchar2 = EnumWChar.ENUM_VALUE_2
        fbe_current_size += self.wchar2.fbe_size

        if (fbe_current_size + self.wchar3.fbe_size) <= fbe_struct_size:
            fbe_value.wchar3 = self.wchar3.get(EnumWChar.ENUM_VALUE_3)
        else:
            fbe_value.wchar3 = EnumWChar.ENUM_VALUE_3
        fbe_current_size += self.wchar3.fbe_size

        if (fbe_current_size + self.wchar4.fbe_size) <= fbe_struct_size:
            fbe_value.wchar4 = self.wchar4.get(EnumWChar.ENUM_VALUE_4)
        else:
            fbe_value.wchar4 = EnumWChar.ENUM_VALUE_4
        fbe_current_size += self.wchar4.fbe_size

        if (fbe_current_size + self.wchar5.fbe_size) <= fbe_struct_size:
            fbe_value.wchar5 = self.wchar5.get(EnumWChar.ENUM_VALUE_5)
        else:
            fbe_value.wchar5 = EnumWChar.ENUM_VALUE_5
        fbe_current_size += self.wchar5.fbe_size

        if (fbe_current_size + self.int8b0.fbe_size) <= fbe_struct_size:
            fbe_value.int8b0 = self.int8b0.get(EnumInt8.ENUM_VALUE_0)
        else:
            fbe_value.int8b0 = EnumInt8.ENUM_VALUE_0
        fbe_current_size += self.int8b0.fbe_size

        if (fbe_current_size + self.int8b1.fbe_size) <= fbe_struct_size:
            fbe_value.int8b1 = self.int8b1.get(EnumInt8.ENUM_VALUE_1)
        else:
            fbe_value.int8b1 = EnumInt8.ENUM_VALUE_1
        fbe_current_size += self.int8b1.fbe_size

        if (fbe_current_size + self.int8b2.fbe_size) <= fbe_struct_size:
            fbe_value.int8b2 = self.int8b2.get(EnumInt8.ENUM_VALUE_2)
        else:
            fbe_value.int8b2 = EnumInt8.ENUM_VALUE_2
        fbe_current_size += self.int8b2.fbe_size

        if (fbe_current_size + self.int8b3.fbe_size) <= fbe_struct_size:
            fbe_value.int8b3 = self.int8b3.get(EnumInt8.ENUM_VALUE_3)
        else:
            fbe_value.int8b3 = EnumInt8.ENUM_VALUE_3
        fbe_current_size += self.int8b3.fbe_size

        if (fbe_current_size + self.int8b4.fbe_size) <= fbe_struct_size:
            fbe_value.int8b4 = self.int8b4.get(EnumInt8.ENUM_VALUE_4)
        else:
            fbe_value.int8b4 = EnumInt8.ENUM_VALUE_4
        fbe_current_size += self.int8b4.fbe_size

        if (fbe_current_size + self.int8b5.fbe_size) <= fbe_struct_size:
            fbe_value.int8b5 = self.int8b5.get(EnumInt8.ENUM_VALUE_5)
        else:
            fbe_value.int8b5 = EnumInt8.ENUM_VALUE_5
        fbe_current_size += self.int8b5.fbe_size

        if (fbe_current_size + self.uint8b0.fbe_size) <= fbe_struct_size:
            fbe_value.uint8b0 = self.uint8b0.get(EnumUInt8.ENUM_VALUE_0)
        else:
            fbe_value.uint8b0 = EnumUInt8.ENUM_VALUE_0
        fbe_current_size += self.uint8b0.fbe_size

        if (fbe_current_size + self.uint8b1.fbe_size) <= fbe_struct_size:
            fbe_value.uint8b1 = self.uint8b1.get(EnumUInt8.ENUM_VALUE_1)
        else:
            fbe_value.uint8b1 = EnumUInt8.ENUM_VALUE_1
        fbe_current_size += self.uint8b1.fbe_size

        if (fbe_current_size + self.uint8b2.fbe_size) <= fbe_struct_size:
            fbe_value.uint8b2 = self.uint8b2.get(EnumUInt8.ENUM_VALUE_2)
        else:
            fbe_value.uint8b2 = EnumUInt8.ENUM_VALUE_2
        fbe_current_size += self.uint8b2.fbe_size

        if (fbe_current_size + self.uint8b3.fbe_size) <= fbe_struct_size:
            fbe_value.uint8b3 = self.uint8b3.get(EnumUInt8.ENUM_VALUE_3)
        else:
            fbe_value.uint8b3 = EnumUInt8.ENUM_VALUE_3
        fbe_current_size += self.uint8b3.fbe_size

        if (fbe_current_size + self.uint8b4.fbe_size) <= fbe_struct_size:
            fbe_value.uint8b4 = self.uint8b4.get(EnumUInt8.ENUM_VALUE_4)
        else:
            fbe_value.uint8b4 = EnumUInt8.ENUM_VALUE_4
        fbe_current_size += self.uint8b4.fbe_size

        if (fbe_current_size + self.uint8b5.fbe_size) <= fbe_struct_size:
            fbe_value.uint8b5 = self.uint8b5.get(EnumUInt8.ENUM_VALUE_5)
        else:
            fbe_value.uint8b5 = EnumUInt8.ENUM_VALUE_5
        fbe_current_size += self.uint8b5.fbe_size

        if (fbe_current_size + self.int16b0.fbe_size) <= fbe_struct_size:
            fbe_value.int16b0 = self.int16b0.get(EnumInt16.ENUM_VALUE_0)
        else:
            fbe_value.int16b0 = EnumInt16.ENUM_VALUE_0
        fbe_current_size += self.int16b0.fbe_size

        if (fbe_current_size + self.int16b1.fbe_size) <= fbe_struct_size:
            fbe_value.int16b1 = self.int16b1.get(EnumInt16.ENUM_VALUE_1)
        else:
            fbe_value.int16b1 = EnumInt16.ENUM_VALUE_1
        fbe_current_size += self.int16b1.fbe_size

        if (fbe_current_size + self.int16b2.fbe_size) <= fbe_struct_size:
            fbe_value.int16b2 = self.int16b2.get(EnumInt16.ENUM_VALUE_2)
        else:
            fbe_value.int16b2 = EnumInt16.ENUM_VALUE_2
        fbe_current_size += self.int16b2.fbe_size

        if (fbe_current_size + self.int16b3.fbe_size) <= fbe_struct_size:
            fbe_value.int16b3 = self.int16b3.get(EnumInt16.ENUM_VALUE_3)
        else:
            fbe_value.int16b3 = EnumInt16.ENUM_VALUE_3
        fbe_current_size += self.int16b3.fbe_size

        if (fbe_current_size + self.int16b4.fbe_size) <= fbe_struct_size:
            fbe_value.int16b4 = self.int16b4.get(EnumInt16.ENUM_VALUE_4)
        else:
            fbe_value.int16b4 = EnumInt16.ENUM_VALUE_4
        fbe_current_size += self.int16b4.fbe_size

        if (fbe_current_size + self.int16b5.fbe_size) <= fbe_struct_size:
            fbe_value.int16b5 = self.int16b5.get(EnumInt16.ENUM_VALUE_5)
        else:
            fbe_value.int16b5 = EnumInt16.ENUM_VALUE_5
        fbe_current_size += self.int16b5.fbe_size

        if (fbe_current_size + self.uint16b0.fbe_size) <= fbe_struct_size:
            fbe_value.uint16b0 = self.uint16b0.get(EnumUInt16.ENUM_VALUE_0)
        else:
            fbe_value.uint16b0 = EnumUInt16.ENUM_VALUE_0
        fbe_current_size += self.uint16b0.fbe_size

        if (fbe_current_size + self.uint16b1.fbe_size) <= fbe_struct_size:
            fbe_value.uint16b1 = self.uint16b1.get(EnumUInt16.ENUM_VALUE_1)
        else:
            fbe_value.uint16b1 = EnumUInt16.ENUM_VALUE_1
        fbe_current_size += self.uint16b1.fbe_size

        if (fbe_current_size + self.uint16b2.fbe_size) <= fbe_struct_size:
            fbe_value.uint16b2 = self.uint16b2.get(EnumUInt16.ENUM_VALUE_2)
        else:
            fbe_value.uint16b2 = EnumUInt16.ENUM_VALUE_2
        fbe_current_size += self.uint16b2.fbe_size

        if (fbe_current_size + self.uint16b3.fbe_size) <= fbe_struct_size:
            fbe_value.uint16b3 = self.uint16b3.get(EnumUInt16.ENUM_VALUE_3)
        else:
            fbe_value.uint16b3 = EnumUInt16.ENUM_VALUE_3
        fbe_current_size += self.uint16b3.fbe_size

        if (fbe_current_size + self.uint16b4.fbe_size) <= fbe_struct_size:
            fbe_value.uint16b4 = self.uint16b4.get(EnumUInt16.ENUM_VALUE_4)
        else:
            fbe_value.uint16b4 = EnumUInt16.ENUM_VALUE_4
        fbe_current_size += self.uint16b4.fbe_size

        if (fbe_current_size + self.uint16b5.fbe_size) <= fbe_struct_size:
            fbe_value.uint16b5 = self.uint16b5.get(EnumUInt16.ENUM_VALUE_5)
        else:
            fbe_value.uint16b5 = EnumUInt16.ENUM_VALUE_5
        fbe_current_size += self.uint16b5.fbe_size

        if (fbe_current_size + self.int32b0.fbe_size) <= fbe_struct_size:
            fbe_value.int32b0 = self.int32b0.get(EnumInt32.ENUM_VALUE_0)
        else:
            fbe_value.int32b0 = EnumInt32.ENUM_VALUE_0
        fbe_current_size += self.int32b0.fbe_size

        if (fbe_current_size + self.int32b1.fbe_size) <= fbe_struct_size:
            fbe_value.int32b1 = self.int32b1.get(EnumInt32.ENUM_VALUE_1)
        else:
            fbe_value.int32b1 = EnumInt32.ENUM_VALUE_1
        fbe_current_size += self.int32b1.fbe_size

        if (fbe_current_size + self.int32b2.fbe_size) <= fbe_struct_size:
            fbe_value.int32b2 = self.int32b2.get(EnumInt32.ENUM_VALUE_2)
        else:
            fbe_value.int32b2 = EnumInt32.ENUM_VALUE_2
        fbe_current_size += self.int32b2.fbe_size

        if (fbe_current_size + self.int32b3.fbe_size) <= fbe_struct_size:
            fbe_value.int32b3 = self.int32b3.get(EnumInt32.ENUM_VALUE_3)
        else:
            fbe_value.int32b3 = EnumInt32.ENUM_VALUE_3
        fbe_current_size += self.int32b3.fbe_size

        if (fbe_current_size + self.int32b4.fbe_size) <= fbe_struct_size:
            fbe_value.int32b4 = self.int32b4.get(EnumInt32.ENUM_VALUE_4)
        else:
            fbe_value.int32b4 = EnumInt32.ENUM_VALUE_4
        fbe_current_size += self.int32b4.fbe_size

        if (fbe_current_size + self.int32b5.fbe_size) <= fbe_struct_size:
            fbe_value.int32b5 = self.int32b5.get(EnumInt32.ENUM_VALUE_5)
        else:
            fbe_value.int32b5 = EnumInt32.ENUM_VALUE_5
        fbe_current_size += self.int32b5.fbe_size

        if (fbe_current_size + self.uint32b0.fbe_size) <= fbe_struct_size:
            fbe_value.uint32b0 = self.uint32b0.get(EnumUInt32.ENUM_VALUE_0)
        else:
            fbe_value.uint32b0 = EnumUInt32.ENUM_VALUE_0
        fbe_current_size += self.uint32b0.fbe_size

        if (fbe_current_size + self.uint32b1.fbe_size) <= fbe_struct_size:
            fbe_value.uint32b1 = self.uint32b1.get(EnumUInt32.ENUM_VALUE_1)
        else:
            fbe_value.uint32b1 = EnumUInt32.ENUM_VALUE_1
        fbe_current_size += self.uint32b1.fbe_size

        if (fbe_current_size + self.uint32b2.fbe_size) <= fbe_struct_size:
            fbe_value.uint32b2 = self.uint32b2.get(EnumUInt32.ENUM_VALUE_2)
        else:
            fbe_value.uint32b2 = EnumUInt32.ENUM_VALUE_2
        fbe_current_size += self.uint32b2.fbe_size

        if (fbe_current_size + self.uint32b3.fbe_size) <= fbe_struct_size:
            fbe_value.uint32b3 = self.uint32b3.get(EnumUInt32.ENUM_VALUE_3)
        else:
            fbe_value.uint32b3 = EnumUInt32.ENUM_VALUE_3
        fbe_current_size += self.uint32b3.fbe_size

        if (fbe_current_size + self.uint32b4.fbe_size) <= fbe_struct_size:
            fbe_value.uint32b4 = self.uint32b4.get(EnumUInt32.ENUM_VALUE_4)
        else:
            fbe_value.uint32b4 = EnumUInt32.ENUM_VALUE_4
        fbe_current_size += self.uint32b4.fbe_size

        if (fbe_current_size + self.uint32b5.fbe_size) <= fbe_struct_size:
            fbe_value.uint32b5 = self.uint32b5.get(EnumUInt32.ENUM_VALUE_5)
        else:
            fbe_value.uint32b5 = EnumUInt32.ENUM_VALUE_5
        fbe_current_size += self.uint32b5.fbe_size

        if (fbe_current_size + self.int64b0.fbe_size) <= fbe_struct_size:
            fbe_value.int64b0 = self.int64b0.get(EnumInt64.ENUM_VALUE_0)
        else:
            fbe_value.int64b0 = EnumInt64.ENUM_VALUE_0
        fbe_current_size += self.int64b0.fbe_size

        if (fbe_current_size + self.int64b1.fbe_size) <= fbe_struct_size:
            fbe_value.int64b1 = self.int64b1.get(EnumInt64.ENUM_VALUE_1)
        else:
            fbe_value.int64b1 = EnumInt64.ENUM_VALUE_1
        fbe_current_size += self.int64b1.fbe_size

        if (fbe_current_size + self.int64b2.fbe_size) <= fbe_struct_size:
            fbe_value.int64b2 = self.int64b2.get(EnumInt64.ENUM_VALUE_2)
        else:
            fbe_value.int64b2 = EnumInt64.ENUM_VALUE_2
        fbe_current_size += self.int64b2.fbe_size

        if (fbe_current_size + self.int64b3.fbe_size) <= fbe_struct_size:
            fbe_value.int64b3 = self.int64b3.get(EnumInt64.ENUM_VALUE_3)
        else:
            fbe_value.int64b3 = EnumInt64.ENUM_VALUE_3
        fbe_current_size += self.int64b3.fbe_size

        if (fbe_current_size + self.int64b4.fbe_size) <= fbe_struct_size:
            fbe_value.int64b4 = self.int64b4.get(EnumInt64.ENUM_VALUE_4)
        else:
            fbe_value.int64b4 = EnumInt64.ENUM_VALUE_4
        fbe_current_size += self.int64b4.fbe_size

        if (fbe_current_size + self.int64b5.fbe_size) <= fbe_struct_size:
            fbe_value.int64b5 = self.int64b5.get(EnumInt64.ENUM_VALUE_5)
        else:
            fbe_value.int64b5 = EnumInt64.ENUM_VALUE_5
        fbe_current_size += self.int64b5.fbe_size

        if (fbe_current_size + self.uint64b0.fbe_size) <= fbe_struct_size:
            fbe_value.uint64b0 = self.uint64b0.get(EnumUInt64.ENUM_VALUE_0)
        else:
            fbe_value.uint64b0 = EnumUInt64.ENUM_VALUE_0
        fbe_current_size += self.uint64b0.fbe_size

        if (fbe_current_size + self.uint64b1.fbe_size) <= fbe_struct_size:
            fbe_value.uint64b1 = self.uint64b1.get(EnumUInt64.ENUM_VALUE_1)
        else:
            fbe_value.uint64b1 = EnumUInt64.ENUM_VALUE_1
        fbe_current_size += self.uint64b1.fbe_size

        if (fbe_current_size + self.uint64b2.fbe_size) <= fbe_struct_size:
            fbe_value.uint64b2 = self.uint64b2.get(EnumUInt64.ENUM_VALUE_2)
        else:
            fbe_value.uint64b2 = EnumUInt64.ENUM_VALUE_2
        fbe_current_size += self.uint64b2.fbe_size

        if (fbe_current_size + self.uint64b3.fbe_size) <= fbe_struct_size:
            fbe_value.uint64b3 = self.uint64b3.get(EnumUInt64.ENUM_VALUE_3)
        else:
            fbe_value.uint64b3 = EnumUInt64.ENUM_VALUE_3
        fbe_current_size += self.uint64b3.fbe_size

        if (fbe_current_size + self.uint64b4.fbe_size) <= fbe_struct_size:
            fbe_value.uint64b4 = self.uint64b4.get(EnumUInt64.ENUM_VALUE_4)
        else:
            fbe_value.uint64b4 = EnumUInt64.ENUM_VALUE_4
        fbe_current_size += self.uint64b4.fbe_size

        if (fbe_current_size + self.uint64b5.fbe_size) <= fbe_struct_size:
            fbe_value.uint64b5 = self.uint64b5.get(EnumUInt64.ENUM_VALUE_5)
        else:
            fbe_value.uint64b5 = EnumUInt64.ENUM_VALUE_5
        fbe_current_size += self.uint64b5.fbe_size

    # Set the struct value (begin phase)
    def set_begin(self):
        assert (self._buffer.offset + self.fbe_offset + self.fbe_size) <= self._buffer.size, "Model is broken!"
        if (self._buffer.offset + self.fbe_offset + self.fbe_size) > self._buffer.size:
            return 0

        fbe_struct_size = self.fbe_body
        fbe_struct_offset = self._buffer.allocate(fbe_struct_size) - self._buffer.offset
        assert (fbe_struct_offset > 0) and ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) <= self._buffer.size), "Model is broken!"
        if (fbe_struct_offset <= 0) or ((self._buffer.offset + fbe_struct_offset + fbe_struct_size) > self._buffer.size):
            return 0

        self.write_uint32(self.fbe_offset, fbe_struct_offset)
        self.write_uint32(fbe_struct_offset, fbe_struct_size)
        self.write_uint32(fbe_struct_offset + 4, self.fbe_type)

        self._buffer.shift(fbe_struct_offset)
        return fbe_struct_offset

    # Set the struct value (end phase)
    def set_end(self, fbe_begin):
        self._buffer.unshift(fbe_begin)

    # Set the struct value
    def set(self, fbe_value):
        fbe_begin = self.set_begin()
        if fbe_begin == 0:
            return

        self.set_fields(fbe_value)
        self.set_end(fbe_begin)

    # Set the struct fields values
    def set_fields(self, fbe_value):
        self.byte0.set(fbe_value.byte0)
        self.byte1.set(fbe_value.byte1)
        self.byte2.set(fbe_value.byte2)
        self.byte3.set(fbe_value.byte3)
        self.byte4.set(fbe_value.byte4)
        self.byte5.set(fbe_value.byte5)
        self.char0.set(fbe_value.char0)
        self.char1.set(fbe_value.char1)
        self.char2.set(fbe_value.char2)
        self.char3.set(fbe_value.char3)
        self.char4.set(fbe_value.char4)
        self.char5.set(fbe_value.char5)
        self.wchar0.set(fbe_value.wchar0)
        self.wchar1.set(fbe_value.wchar1)
        self.wchar2.set(fbe_value.wchar2)
        self.wchar3.set(fbe_value.wchar3)
        self.wchar4.set(fbe_value.wchar4)
        self.wchar5.set(fbe_value.wchar5)
        self.int8b0.set(fbe_value.int8b0)
        self.int8b1.set(fbe_value.int8b1)
        self.int8b2.set(fbe_value.int8b2)
        self.int8b3.set(fbe_value.int8b3)
        self.int8b4.set(fbe_value.int8b4)
        self.int8b5.set(fbe_value.int8b5)
        self.uint8b0.set(fbe_value.uint8b0)
        self.uint8b1.set(fbe_value.uint8b1)
        self.uint8b2.set(fbe_value.uint8b2)
        self.uint8b3.set(fbe_value.uint8b3)
        self.uint8b4.set(fbe_value.uint8b4)
        self.uint8b5.set(fbe_value.uint8b5)
        self.int16b0.set(fbe_value.int16b0)
        self.int16b1.set(fbe_value.int16b1)
        self.int16b2.set(fbe_value.int16b2)
        self.int16b3.set(fbe_value.int16b3)
        self.int16b4.set(fbe_value.int16b4)
        self.int16b5.set(fbe_value.int16b5)
        self.uint16b0.set(fbe_value.uint16b0)
        self.uint16b1.set(fbe_value.uint16b1)
        self.uint16b2.set(fbe_value.uint16b2)
        self.uint16b3.set(fbe_value.uint16b3)
        self.uint16b4.set(fbe_value.uint16b4)
        self.uint16b5.set(fbe_value.uint16b5)
        self.int32b0.set(fbe_value.int32b0)
        self.int32b1.set(fbe_value.int32b1)
        self.int32b2.set(fbe_value.int32b2)
        self.int32b3.set(fbe_value.int32b3)
        self.int32b4.set(fbe_value.int32b4)
        self.int32b5.set(fbe_value.int32b5)
        self.uint32b0.set(fbe_value.uint32b0)
        self.uint32b1.set(fbe_value.uint32b1)
        self.uint32b2.set(fbe_value.uint32b2)
        self.uint32b3.set(fbe_value.uint32b3)
        self.uint32b4.set(fbe_value.uint32b4)
        self.uint32b5.set(fbe_value.uint32b5)
        self.int64b0.set(fbe_value.int64b0)
        self.int64b1.set(fbe_value.int64b1)
        self.int64b2.set(fbe_value.int64b2)
        self.int64b3.set(fbe_value.int64b3)
        self.int64b4.set(fbe_value.int64b4)
        self.int64b5.set(fbe_value.int64b5)
        self.uint64b0.set(fbe_value.uint64b0)
        self.uint64b1.set(fbe_value.uint64b1)
        self.uint64b2.set(fbe_value.uint64b2)
        self.uint64b3.set(fbe_value.uint64b3)
        self.uint64b4.set(fbe_value.uint64b4)
        self.uint64b5.set(fbe_value.uint64b5)


# Fast Binary Encoding Enums model
class EnumsModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FieldModelEnums(self.buffer, 4)

    @property
    def model(self):
        return self._model

    # Get the model size
    @property
    def fbe_size(self):
        return self._model.fbe_size + self._model.fbe_extra

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FieldModelEnums.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            return False

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        if fbe_full_size < self._model.fbe_size:
            return False

        return self._model.verify()

    # Create a new model (begin phase)
    def create_begin(self):
        fbe_begin = self.buffer.allocate(4 + self._model.fbe_size)
        return fbe_begin

    # Create a new model (end phase)
    def create_end(self, fbe_begin):
        fbe_end = self.buffer.size
        fbe_full_size = fbe_end - fbe_begin
        self.write_uint32(self._model.fbe_offset - 4, fbe_full_size)
        return fbe_full_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_begin = self.create_begin()
        self._model.set(value)
        fbe_full_size = self.create_end(fbe_begin)
        return fbe_full_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Enums()

        if (self.buffer.offset + self._model.fbe_offset - 4) > self.buffer.size:
            value = Enums()
            return value, 0

        fbe_full_size = self.read_uint32(self._model.fbe_offset - 4)
        assert (fbe_full_size >= self._model.fbe_size), "Model is broken!"
        if fbe_full_size < self._model.fbe_size:
            value = Enums()
            return value, 0

        self._model.get(value)
        return value, fbe_full_size

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


class FinalModelEnums(fbe.FinalModel):
    __slots__ = "_byte0", "_byte1", "_byte2", "_byte3", "_byte4", "_byte5", "_char0", "_char1", "_char2", "_char3", "_char4", "_char5", "_wchar0", "_wchar1", "_wchar2", "_wchar3", "_wchar4", "_wchar5", "_int8b0", "_int8b1", "_int8b2", "_int8b3", "_int8b4", "_int8b5", "_uint8b0", "_uint8b1", "_uint8b2", "_uint8b3", "_uint8b4", "_uint8b5", "_int16b0", "_int16b1", "_int16b2", "_int16b3", "_int16b4", "_int16b5", "_uint16b0", "_uint16b1", "_uint16b2", "_uint16b3", "_uint16b4", "_uint16b5", "_int32b0", "_int32b1", "_int32b2", "_int32b3", "_int32b4", "_int32b5", "_uint32b0", "_uint32b1", "_uint32b2", "_uint32b3", "_uint32b4", "_uint32b5", "_int64b0", "_int64b1", "_int64b2", "_int64b3", "_int64b4", "_int64b5", "_uint64b0", "_uint64b1", "_uint64b2", "_uint64b3", "_uint64b4", "_uint64b5", 

    def __init__(self, buffer, offset):
        super().__init__(buffer, offset)
        self._byte0 = FinalModelEnumByte(buffer, 0)
        self._byte1 = FinalModelEnumByte(buffer, 0)
        self._byte2 = FinalModelEnumByte(buffer, 0)
        self._byte3 = FinalModelEnumByte(buffer, 0)
        self._byte4 = FinalModelEnumByte(buffer, 0)
        self._byte5 = FinalModelEnumByte(buffer, 0)
        self._char0 = FinalModelEnumChar(buffer, 0)
        self._char1 = FinalModelEnumChar(buffer, 0)
        self._char2 = FinalModelEnumChar(buffer, 0)
        self._char3 = FinalModelEnumChar(buffer, 0)
        self._char4 = FinalModelEnumChar(buffer, 0)
        self._char5 = FinalModelEnumChar(buffer, 0)
        self._wchar0 = FinalModelEnumWChar(buffer, 0)
        self._wchar1 = FinalModelEnumWChar(buffer, 0)
        self._wchar2 = FinalModelEnumWChar(buffer, 0)
        self._wchar3 = FinalModelEnumWChar(buffer, 0)
        self._wchar4 = FinalModelEnumWChar(buffer, 0)
        self._wchar5 = FinalModelEnumWChar(buffer, 0)
        self._int8b0 = FinalModelEnumInt8(buffer, 0)
        self._int8b1 = FinalModelEnumInt8(buffer, 0)
        self._int8b2 = FinalModelEnumInt8(buffer, 0)
        self._int8b3 = FinalModelEnumInt8(buffer, 0)
        self._int8b4 = FinalModelEnumInt8(buffer, 0)
        self._int8b5 = FinalModelEnumInt8(buffer, 0)
        self._uint8b0 = FinalModelEnumUInt8(buffer, 0)
        self._uint8b1 = FinalModelEnumUInt8(buffer, 0)
        self._uint8b2 = FinalModelEnumUInt8(buffer, 0)
        self._uint8b3 = FinalModelEnumUInt8(buffer, 0)
        self._uint8b4 = FinalModelEnumUInt8(buffer, 0)
        self._uint8b5 = FinalModelEnumUInt8(buffer, 0)
        self._int16b0 = FinalModelEnumInt16(buffer, 0)
        self._int16b1 = FinalModelEnumInt16(buffer, 0)
        self._int16b2 = FinalModelEnumInt16(buffer, 0)
        self._int16b3 = FinalModelEnumInt16(buffer, 0)
        self._int16b4 = FinalModelEnumInt16(buffer, 0)
        self._int16b5 = FinalModelEnumInt16(buffer, 0)
        self._uint16b0 = FinalModelEnumUInt16(buffer, 0)
        self._uint16b1 = FinalModelEnumUInt16(buffer, 0)
        self._uint16b2 = FinalModelEnumUInt16(buffer, 0)
        self._uint16b3 = FinalModelEnumUInt16(buffer, 0)
        self._uint16b4 = FinalModelEnumUInt16(buffer, 0)
        self._uint16b5 = FinalModelEnumUInt16(buffer, 0)
        self._int32b0 = FinalModelEnumInt32(buffer, 0)
        self._int32b1 = FinalModelEnumInt32(buffer, 0)
        self._int32b2 = FinalModelEnumInt32(buffer, 0)
        self._int32b3 = FinalModelEnumInt32(buffer, 0)
        self._int32b4 = FinalModelEnumInt32(buffer, 0)
        self._int32b5 = FinalModelEnumInt32(buffer, 0)
        self._uint32b0 = FinalModelEnumUInt32(buffer, 0)
        self._uint32b1 = FinalModelEnumUInt32(buffer, 0)
        self._uint32b2 = FinalModelEnumUInt32(buffer, 0)
        self._uint32b3 = FinalModelEnumUInt32(buffer, 0)
        self._uint32b4 = FinalModelEnumUInt32(buffer, 0)
        self._uint32b5 = FinalModelEnumUInt32(buffer, 0)
        self._int64b0 = FinalModelEnumInt64(buffer, 0)
        self._int64b1 = FinalModelEnumInt64(buffer, 0)
        self._int64b2 = FinalModelEnumInt64(buffer, 0)
        self._int64b3 = FinalModelEnumInt64(buffer, 0)
        self._int64b4 = FinalModelEnumInt64(buffer, 0)
        self._int64b5 = FinalModelEnumInt64(buffer, 0)
        self._uint64b0 = FinalModelEnumUInt64(buffer, 0)
        self._uint64b1 = FinalModelEnumUInt64(buffer, 0)
        self._uint64b2 = FinalModelEnumUInt64(buffer, 0)
        self._uint64b3 = FinalModelEnumUInt64(buffer, 0)
        self._uint64b4 = FinalModelEnumUInt64(buffer, 0)
        self._uint64b5 = FinalModelEnumUInt64(buffer, 0)

    @property
    def byte0(self):
        return self._byte0

    @property
    def byte1(self):
        return self._byte1

    @property
    def byte2(self):
        return self._byte2

    @property
    def byte3(self):
        return self._byte3

    @property
    def byte4(self):
        return self._byte4

    @property
    def byte5(self):
        return self._byte5

    @property
    def char0(self):
        return self._char0

    @property
    def char1(self):
        return self._char1

    @property
    def char2(self):
        return self._char2

    @property
    def char3(self):
        return self._char3

    @property
    def char4(self):
        return self._char4

    @property
    def char5(self):
        return self._char5

    @property
    def wchar0(self):
        return self._wchar0

    @property
    def wchar1(self):
        return self._wchar1

    @property
    def wchar2(self):
        return self._wchar2

    @property
    def wchar3(self):
        return self._wchar3

    @property
    def wchar4(self):
        return self._wchar4

    @property
    def wchar5(self):
        return self._wchar5

    @property
    def int8b0(self):
        return self._int8b0

    @property
    def int8b1(self):
        return self._int8b1

    @property
    def int8b2(self):
        return self._int8b2

    @property
    def int8b3(self):
        return self._int8b3

    @property
    def int8b4(self):
        return self._int8b4

    @property
    def int8b5(self):
        return self._int8b5

    @property
    def uint8b0(self):
        return self._uint8b0

    @property
    def uint8b1(self):
        return self._uint8b1

    @property
    def uint8b2(self):
        return self._uint8b2

    @property
    def uint8b3(self):
        return self._uint8b3

    @property
    def uint8b4(self):
        return self._uint8b4

    @property
    def uint8b5(self):
        return self._uint8b5

    @property
    def int16b0(self):
        return self._int16b0

    @property
    def int16b1(self):
        return self._int16b1

    @property
    def int16b2(self):
        return self._int16b2

    @property
    def int16b3(self):
        return self._int16b3

    @property
    def int16b4(self):
        return self._int16b4

    @property
    def int16b5(self):
        return self._int16b5

    @property
    def uint16b0(self):
        return self._uint16b0

    @property
    def uint16b1(self):
        return self._uint16b1

    @property
    def uint16b2(self):
        return self._uint16b2

    @property
    def uint16b3(self):
        return self._uint16b3

    @property
    def uint16b4(self):
        return self._uint16b4

    @property
    def uint16b5(self):
        return self._uint16b5

    @property
    def int32b0(self):
        return self._int32b0

    @property
    def int32b1(self):
        return self._int32b1

    @property
    def int32b2(self):
        return self._int32b2

    @property
    def int32b3(self):
        return self._int32b3

    @property
    def int32b4(self):
        return self._int32b4

    @property
    def int32b5(self):
        return self._int32b5

    @property
    def uint32b0(self):
        return self._uint32b0

    @property
    def uint32b1(self):
        return self._uint32b1

    @property
    def uint32b2(self):
        return self._uint32b2

    @property
    def uint32b3(self):
        return self._uint32b3

    @property
    def uint32b4(self):
        return self._uint32b4

    @property
    def uint32b5(self):
        return self._uint32b5

    @property
    def int64b0(self):
        return self._int64b0

    @property
    def int64b1(self):
        return self._int64b1

    @property
    def int64b2(self):
        return self._int64b2

    @property
    def int64b3(self):
        return self._int64b3

    @property
    def int64b4(self):
        return self._int64b4

    @property
    def int64b5(self):
        return self._int64b5

    @property
    def uint64b0(self):
        return self._uint64b0

    @property
    def uint64b1(self):
        return self._uint64b1

    @property
    def uint64b2(self):
        return self._uint64b2

    @property
    def uint64b3(self):
        return self._uint64b3

    @property
    def uint64b4(self):
        return self._uint64b4

    @property
    def uint64b5(self):
        return self._uint64b5

    # Get the allocation size
    def fbe_allocation_size(self, fbe_value):
        fbe_result = 0 \
            + self.byte0.fbe_allocation_size(fbe_value.byte0) \
            + self.byte1.fbe_allocation_size(fbe_value.byte1) \
            + self.byte2.fbe_allocation_size(fbe_value.byte2) \
            + self.byte3.fbe_allocation_size(fbe_value.byte3) \
            + self.byte4.fbe_allocation_size(fbe_value.byte4) \
            + self.byte5.fbe_allocation_size(fbe_value.byte5) \
            + self.char0.fbe_allocation_size(fbe_value.char0) \
            + self.char1.fbe_allocation_size(fbe_value.char1) \
            + self.char2.fbe_allocation_size(fbe_value.char2) \
            + self.char3.fbe_allocation_size(fbe_value.char3) \
            + self.char4.fbe_allocation_size(fbe_value.char4) \
            + self.char5.fbe_allocation_size(fbe_value.char5) \
            + self.wchar0.fbe_allocation_size(fbe_value.wchar0) \
            + self.wchar1.fbe_allocation_size(fbe_value.wchar1) \
            + self.wchar2.fbe_allocation_size(fbe_value.wchar2) \
            + self.wchar3.fbe_allocation_size(fbe_value.wchar3) \
            + self.wchar4.fbe_allocation_size(fbe_value.wchar4) \
            + self.wchar5.fbe_allocation_size(fbe_value.wchar5) \
            + self.int8b0.fbe_allocation_size(fbe_value.int8b0) \
            + self.int8b1.fbe_allocation_size(fbe_value.int8b1) \
            + self.int8b2.fbe_allocation_size(fbe_value.int8b2) \
            + self.int8b3.fbe_allocation_size(fbe_value.int8b3) \
            + self.int8b4.fbe_allocation_size(fbe_value.int8b4) \
            + self.int8b5.fbe_allocation_size(fbe_value.int8b5) \
            + self.uint8b0.fbe_allocation_size(fbe_value.uint8b0) \
            + self.uint8b1.fbe_allocation_size(fbe_value.uint8b1) \
            + self.uint8b2.fbe_allocation_size(fbe_value.uint8b2) \
            + self.uint8b3.fbe_allocation_size(fbe_value.uint8b3) \
            + self.uint8b4.fbe_allocation_size(fbe_value.uint8b4) \
            + self.uint8b5.fbe_allocation_size(fbe_value.uint8b5) \
            + self.int16b0.fbe_allocation_size(fbe_value.int16b0) \
            + self.int16b1.fbe_allocation_size(fbe_value.int16b1) \
            + self.int16b2.fbe_allocation_size(fbe_value.int16b2) \
            + self.int16b3.fbe_allocation_size(fbe_value.int16b3) \
            + self.int16b4.fbe_allocation_size(fbe_value.int16b4) \
            + self.int16b5.fbe_allocation_size(fbe_value.int16b5) \
            + self.uint16b0.fbe_allocation_size(fbe_value.uint16b0) \
            + self.uint16b1.fbe_allocation_size(fbe_value.uint16b1) \
            + self.uint16b2.fbe_allocation_size(fbe_value.uint16b2) \
            + self.uint16b3.fbe_allocation_size(fbe_value.uint16b3) \
            + self.uint16b4.fbe_allocation_size(fbe_value.uint16b4) \
            + self.uint16b5.fbe_allocation_size(fbe_value.uint16b5) \
            + self.int32b0.fbe_allocation_size(fbe_value.int32b0) \
            + self.int32b1.fbe_allocation_size(fbe_value.int32b1) \
            + self.int32b2.fbe_allocation_size(fbe_value.int32b2) \
            + self.int32b3.fbe_allocation_size(fbe_value.int32b3) \
            + self.int32b4.fbe_allocation_size(fbe_value.int32b4) \
            + self.int32b5.fbe_allocation_size(fbe_value.int32b5) \
            + self.uint32b0.fbe_allocation_size(fbe_value.uint32b0) \
            + self.uint32b1.fbe_allocation_size(fbe_value.uint32b1) \
            + self.uint32b2.fbe_allocation_size(fbe_value.uint32b2) \
            + self.uint32b3.fbe_allocation_size(fbe_value.uint32b3) \
            + self.uint32b4.fbe_allocation_size(fbe_value.uint32b4) \
            + self.uint32b5.fbe_allocation_size(fbe_value.uint32b5) \
            + self.int64b0.fbe_allocation_size(fbe_value.int64b0) \
            + self.int64b1.fbe_allocation_size(fbe_value.int64b1) \
            + self.int64b2.fbe_allocation_size(fbe_value.int64b2) \
            + self.int64b3.fbe_allocation_size(fbe_value.int64b3) \
            + self.int64b4.fbe_allocation_size(fbe_value.int64b4) \
            + self.int64b5.fbe_allocation_size(fbe_value.int64b5) \
            + self.uint64b0.fbe_allocation_size(fbe_value.uint64b0) \
            + self.uint64b1.fbe_allocation_size(fbe_value.uint64b1) \
            + self.uint64b2.fbe_allocation_size(fbe_value.uint64b2) \
            + self.uint64b3.fbe_allocation_size(fbe_value.uint64b3) \
            + self.uint64b4.fbe_allocation_size(fbe_value.uint64b4) \
            + self.uint64b5.fbe_allocation_size(fbe_value.uint64b5) \

        return fbe_result

    # Get the final type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = 1

    # Check if the struct value is valid
    def verify(self):
        self._buffer.shift(self.fbe_offset)
        fbe_result = self.verify_fields()
        self._buffer.unshift(self.fbe_offset)
        return fbe_result

    # Check if the struct fields are valid
    def verify_fields(self):
        fbe_current_offset = 0

        self.byte0.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.byte1.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.byte2.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.byte3.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.byte4.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.byte5.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.char0.fbe_offset = fbe_current_offset
        fbe_field_size = self.char0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.char1.fbe_offset = fbe_current_offset
        fbe_field_size = self.char1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.char2.fbe_offset = fbe_current_offset
        fbe_field_size = self.char2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.char3.fbe_offset = fbe_current_offset
        fbe_field_size = self.char3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.char4.fbe_offset = fbe_current_offset
        fbe_field_size = self.char4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.char5.fbe_offset = fbe_current_offset
        fbe_field_size = self.char5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wchar0.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wchar1.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wchar2.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wchar3.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wchar4.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.wchar5.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int8b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int8b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int8b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int8b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int8b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int8b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint8b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint8b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint8b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint8b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint8b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint8b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int16b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int16b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int16b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int16b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int16b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int16b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint16b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint16b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint16b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint16b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint16b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint16b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int32b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int32b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int32b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int32b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int32b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int32b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint32b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint32b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint32b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint32b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint32b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint32b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int64b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int64b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int64b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int64b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int64b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.int64b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint64b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b0.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint64b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b1.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint64b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b2.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint64b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b3.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint64b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b4.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        self.uint64b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b5.verify()
        if fbe_field_size == sys.maxsize:
            return sys.maxsize
        fbe_current_offset += fbe_field_size

        return fbe_current_offset

    # Get the struct value
    def get(self, fbe_value=None):
        if fbe_value is None:
            fbe_value = Enums()

        self._buffer.shift(self.fbe_offset)
        fbe_size = self.get_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_value, fbe_size

    # Get the struct fields values
    def get_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.byte0.fbe_offset = fbe_current_offset
        fbe_result = self.byte0.get()
        fbe_value.byte0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.byte1.fbe_offset = fbe_current_offset
        fbe_result = self.byte1.get()
        fbe_value.byte1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.byte2.fbe_offset = fbe_current_offset
        fbe_result = self.byte2.get()
        fbe_value.byte2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.byte3.fbe_offset = fbe_current_offset
        fbe_result = self.byte3.get()
        fbe_value.byte3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.byte4.fbe_offset = fbe_current_offset
        fbe_result = self.byte4.get()
        fbe_value.byte4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.byte5.fbe_offset = fbe_current_offset
        fbe_result = self.byte5.get()
        fbe_value.byte5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.char0.fbe_offset = fbe_current_offset
        fbe_result = self.char0.get()
        fbe_value.char0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.char1.fbe_offset = fbe_current_offset
        fbe_result = self.char1.get()
        fbe_value.char1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.char2.fbe_offset = fbe_current_offset
        fbe_result = self.char2.get()
        fbe_value.char2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.char3.fbe_offset = fbe_current_offset
        fbe_result = self.char3.get()
        fbe_value.char3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.char4.fbe_offset = fbe_current_offset
        fbe_result = self.char4.get()
        fbe_value.char4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.char5.fbe_offset = fbe_current_offset
        fbe_result = self.char5.get()
        fbe_value.char5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wchar0.fbe_offset = fbe_current_offset
        fbe_result = self.wchar0.get()
        fbe_value.wchar0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wchar1.fbe_offset = fbe_current_offset
        fbe_result = self.wchar1.get()
        fbe_value.wchar1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wchar2.fbe_offset = fbe_current_offset
        fbe_result = self.wchar2.get()
        fbe_value.wchar2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wchar3.fbe_offset = fbe_current_offset
        fbe_result = self.wchar3.get()
        fbe_value.wchar3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wchar4.fbe_offset = fbe_current_offset
        fbe_result = self.wchar4.get()
        fbe_value.wchar4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.wchar5.fbe_offset = fbe_current_offset
        fbe_result = self.wchar5.get()
        fbe_value.wchar5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int8b0.fbe_offset = fbe_current_offset
        fbe_result = self.int8b0.get()
        fbe_value.int8b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int8b1.fbe_offset = fbe_current_offset
        fbe_result = self.int8b1.get()
        fbe_value.int8b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int8b2.fbe_offset = fbe_current_offset
        fbe_result = self.int8b2.get()
        fbe_value.int8b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int8b3.fbe_offset = fbe_current_offset
        fbe_result = self.int8b3.get()
        fbe_value.int8b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int8b4.fbe_offset = fbe_current_offset
        fbe_result = self.int8b4.get()
        fbe_value.int8b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int8b5.fbe_offset = fbe_current_offset
        fbe_result = self.int8b5.get()
        fbe_value.int8b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint8b0.fbe_offset = fbe_current_offset
        fbe_result = self.uint8b0.get()
        fbe_value.uint8b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint8b1.fbe_offset = fbe_current_offset
        fbe_result = self.uint8b1.get()
        fbe_value.uint8b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint8b2.fbe_offset = fbe_current_offset
        fbe_result = self.uint8b2.get()
        fbe_value.uint8b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint8b3.fbe_offset = fbe_current_offset
        fbe_result = self.uint8b3.get()
        fbe_value.uint8b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint8b4.fbe_offset = fbe_current_offset
        fbe_result = self.uint8b4.get()
        fbe_value.uint8b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint8b5.fbe_offset = fbe_current_offset
        fbe_result = self.uint8b5.get()
        fbe_value.uint8b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int16b0.fbe_offset = fbe_current_offset
        fbe_result = self.int16b0.get()
        fbe_value.int16b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int16b1.fbe_offset = fbe_current_offset
        fbe_result = self.int16b1.get()
        fbe_value.int16b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int16b2.fbe_offset = fbe_current_offset
        fbe_result = self.int16b2.get()
        fbe_value.int16b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int16b3.fbe_offset = fbe_current_offset
        fbe_result = self.int16b3.get()
        fbe_value.int16b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int16b4.fbe_offset = fbe_current_offset
        fbe_result = self.int16b4.get()
        fbe_value.int16b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int16b5.fbe_offset = fbe_current_offset
        fbe_result = self.int16b5.get()
        fbe_value.int16b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint16b0.fbe_offset = fbe_current_offset
        fbe_result = self.uint16b0.get()
        fbe_value.uint16b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint16b1.fbe_offset = fbe_current_offset
        fbe_result = self.uint16b1.get()
        fbe_value.uint16b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint16b2.fbe_offset = fbe_current_offset
        fbe_result = self.uint16b2.get()
        fbe_value.uint16b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint16b3.fbe_offset = fbe_current_offset
        fbe_result = self.uint16b3.get()
        fbe_value.uint16b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint16b4.fbe_offset = fbe_current_offset
        fbe_result = self.uint16b4.get()
        fbe_value.uint16b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint16b5.fbe_offset = fbe_current_offset
        fbe_result = self.uint16b5.get()
        fbe_value.uint16b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int32b0.fbe_offset = fbe_current_offset
        fbe_result = self.int32b0.get()
        fbe_value.int32b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int32b1.fbe_offset = fbe_current_offset
        fbe_result = self.int32b1.get()
        fbe_value.int32b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int32b2.fbe_offset = fbe_current_offset
        fbe_result = self.int32b2.get()
        fbe_value.int32b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int32b3.fbe_offset = fbe_current_offset
        fbe_result = self.int32b3.get()
        fbe_value.int32b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int32b4.fbe_offset = fbe_current_offset
        fbe_result = self.int32b4.get()
        fbe_value.int32b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int32b5.fbe_offset = fbe_current_offset
        fbe_result = self.int32b5.get()
        fbe_value.int32b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint32b0.fbe_offset = fbe_current_offset
        fbe_result = self.uint32b0.get()
        fbe_value.uint32b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint32b1.fbe_offset = fbe_current_offset
        fbe_result = self.uint32b1.get()
        fbe_value.uint32b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint32b2.fbe_offset = fbe_current_offset
        fbe_result = self.uint32b2.get()
        fbe_value.uint32b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint32b3.fbe_offset = fbe_current_offset
        fbe_result = self.uint32b3.get()
        fbe_value.uint32b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint32b4.fbe_offset = fbe_current_offset
        fbe_result = self.uint32b4.get()
        fbe_value.uint32b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint32b5.fbe_offset = fbe_current_offset
        fbe_result = self.uint32b5.get()
        fbe_value.uint32b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int64b0.fbe_offset = fbe_current_offset
        fbe_result = self.int64b0.get()
        fbe_value.int64b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int64b1.fbe_offset = fbe_current_offset
        fbe_result = self.int64b1.get()
        fbe_value.int64b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int64b2.fbe_offset = fbe_current_offset
        fbe_result = self.int64b2.get()
        fbe_value.int64b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int64b3.fbe_offset = fbe_current_offset
        fbe_result = self.int64b3.get()
        fbe_value.int64b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int64b4.fbe_offset = fbe_current_offset
        fbe_result = self.int64b4.get()
        fbe_value.int64b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.int64b5.fbe_offset = fbe_current_offset
        fbe_result = self.int64b5.get()
        fbe_value.int64b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint64b0.fbe_offset = fbe_current_offset
        fbe_result = self.uint64b0.get()
        fbe_value.uint64b0 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint64b1.fbe_offset = fbe_current_offset
        fbe_result = self.uint64b1.get()
        fbe_value.uint64b1 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint64b2.fbe_offset = fbe_current_offset
        fbe_result = self.uint64b2.get()
        fbe_value.uint64b2 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint64b3.fbe_offset = fbe_current_offset
        fbe_result = self.uint64b3.get()
        fbe_value.uint64b3 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint64b4.fbe_offset = fbe_current_offset
        fbe_result = self.uint64b4.get()
        fbe_value.uint64b4 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        self.uint64b5.fbe_offset = fbe_current_offset
        fbe_result = self.uint64b5.get()
        fbe_value.uint64b5 = fbe_result[0]
        fbe_current_offset += fbe_result[1]
        fbe_current_size += fbe_result[1]

        return fbe_current_size

    # Set the struct value
    def set(self, fbe_value):
        self._buffer.shift(self.fbe_offset)
        fbe_size = self.set_fields(fbe_value)
        self._buffer.unshift(self.fbe_offset)
        return fbe_size

    # Set the struct fields values
    def set_fields(self, fbe_value):
        fbe_current_offset = 0
        fbe_current_size = 0

        self.byte0.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte0.set(fbe_value.byte0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.byte1.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte1.set(fbe_value.byte1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.byte2.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte2.set(fbe_value.byte2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.byte3.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte3.set(fbe_value.byte3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.byte4.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte4.set(fbe_value.byte4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.byte5.fbe_offset = fbe_current_offset
        fbe_field_size = self.byte5.set(fbe_value.byte5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.char0.fbe_offset = fbe_current_offset
        fbe_field_size = self.char0.set(fbe_value.char0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.char1.fbe_offset = fbe_current_offset
        fbe_field_size = self.char1.set(fbe_value.char1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.char2.fbe_offset = fbe_current_offset
        fbe_field_size = self.char2.set(fbe_value.char2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.char3.fbe_offset = fbe_current_offset
        fbe_field_size = self.char3.set(fbe_value.char3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.char4.fbe_offset = fbe_current_offset
        fbe_field_size = self.char4.set(fbe_value.char4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.char5.fbe_offset = fbe_current_offset
        fbe_field_size = self.char5.set(fbe_value.char5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wchar0.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar0.set(fbe_value.wchar0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wchar1.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar1.set(fbe_value.wchar1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wchar2.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar2.set(fbe_value.wchar2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wchar3.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar3.set(fbe_value.wchar3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wchar4.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar4.set(fbe_value.wchar4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.wchar5.fbe_offset = fbe_current_offset
        fbe_field_size = self.wchar5.set(fbe_value.wchar5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int8b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b0.set(fbe_value.int8b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int8b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b1.set(fbe_value.int8b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int8b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b2.set(fbe_value.int8b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int8b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b3.set(fbe_value.int8b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int8b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b4.set(fbe_value.int8b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int8b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int8b5.set(fbe_value.int8b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint8b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b0.set(fbe_value.uint8b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint8b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b1.set(fbe_value.uint8b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint8b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b2.set(fbe_value.uint8b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint8b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b3.set(fbe_value.uint8b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint8b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b4.set(fbe_value.uint8b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint8b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint8b5.set(fbe_value.uint8b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int16b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b0.set(fbe_value.int16b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int16b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b1.set(fbe_value.int16b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int16b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b2.set(fbe_value.int16b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int16b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b3.set(fbe_value.int16b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int16b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b4.set(fbe_value.int16b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int16b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int16b5.set(fbe_value.int16b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint16b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b0.set(fbe_value.uint16b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint16b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b1.set(fbe_value.uint16b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint16b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b2.set(fbe_value.uint16b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint16b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b3.set(fbe_value.uint16b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint16b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b4.set(fbe_value.uint16b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint16b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint16b5.set(fbe_value.uint16b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int32b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b0.set(fbe_value.int32b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int32b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b1.set(fbe_value.int32b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int32b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b2.set(fbe_value.int32b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int32b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b3.set(fbe_value.int32b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int32b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b4.set(fbe_value.int32b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int32b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int32b5.set(fbe_value.int32b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint32b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b0.set(fbe_value.uint32b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint32b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b1.set(fbe_value.uint32b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint32b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b2.set(fbe_value.uint32b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint32b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b3.set(fbe_value.uint32b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint32b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b4.set(fbe_value.uint32b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint32b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint32b5.set(fbe_value.uint32b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int64b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b0.set(fbe_value.int64b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int64b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b1.set(fbe_value.int64b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int64b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b2.set(fbe_value.int64b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int64b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b3.set(fbe_value.int64b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int64b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b4.set(fbe_value.int64b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.int64b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.int64b5.set(fbe_value.int64b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint64b0.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b0.set(fbe_value.uint64b0)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint64b1.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b1.set(fbe_value.uint64b1)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint64b2.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b2.set(fbe_value.uint64b2)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint64b3.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b3.set(fbe_value.uint64b3)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint64b4.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b4.set(fbe_value.uint64b4)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        self.uint64b5.fbe_offset = fbe_current_offset
        fbe_field_size = self.uint64b5.set(fbe_value.uint64b5)
        fbe_current_offset += fbe_field_size
        fbe_current_size += fbe_field_size

        return fbe_current_size


# Fast Binary Encoding Enums final model
class EnumsFinalModel(fbe.Model):
    __slots__ = "_model",

    def __init__(self, buffer=None):
        super().__init__(buffer)
        self._model = FinalModelEnums(self.buffer, 8)

    # Get the model type
    @property
    def fbe_type(self):
        return self.TYPE

    TYPE = FinalModelEnums.TYPE

    # Check if the struct value is valid
    def verify(self):
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return False

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return False

        return (8 + self._model.verify()) == fbe_struct_size

    # Serialize the struct value
    def serialize(self, value):
        fbe_initial_size = self.buffer.size

        fbe_struct_type = self.fbe_type
        fbe_struct_size = 8 + self._model.fbe_allocation_size(value)
        fbe_struct_offset = self.buffer.allocate(fbe_struct_size) - self.buffer.offset
        assert ((self.buffer.offset + fbe_struct_offset + fbe_struct_size) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + fbe_struct_offset + fbe_struct_size) > self.buffer.size:
            return 0

        fbe_struct_size = 8 + self._model.set(value)
        self.buffer.resize(fbe_initial_size + fbe_struct_size)

        self.write_uint32(self._model.fbe_offset - 8, fbe_struct_size)
        self.write_uint32(self._model.fbe_offset - 4, fbe_struct_type)

        return fbe_struct_size

    # Deserialize the struct value
    def deserialize(self, value=None):
        if value is None:
            value = Enums()

        assert ((self.buffer.offset + self._model.fbe_offset) <= self.buffer.size), "Model is broken!"
        if (self.buffer.offset + self._model.fbe_offset) > self.buffer.size:
            return Enums(), 0

        fbe_struct_size = self.read_uint32(self._model.fbe_offset - 8)
        fbe_struct_type = self.read_uint32(self._model.fbe_offset - 4)
        assert ((fbe_struct_size > 0) and (fbe_struct_type == self.fbe_type)), "Model is broken!"
        if (fbe_struct_size <= 0) or (fbe_struct_type != self.fbe_type):
            return Enums(), 8

        fbe_result = self._model.get(value)
        return fbe_result[0], (8 + fbe_result[1])

    # Move to the next struct value
    def next(self, prev):
        self._model.fbe_shift(prev)


# Fast Binary Encoding enums protocol version
class ProtocolVersion(object):
    # Protocol major version
    Major = 1
    # Protocol minor version
    Minor = 0


# Fast Binary Encoding enums sender
class Sender(fbe.Sender):
    def __init__(self, buffer=None):
        super().__init__(buffer, False)

    # Sender models accessors

    # Send methods

    def send(self, value):
        return 0

    # Send message handler
    def on_send(self, buffer, offset, size):
        raise NotImplementedError("enums.Sender.on_send() not implemented!")


# Fast Binary Encoding enums receiver
class Receiver(fbe.Receiver):
    def __init__(self, buffer=None):
        super().__init__(buffer, False)

    # Receive handlers

    def on_receive(self, type, buffer, offset, size):

        return False


# Fast Binary Encoding enums proxy
class Proxy(fbe.Receiver):
    def __init__(self, buffer=None):
        super().__init__(buffer, False)

    # Receive handlers

    def on_receive(self, type, buffer, offset, size):

        return False


# Fast Binary Encoding enums final sender
class FinalSender(fbe.Sender):
    def __init__(self, buffer=None):
        super().__init__(buffer, True)

    # Sender models accessors

    # Send methods

    def send(self, value):
        return 0

    # Send message handler
    def on_send(self, buffer, offset, size):
        raise NotImplementedError("enums.Sender.on_send() not implemented!")


# Fast Binary Encoding enums final receiver
class FinalReceiver(fbe.Receiver):
    def __init__(self, buffer=None):
        super().__init__(buffer, True)

    # Receive handlers

    def on_receive(self, type, buffer, offset, size):

        return False
