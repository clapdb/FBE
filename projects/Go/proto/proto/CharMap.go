//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: proto.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package proto

import "fmt"
import "strconv"
import "strings"
import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// CharMap key
type CharMapKey struct {
}

// Convert CharMap flags key to string
func (k *CharMapKey) String() string {
    var sb strings.Builder
    sb.WriteString("CharMapKey(")
    sb.WriteString(")")
    return sb.String()
}

// CharMap struct
type CharMap struct {
    Abbr map[rune]string `json:"abbr"`
}

// Create a new CharMap struct
func NewCharMap() *CharMap {
    return &CharMap{
        Abbr: make(map[rune]string),
    }
}

// Create a new CharMap struct from the given field values
func NewCharMapFromFieldValues(Abbr map[rune]string) *CharMap {
    return &CharMap{Abbr}
}

// Create a new CharMap struct from JSON
func NewCharMapFromJSON(buffer []byte) (*CharMap, error) {
    result := *NewCharMap()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s *CharMap) Copy() *CharMap {
    var result = *s
    return &result
}

// Struct deep clone
func (s *CharMap) Clone() *CharMap {
    // Serialize the struct to the FBE stream
    writer := NewCharMapModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewCharMapModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *CharMap) Key() CharMapKey {
    return CharMapKey{
    }
}

// Convert struct to optional
func (s *CharMap) Optional() *CharMap {
    return s
}

// Get the FBE type
func (s *CharMap) FBEType() int { return 1 }

// Convert struct to string
func (s *CharMap) String() string {
    var sb strings.Builder
    sb.WriteString("CharMap(")
    sb.WriteString("abbr=")
    if s.Abbr != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Abbr)), 10) + "][{")
        for k, v := range s.Abbr {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString("'" + string(k) + "'")
            sb.WriteString("->")
            sb.WriteString("\"" + v + "\"")
            first = false
        }
        sb.WriteString("}]")
    } else {
        sb.WriteString("abbr=[0][{}]")
    }
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s *CharMap) JSON() ([]byte, error) {
    return fbe.Json.Marshal(s)
}
