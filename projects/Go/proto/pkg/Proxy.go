//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: pkg.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package pkg

import "errors"
import "fbeproj/proto/fbe"
import "fbeproj/proto/osa"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version
var _ = osa.Version

// Fast Binary Encoding pkg proxy
type Proxy struct {
    *fbe.Receiver
    osaProxy *osa.Proxy

}

// Create a new pkg proxy with an empty buffer
func NewProxy() *Proxy {
    return NewProxyWithBuffer(fbe.NewEmptyBuffer())
}

// Create a new pkg proxy with the given buffer
func NewProxyWithBuffer(buffer *fbe.Buffer) *Proxy {
    proxy := &Proxy{
        fbe.NewReceiver(buffer, false),
        osa.NewProxyWithBuffer(buffer),
    }
    proxy.SetupHandlerOnReceive(proxy)
    return proxy
}

// Imported proxy

// Get the osa proxy
func (p *Proxy) OsaProxy() *osa.Proxy { return p.osaProxy }
// Set the osa proxy
func (p *Proxy) SetOsaProxy(proxy *osa.Proxy) { p.osaProxy = proxy }

// Setup handlers
func (p *Proxy) SetupHandlers(handlers interface{}) {
    p.Receiver.SetupHandlers(handlers)
    p.osaProxy.SetupHandlers(handlers)
}


// Receive message handler
func (p *Proxy) OnReceive(fbeType int, buffer []byte) (bool, error) {
    switch fbeType {
    default:
        _ = fbeType
        break
    }

    if p.osaProxy != nil {
        if ok, err := p.osaProxy.OnReceive(fbeType, buffer); ok {
            return ok, err
        }
    }

    return false, nil
}
