//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: pkg.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package pkg

import "fmt"
import "strconv"
import "strings"
import "errors"
import "fbeproj/proto/fbe"
import "fbeproj/proto/osa"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version
var _ = osa.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// Detail key
type DetailKey struct {
}

// Convert Detail flags key to string
func (k *DetailKey) String() string {
    var sb strings.Builder
    sb.WriteString("DetailKey(")
    sb.WriteString(")")
    return sb.String()
}

// Detail struct
type Detail struct {
    Extrav []osa.Extra `json:"extrav"`
    Extram map[int32]osa.Extra `json:"extram"`
}

// Create a new Detail struct
func NewDetail() *Detail {
    return &Detail{
        Extrav: make([]osa.Extra, 0),
        Extram: make(map[int32]osa.Extra),
    }
}

// Create a new Detail struct from the given field values
func NewDetailFromFieldValues(extravV []osa.Extra, extramV map[int32]osa.Extra) *Detail {
    return &Detail{extravV, extramV}
}

// Create a new Detail struct from JSON
func NewDetailFromJSON(buffer []byte) (*Detail, error) {
    result := *NewDetail()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s *Detail) Copy() *Detail {
    var result = *s
    return &result
}

// Struct deep clone
func (s *Detail) Clone() *Detail {
    // Serialize the struct to the FBE stream
    writer := NewDetailModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewDetailModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *Detail) Key() DetailKey {
    return DetailKey{
    }
}

// Convert struct to optional
func (s *Detail) Optional() *Detail {
    return s
}

// Convert struct to optional
func (s *Detail) Ptr() *Detail {
    return s
}

// Get the FBE type
func (s *Detail) FBEType() int { return 2 }

// Convert struct to string
func (s *Detail) String() string {
    var sb strings.Builder
    sb.WriteString("Detail(")
    sb.WriteString("extrav=")
    if s.Extrav != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Extrav)), 10) + "][")
        for _, v := range s.Extrav {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString("extrav=[0][]")
    }
    sb.WriteString(",extram=")
    if s.Extram != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Extram)), 10) + "]<{")
        for k, v := range s.Extram {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(strconv.FormatInt(int64(k), 10))
            sb.WriteString("->")
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("}>")
    } else {
        sb.WriteString(",extram=[0]<{}>")
    }
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s *Detail) JSON() ([]byte, error) {
    return fbe.Json.Marshal(s)
}
