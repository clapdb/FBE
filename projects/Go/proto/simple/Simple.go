//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: simple.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package simple

import "fmt"
import "strconv"
import "strings"
import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// Simple key
type SimpleKey struct {
}

// Convert Simple flags key to string
func (k *SimpleKey) String() string {
    var sb strings.Builder
    sb.WriteString("SimpleKey(")
    sb.WriteString(")")
    return sb.String()
}

// Simple struct
type Simple struct {
    Info string `json:"info"`
    Simple *Simple `json:"simple"`
    Depth int32 `json:"depth"`
    Spv []*Simple `json:"spv"`
    Sv []Simple `json:"sv"`
    Spm map[int32]*Simple `json:"spm"`
    Sm map[int32]Simple `json:"sm"`
}

// Create a new Simple struct
func NewSimple() *Simple {
    return &Simple{
        Info: "",
        Simple: nil,
        Depth: 0,
        Spv: make([]*Simple, 0),
        Sv: make([]Simple, 0),
        Spm: make(map[int32]*Simple),
        Sm: make(map[int32]Simple),
    }
}

// Create a new Simple struct from the given field values
func NewSimpleFromFieldValues(infoV string, simpleV *Simple, depthV int32, spvV []*Simple, svV []Simple, spmV map[int32]*Simple, smV map[int32]Simple) *Simple {
    return &Simple{infoV, simpleV, depthV, spvV, svV, spmV, smV}
}

// Create a new Simple struct from JSON
func NewSimpleFromJSON(buffer []byte) (*Simple, error) {
    result := *NewSimple()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s *Simple) Copy() *Simple {
    var result = *s
    return &result
}

// Struct deep clone
func (s *Simple) Clone() *Simple {
    // Serialize the struct to the FBE stream
    writer := NewSimpleModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewSimpleModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *Simple) Key() SimpleKey {
    return SimpleKey{
    }
}

// Convert struct to optional
func (s *Simple) Optional() *Simple {
    return s
}

// Convert struct to optional
func (s *Simple) Ptr() *Simple {
    return s
}

// Get the FBE type
func (s *Simple) FBEType() int { return 1 }

// Convert struct to string
func (s *Simple) String() string {
    var sb strings.Builder
    sb.WriteString("Simple(")
    sb.WriteString("info=")
    sb.WriteString("\"" + s.Info + "\"")
    sb.WriteString(",simple=")
    if s.Simple != nil { 
        sb.WriteString(s.Simple.String())
    } else {
        sb.WriteString("null")
    }
    sb.WriteString(",depth=")
    sb.WriteString(strconv.FormatInt(int64(s.Depth), 10))
    sb.WriteString(",spv=")
    if s.Spv != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Spv)), 10) + "][")
        for _, v := range s.Spv {
            if v != nil { 
                if first { sb.WriteString("") } else { sb.WriteString(",") }
                sb.WriteString(v.String())
            } else {
                if first { sb.WriteString("") } else { sb.WriteString(",") }
                sb.WriteString("null")
            }
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString(",spv=[0][]")
    }
    sb.WriteString(",sv=")
    if s.Sv != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Sv)), 10) + "][")
        for _, v := range s.Sv {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString(",sv=[0][]")
    }
    sb.WriteString(",spm=")
    if s.Spm != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Spm)), 10) + "]<{")
        for k, v := range s.Spm {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(strconv.FormatInt(int64(k), 10))
            sb.WriteString("->")
            if v != nil { 
                sb.WriteString(v.String())
            } else {
                sb.WriteString("null")
            }
            first = false
        }
        sb.WriteString("}>")
    } else {
        sb.WriteString(",spm=[0]<{}>")
    }
    sb.WriteString(",sm=")
    if s.Sm != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Sm)), 10) + "]<{")
        for k, v := range s.Sm {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(strconv.FormatInt(int64(k), 10))
            sb.WriteString("->")
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("}>")
    } else {
        sb.WriteString(",sm=[0]<{}>")
    }
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s *Simple) JSON() ([]byte, error) {
    return fbe.Json.Marshal(s)
}
