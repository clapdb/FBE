//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: simple.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package simple

import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Fast Binary Encoding Simple field model
type FieldModelSimple struct {
    // Field model buffer
    buffer *fbe.Buffer
    // Field model buffer offset
    offset int

    Info *fbe.FieldModelString
    Simple *FieldModelPtrSimple
    Depth *fbe.FieldModelInt32
    Spv *FieldModelVectorPtrSimple
    Sv *FieldModelVectorSimple
    Spm *FieldModelMapInt32PtrSimple
    Sm *FieldModelMapInt32Simple
}

// Create a new Simple field model
func NewFieldModelSimple(buffer *fbe.Buffer, offset int) *FieldModelSimple {
    fbeResult := FieldModelSimple{buffer: buffer, offset: offset}
    fbeResult.Info = fbe.NewFieldModelString(buffer, 4 + 4)
    fbeResult.Simple = NewFieldModelPtrSimple(buffer, fbeResult.Info.FBEOffset() + fbeResult.Info.FBESize())
    fbeResult.Depth = fbe.NewFieldModelInt32(buffer, fbeResult.Simple.FBEOffset() + fbeResult.Simple.FBESize())
    fbeResult.Spv = NewFieldModelVectorPtrSimple(buffer, fbeResult.Depth.FBEOffset() + fbeResult.Depth.FBESize())
    fbeResult.Sv = NewFieldModelVectorSimple(buffer, fbeResult.Spv.FBEOffset() + fbeResult.Spv.FBESize())
    fbeResult.Spm = NewFieldModelMapInt32PtrSimple(buffer, fbeResult.Sv.FBEOffset() + fbeResult.Sv.FBESize())
    fbeResult.Sm = NewFieldModelMapInt32Simple(buffer, fbeResult.Spm.FBEOffset() + fbeResult.Spm.FBESize())
    return &fbeResult
}

// Get the field size
func (fm *FieldModelSimple) FBESize() int { return 4 }

// Get the field body size
func (fm *FieldModelSimple) FBEBody() int {
    fbeResult := 4 + 4 +
        fm.Info.FBESize() +
        fm.Simple.FBESize() +
        fm.Depth.FBESize() +
        fm.Spv.FBESize() +
        fm.Sv.FBESize() +
        fm.Spm.FBESize() +
        fm.Sm.FBESize() +
        0
    return fbeResult
}

// Get the field extra size
func (fm *FieldModelSimple) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody() +
        fm.Info.FBEExtra() +
        fm.Simple.FBEExtra() +
        fm.Depth.FBEExtra() +
        fm.Spv.FBEExtra() +
        fm.Sv.FBEExtra() +
        fm.Spm.FBEExtra() +
        fm.Sm.FBEExtra() +
        0

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field type
func (fm *FieldModelSimple) FBEType() int { return 1 }

// Get the field offset
func (fm *FieldModelSimple) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelSimple) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelSimple) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelSimple) FBEUnshift(size int) { fm.offset -= size }

// Check if the struct value is valid
func (fm *FieldModelSimple) Verify() bool { return fm.VerifyType(true) }

// Check if the struct value and its type are valid
func (fm *FieldModelSimple) VerifyType(fbeVerifyType bool) bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return true
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return false
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return false
    }

    fbeStructType := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset + 4))
    if fbeVerifyType && (fbeStructType != fm.FBEType()) {
        return false
    }

    fm.buffer.Shift(fbeStructOffset)
    fbeResult := fm.VerifyFields(fbeStructSize)
    fm.buffer.Unshift(fbeStructOffset)
    return fbeResult
}

// // Check if the struct value fields are valid
func (fm *FieldModelSimple) VerifyFields(fbeStructSize int) bool {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.Info.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Info.Verify() {
        return false
    }
    fbeCurrentSize += fm.Info.FBESize()

    if (fbeCurrentSize + fm.Simple.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Simple.Verify() {
        return false
    }
    fbeCurrentSize += fm.Simple.FBESize()

    if (fbeCurrentSize + fm.Depth.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Depth.Verify() {
        return false
    }
    fbeCurrentSize += fm.Depth.FBESize()

    if (fbeCurrentSize + fm.Spv.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Spv.Verify() {
        return false
    }
    fbeCurrentSize += fm.Spv.FBESize()

    if (fbeCurrentSize + fm.Sv.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Sv.Verify() {
        return false
    }
    fbeCurrentSize += fm.Sv.FBESize()

    if (fbeCurrentSize + fm.Spm.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Spm.Verify() {
        return false
    }
    fbeCurrentSize += fm.Spm.FBESize()

    if (fbeCurrentSize + fm.Sm.FBESize()) > fbeStructSize {
        return true
    }
    if !fm.Sm.Verify() {
        return false
    }
    fbeCurrentSize += fm.Sm.FBESize()

    return true
}

// Get the struct value (begin phase)
func (fm *FieldModelSimple) GetBegin() (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, nil
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if fbeStructSize < (4 + 4) {
        return 0, errors.New("model is broken")
    }

    fm.buffer.Shift(fbeStructOffset)
    return fbeStructOffset, nil
}

// Get the struct value (end phase)
func (fm *FieldModelSimple) GetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Get the struct value
func (fm *FieldModelSimple) Get() (*Simple, error) {
    fbeResult := NewSimple()
    return fbeResult, fm.GetValue(fbeResult)
}

// Get the struct value by the given pointer
func (fm *FieldModelSimple) GetValue(fbeValue *Simple) error {
    fbeBegin, err := fm.GetBegin()
    if fbeBegin == 0 {
        return err
    }

    fbeStructSize := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset()))
    fm.GetFields(fbeValue, fbeStructSize)
    fm.GetEnd(fbeBegin)
    return nil
}

// Get the struct fields values
func (fm *FieldModelSimple) GetFields(fbeValue *Simple, fbeStructSize int) {
    fbeCurrentSize := 4 + 4

    if (fbeCurrentSize + fm.Info.FBESize()) <= fbeStructSize {
        fbeValue.Info, _ = fm.Info.Get()
    } else {
        fbeValue.Info = ""
    }
    fbeCurrentSize += fm.Info.FBESize()

    if (fbeCurrentSize + fm.Simple.FBESize()) <= fbeStructSize {
        fbeValue.Simple, _ = fm.Simple.Get()
    } else {
        fbeValue.Simple = nil
    }
    fbeCurrentSize += fm.Simple.FBESize()

    if (fbeCurrentSize + fm.Depth.FBESize()) <= fbeStructSize {
        fbeValue.Depth, _ = fm.Depth.Get()
    } else {
        fbeValue.Depth = 0
    }
    fbeCurrentSize += fm.Depth.FBESize()

    if (fbeCurrentSize + fm.Spv.FBESize()) <= fbeStructSize {
        fbeValue.Spv, _ = fm.Spv.Get()
    } else {
        fbeValue.Spv = make([]*Simple, 0)
    }
    fbeCurrentSize += fm.Spv.FBESize()

    if (fbeCurrentSize + fm.Sv.FBESize()) <= fbeStructSize {
        fbeValue.Sv, _ = fm.Sv.Get()
    } else {
        fbeValue.Sv = make([]Simple, 0)
    }
    fbeCurrentSize += fm.Sv.FBESize()

    if (fbeCurrentSize + fm.Spm.FBESize()) <= fbeStructSize {
        fbeValue.Spm, _ = fm.Spm.Get()
    } else {
        fbeValue.Spm = make(map[int32]*Simple)
    }
    fbeCurrentSize += fm.Spm.FBESize()

    if (fbeCurrentSize + fm.Sm.FBESize()) <= fbeStructSize {
        fbeValue.Sm, _ = fm.Sm.Get()
    } else {
        fbeValue.Sm = make(map[int32]Simple)
    }
    fbeCurrentSize += fm.Sm.FBESize()
}

// Set the struct value (begin phase)
func (fm *FieldModelSimple) SetBegin() (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, errors.New("model is broken")
    }

    fbeStructSize := fm.FBEBody()
    fbeStructOffset := fm.buffer.Allocate(fbeStructSize) - fm.buffer.Offset()
    if (fbeStructOffset <= 0) || ((fm.buffer.Offset() + fbeStructOffset + fbeStructSize) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), uint32(fbeStructOffset))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset, uint32(fbeStructSize))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset + 4, uint32(fm.FBEType()))

    fm.buffer.Shift(fbeStructOffset)
    return fbeStructOffset, nil
}

// Set the struct value (end phase)
func (fm *FieldModelSimple) SetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Set the struct value
func (fm *FieldModelSimple) Set(fbeValue *Simple) error {
    fbeBegin, err := fm.SetBegin()
    if fbeBegin == 0 {
        return err
    }

    err = fm.SetFields(fbeValue)
    fm.SetEnd(fbeBegin)
    return err
}

// Set the struct fields values
func (fm *FieldModelSimple) SetFields(fbeValue *Simple) error {
    var err error = nil

    if err = fm.Info.Set(fbeValue.Info); err != nil {
        return err
    }
    if err = fm.Simple.Set(fbeValue.Simple); err != nil {
        return err
    }
    if err = fm.Depth.Set(fbeValue.Depth); err != nil {
        return err
    }
    if err = fm.Spv.Set(fbeValue.Spv); err != nil {
        return err
    }
    if err = fm.Sv.Set(fbeValue.Sv); err != nil {
        return err
    }
    if err = fm.Spm.Set(fbeValue.Spm); err != nil {
        return err
    }
    if err = fm.Sm.Set(fbeValue.Sm); err != nil {
        return err
    }
    return err
}
