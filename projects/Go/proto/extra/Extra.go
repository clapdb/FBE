//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: extra.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package extra

import "fmt"
import "strconv"
import "strings"
import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// Extra key
type ExtraKey struct {
}

// Convert Extra flags key to string
func (k *ExtraKey) String() string {
    var sb strings.Builder
    sb.WriteString("ExtraKey(")
    sb.WriteString(")")
    return sb.String()
}

// Extra struct
type Extra struct {
    Num int64 `json:"num"`
    Data string `json:"data"`
    Info *Info `json:"info"`
    Info2 *Info `json:"info2"`
    Info3 Info `json:"info3"`
    Infov []Info `json:"infov"`
    Infopv []*Info `json:"infopv"`
    Infol []Info `json:"infol"`
    Infopl []*Info `json:"infopl"`
}

// Create a new Extra struct
func NewExtra() *Extra {
    return &Extra{
        Num: 0,
        Data: "",
        Info: nil,
        Info2: nil,
        Info3: *NewInfo(),
        Infov: make([]Info, 0),
        Infopv: make([]*Info, 0),
        Infol: make([]Info, 0),
        Infopl: make([]*Info, 0),
    }
}

// Create a new Extra struct from the given field values
func NewExtraFromFieldValues(numV int64, dataV string, infoV *Info, info2V *Info, info3V Info, infovV []Info, infopvV []*Info, infolV []Info, infoplV []*Info) *Extra {
    return &Extra{numV, dataV, infoV, info2V, info3V, infovV, infopvV, infolV, infoplV}
}

// Create a new Extra struct from JSON
func NewExtraFromJSON(buffer []byte) (*Extra, error) {
    result := *NewExtra()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s *Extra) Copy() *Extra {
    var result = *s
    return &result
}

// Struct deep clone
func (s *Extra) Clone() *Extra {
    // Serialize the struct to the FBE stream
    writer := NewExtraModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewExtraModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *Extra) Key() ExtraKey {
    return ExtraKey{
    }
}

// Convert struct to optional
func (s *Extra) Optional() *Extra {
    return s
}

// Convert struct to optional
func (s *Extra) Ptr() *Extra {
    return s
}

// Get the FBE type
func (s *Extra) FBEType() int { return 2 }

// Convert struct to string
func (s *Extra) String() string {
    var sb strings.Builder
    sb.WriteString("Extra(")
    sb.WriteString("num=")
    sb.WriteString(strconv.FormatInt(int64(s.Num), 10))
    sb.WriteString(",data=")
    sb.WriteString("\"" + s.Data + "\"")
    sb.WriteString(",info=")
    if s.Info != nil { 
        sb.WriteString(s.Info.String())
    } else {
        sb.WriteString("null")
    }
    sb.WriteString(",info2=")
    if s.Info2 != nil { 
        sb.WriteString(s.Info2.String())
    } else {
        sb.WriteString("null")
    }
    sb.WriteString(",info3=")
    sb.WriteString(s.Info3.String())
    sb.WriteString(",infov=")
    if s.Infov != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Infov)), 10) + "][")
        for _, v := range s.Infov {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString(",infov=[0][]")
    }
    sb.WriteString(",infopv=")
    if s.Infopv != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Infopv)), 10) + "][")
        for _, v := range s.Infopv {
            if v != nil { 
                if first { sb.WriteString("") } else { sb.WriteString(",") }
                sb.WriteString(v.String())
            } else {
                if first { sb.WriteString("") } else { sb.WriteString(",") }
                sb.WriteString("null")
            }
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString(",infopv=[0][]")
    }
    sb.WriteString(",infol=")
    if s.Infol != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Infol)), 10) + "]<")
        for _, v := range s.Infol {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString(">")
    } else {
        sb.WriteString(",infol=[0]<>")
    }
    sb.WriteString(",infopl=")
    if s.Infopl != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Infopl)), 10) + "]<")
        for _, v := range s.Infopl {
            if v != nil { 
                if first { sb.WriteString("") } else { sb.WriteString(",") }
                sb.WriteString(v.String())
            } else {
                if first { sb.WriteString("") } else { sb.WriteString(",") }
                sb.WriteString("null")
            }
            first = false
        }
        sb.WriteString(">")
    } else {
        sb.WriteString(",infopl=[0]<>")
    }
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s *Extra) JSON() ([]byte, error) {
    return fbe.Json.Marshal(s)
}
