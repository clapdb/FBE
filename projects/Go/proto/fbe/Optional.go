//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: FBE
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

package fbe

// Create an optional bool
func OptionalBool(value bool) *bool {
    return &value
}

// Create an optional byte
func OptionalByte(value byte) *byte {
    return &value
}

// Create an optional bytes
func OptionalBytes(value []byte) *[]byte {
    return &value
}

// Create an optional rune
func OptionalRune(value rune) *rune {
    return &value
}

// Create an optional int8
func OptionalInt8(value int8) *int8 {
    return &value
}

// Create an optional uint8
func OptionalUInt8(value uint8) *uint8 {
    return &value
}

// Create an optional int16
func OptionalInt16(value int16) *int16 {
    return &value
}

// Create an optional uint16
func OptionalUInt16(value uint16) *uint16 {
    return &value
}

// Create an optional int32
func OptionalInt32(value int32) *int32 {
    return &value
}

// Create an optional uint32
func OptionalUInt32(value uint32) *uint32 {
    return &value
}

// Create an optional int64
func OptionalInt64(value int64) *int64 {
    return &value
}

// Create an optional uint64
func OptionalUInt64(value uint64) *uint64 {
    return &value
}

// Create an optional float32
func OptionalFloat32(value float32) *float32 {
    return &value
}

// Create an optional float64
func OptionalFloat64(value float64) *float64 {
    return &value
}

// Create an optional decimal
func OptionalDecimal(value Decimal) *Decimal {
    return &value
}

// Create an optional timestamp
func OptionalTimestamp(value Timestamp) *Timestamp {
    return &value
}

// Create an optional string
func OptionalString(value string) *string {
    return &value
}

// Create an optional UUID
func OptionalUUID(value UUID) *UUID {
    return &value
}
