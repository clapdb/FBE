//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

package osa

import "errors"
import "../fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Sex enum key
type SexKey int32

// Convert Sex enum key to string
func (k SexKey) String() string {
    return Sex(k).String()
}

// Sex enum
type Sex int32

// Sex enum values
//noinspection GoSnakeCaseUsage
const (
    Sex_male = Sex(0 + 0)
    Sex_female = Sex(0 + 1)
)

// Create a new Sex enum
func NewSex() *Sex {
    return new(Sex)
}

// Create a new Sex enum from the given value
func NewSexFromValue(value int32) *Sex {
    result := Sex(value)
    return &result
}

// Get the enum key
func (e Sex) Key() SexKey {
    return SexKey(e)
}

// Convert enum to optional
func (e *Sex) Optional() *Sex {
    return e
}

// Convert enum to string
func (e Sex) String() string {
    if e == Sex_male {
        return "male"
    }
    if e == Sex_female {
        return "female"
    }
    return "<unknown>"
}

// Convert enum to JSON
func (e Sex) MarshalJSON() ([]byte, error) {
    value := int32(e)
    return fbe.Json.Marshal(&value)
}

// Convert JSON to enum
func (e *Sex) UnmarshalJSON(buffer []byte) error {
    var result int32
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return err
    }
    *e = Sex(result)
    return nil
}
