//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: ptrpkg.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package ptrpkg

import "errors"
import "fbeproj/proto/fbe"
import "fbeproj/proto/variants_ptr"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version
var _ = variants_ptr.Version

// Fast Binary Encoding ptrpkg sender
type Sender struct {
    *fbe.Sender
    variants_ptrSender *variants_ptr.Sender
}

// Create a new ptrpkg sender with an empty buffer
func NewSender() *Sender {
    return NewSenderWithBuffer(fbe.NewEmptyBuffer())
}

// Create a new ptrpkg sender with the given buffer
func NewSenderWithBuffer(buffer *fbe.Buffer) *Sender {
    return &Sender{
        fbe.NewSender(buffer, false),
        variants_ptr.NewSenderWithBuffer(buffer),
    }
}

// Imported senders

func (s *Sender) Variants_ptrSender() *variants_ptr.Sender { return s.variants_ptrSender }

// Sender models accessors


// Send methods

func (s *Sender) Send(value interface{}) (int, error) {
    switch value := value.(type) {
    default:
        _ = value
        break
    }
    if result, err := s.variants_ptrSender.Send(value); (result > 0) || (err != nil) {
        return result, err
    }
    return 0, nil
}
