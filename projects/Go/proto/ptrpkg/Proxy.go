//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: ptrpkg.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package ptrpkg

import "errors"
import "fbeproj/proto/fbe"
import "fbeproj/proto/variants_ptr"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version
var _ = variants_ptr.Version

// Fast Binary Encoding ptrpkg proxy
type Proxy struct {
    *fbe.Receiver
    variants_ptrProxy *variants_ptr.Proxy

}

// Create a new ptrpkg proxy with an empty buffer
func NewProxy() *Proxy {
    return NewProxyWithBuffer(fbe.NewEmptyBuffer())
}

// Create a new ptrpkg proxy with the given buffer
func NewProxyWithBuffer(buffer *fbe.Buffer) *Proxy {
    proxy := &Proxy{
        fbe.NewReceiver(buffer, false),
        variants_ptr.NewProxyWithBuffer(buffer),
    }
    proxy.SetupHandlerOnReceive(proxy)
    return proxy
}

// Imported proxy

// Get the variants_ptr proxy
func (p *Proxy) Variants_ptrProxy() *variants_ptr.Proxy { return p.variants_ptrProxy }
// Set the variants_ptr proxy
func (p *Proxy) SetVariants_ptrProxy(proxy *variants_ptr.Proxy) { p.variants_ptrProxy = proxy }

// Setup handlers
func (p *Proxy) SetupHandlers(handlers interface{}) {
    p.Receiver.SetupHandlers(handlers)
    p.variants_ptrProxy.SetupHandlers(handlers)
}


// Receive message handler
func (p *Proxy) OnReceive(fbeType int, buffer []byte) (bool, error) {
    switch fbeType {
    default:
        _ = fbeType
        break
    }

    if p.variants_ptrProxy != nil {
        if ok, err := p.variants_ptrProxy.OnReceive(fbeType, buffer); ok {
            return ok, err
        }
    }

    return false, nil
}
