//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: variants_ptr.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package variants_ptr

import "fmt"
import "strconv"
import "strings"
import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// ValueContainer key
type ValueContainerKey struct {
}

// Convert ValueContainer flags key to string
func (k *ValueContainerKey) String() string {
    var sb strings.Builder
    sb.WriteString("ValueContainerKey(")
    sb.WriteString(")")
    return sb.String()
}

// ValueContainer struct
type ValueContainer struct {
    Vv []V `json:"vv"`
    Vm map[int32]V `json:"vm"`
}

// Create a new ValueContainer struct
func NewValueContainer() *ValueContainer {
    return &ValueContainer{
        Vv: make([]V, 0),
        Vm: make(map[int32]V),
    }
}

// Create a new ValueContainer struct from the given field values
func NewValueContainerFromFieldValues(vvV []V, vmV map[int32]V) *ValueContainer {
    return &ValueContainer{vvV, vmV}
}

// Create a new ValueContainer struct from JSON
func NewValueContainerFromJSON(buffer []byte) (*ValueContainer, error) {
    result := *NewValueContainer()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s *ValueContainer) Copy() *ValueContainer {
    var result = *s
    return &result
}

// Struct deep clone
func (s *ValueContainer) Clone() *ValueContainer {
    // Serialize the struct to the FBE stream
    writer := NewValueContainerModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewValueContainerModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *ValueContainer) Key() ValueContainerKey {
    return ValueContainerKey{
    }
}

// Convert struct to optional
func (s *ValueContainer) Optional() *ValueContainer {
    return s
}

// Convert struct to optional
func (s *ValueContainer) Ptr() *ValueContainer {
    return s
}

// Get the FBE type
func (s *ValueContainer) FBEType() int { return 4 }

// Convert struct to string
func (s *ValueContainer) String() string {
    var sb strings.Builder
    sb.WriteString("ValueContainer(")
    sb.WriteString("vv=")
    if s.Vv != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Vv)), 10) + "][")
        for _, v := range s.Vv {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString("vv=[0][]")
    }
    sb.WriteString(",vm=")
    if s.Vm != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Vm)), 10) + "][{")
        for k, v := range s.Vm {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(strconv.FormatInt(int64(k), 10))
            sb.WriteString("->")
            sb.WriteString(v.String())
            first = false
        }
        sb.WriteString("}]")
    } else {
        sb.WriteString(",vm=[0][{}]")
    }
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s *ValueContainer) JSON() ([]byte, error) {
    return fbe.Json.Marshal(s)
}
