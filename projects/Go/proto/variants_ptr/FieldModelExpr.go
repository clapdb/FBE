//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: variants_ptr.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package variants_ptr

import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// FieldModelExpr variant field model
type FieldModelExpr struct {
    // Field model buffer
    buffer *fbe.Buffer
    // Field model buffer offset
    offset int
}

// Create a new FieldModelExpr variant field model
func NewFieldModelExpr(buffer *fbe.Buffer, offset int) *FieldModelExpr {
    return &FieldModelExpr{buffer: buffer, offset: offset}
}

// Get the field size
func (fm *FieldModelExpr) FBESize() int { return 4 }

// Get the field body size
func (fm *FieldModelExpr) FBEBody() int {
    // variant type's fbe_size not included
    // only variant_index included
    return 4
}

// Get the field extra size
func (fm *FieldModelExpr) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody()

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field offset
func (fm *FieldModelExpr) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelExpr) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelExpr) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelExpr) FBEUnshift(size int) { fm.offset -= size }

// Check if the value is valid
func (fm *FieldModelExpr) Verify() bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return false
    }

    // TODO: verify the given type
    return true
}

// Get the struct value
func (fm *FieldModelExpr) Get() (*Expr, error) {
    fbeResult := NewExpr()
    return fbeResult, fm.GetValue(fbeResult)
}

// Get the struct value by the given pointer
func (fm *FieldModelExpr) GetValue(fbeValue *Expr) error {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return nil
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4 + 4) > fm.buffer.Size()) {
        return errors.New("model is broken")
    }

    fbeVariantIndex := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeStructOffset))
    if (fbeVariantIndex < 0 || fbeVariantIndex >= 3) {
        return errors.New("model is broken")
    }

    fm.buffer.Shift(fbeStructOffset)

    switch fbeVariantIndex {
    case 0:
        model := fbe.NewFieldModelBool(fm.buffer, 4)
        *fbeValue, _ = model.Get()
    case 1:
        model := fbe.NewFieldModelString(fm.buffer, 4)
        *fbeValue, _ = model.Get()
    case 2:
        model := fbe.NewFieldModelInt32(fm.buffer, 4)
        *fbeValue, _ = model.Get()
    }
    fm.buffer.Unshift(fbeStructOffset)
    return nil
}


// Set the struct value (begin phase)
func (fm *FieldModelExpr) SetBegin(variantTypeFBESize int, variantTypeIndex int) (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, errors.New("model is broken")
    }

    fbeVariantSize := fm.FBEBody() + variantTypeFBESize
    fbeVariantOffset := fm.buffer.Allocate(fbeVariantSize) - fm.buffer.Offset()
    if (fbeVariantOffset <= 0) || ((fm.buffer.Offset() + fbeVariantOffset + fbeVariantSize) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), uint32(fbeVariantOffset))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset, uint32(variantTypeIndex))

    fm.buffer.Shift(fbeVariantOffset)
    return fbeVariantOffset, nil
}

// Set the struct value (end phase)
func (fm *FieldModelExpr) SetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Set the struct value
func (fm *FieldModelExpr) Set(fbeValue *Expr) error {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return errors.New("model is broken")
    }

    switch t := (*fbeValue).(type) {
    case bool:
        model := fbe.NewFieldModelBool(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(fm.FBESize(), 0)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case string:
        model := fbe.NewFieldModelString(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(fm.FBESize(), 1)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case int32:
        model := fbe.NewFieldModelInt32(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(fm.FBESize(), 2)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    }

    return nil
}
