//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: variants_ptr.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package variants_ptr

import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// FieldModelV variant field model
type FieldModelV struct {
    // Field model buffer
    buffer *fbe.Buffer
    // Field model buffer offset
    offset int
}

// Create a new FieldModelV variant field model
func NewFieldModelV(buffer *fbe.Buffer, offset int) *FieldModelV {
    return &FieldModelV{buffer: buffer, offset: offset}
}

// Get the field size
func (fm *FieldModelV) FBESize() int { return 4 }

// Get the field body size
func (fm *FieldModelV) FBEBody() int {
    // variant type's fbe_size not included
    // only variant_index included
    return 4
}

// Get the field extra size
func (fm *FieldModelV) FBEExtra() int {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0
    }

    fbeStructOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeStructOffset == 0) || ((fm.buffer.Offset() + fbeStructOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbeStructOffset)

    fbeResult := fm.FBEBody()

    fm.buffer.Unshift(fbeStructOffset)

    return fbeResult
}

// Get the field offset
func (fm *FieldModelV) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelV) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelV) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelV) FBEUnshift(size int) { fm.offset -= size }

// Check if the value is valid
func (fm *FieldModelV) Verify() bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return false
    }

    fbeVariantOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeVariantOffset == 0) || ((fm.buffer.Offset() + fbeVariantOffset + 4) > fm.buffer.Size()) {
        return false
    }

    fbeVariantIndex := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset))
    if (fbeVariantIndex < 0 || fbeVariantIndex >= 14) {
        return false
    }

    fm.buffer.Shift(fbeVariantOffset)

    switch fbeVariantIndex {
    case 0:
        model := fbe.NewFieldModelInt32(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 1:
        model := fbe.NewFieldModelString(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 2:
        model := fbe.NewFieldModelDouble(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 3:
        model := NewFieldModelSimple(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 4:
        model := NewFieldModelSimple(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 5:
        model := NewFieldModelVectorSimple(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 6:
        model := NewFieldModelVectorInt32(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 7:
        model := NewFieldModelMapInt32Simple(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 8:
        model := NewFieldModelVectorBytes(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 9:
        model := NewFieldModelVectorString(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 10:
        model := NewFieldModelMapInt32Bytes(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 11:
        model := NewFieldModelMapStringBytes(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 12:
        model := NewFieldModelVectorPtrSimple(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    case 13:
        model := NewFieldModelExpr(fm.buffer, 4)
        if !model.Verify() {
            return false
        }
        break
    }
    fm.buffer.Unshift(fbeVariantOffset)
    return true
}

// Get the struct value
func (fm *FieldModelV) Get() (*V, error) {
    fbeResult := NewV()
    return fbeResult, fm.GetValue(fbeResult)
}

// Get the struct value by the given pointer
func (fm *FieldModelV) GetValue(fbeValue *V) error {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return nil
    }

    fbeVariantOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset()))
    if (fbeVariantOffset == 0) || ((fm.buffer.Offset() + fbeVariantOffset + 4) > fm.buffer.Size()) {
        return errors.New("model is broken")
    }

    fbeVariantIndex := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset))
    if (fbeVariantIndex < 0 || fbeVariantIndex >= 14) {
        return errors.New("model is broken")
    }

    fm.buffer.Shift(fbeVariantOffset)

    switch fbeVariantIndex {
    case 0:
        model := fbe.NewFieldModelInt32(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 1:
        model := fbe.NewFieldModelString(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 2:
        model := fbe.NewFieldModelDouble(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 3:
        model := NewFieldModelSimple(fm.buffer, 4)
        ptr, _ := model.Get()
        fbeValue.Value = *ptr
    case 4:
        model := NewFieldModelSimple(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 5:
        model := NewFieldModelVectorSimple(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 6:
        model := NewFieldModelVectorInt32(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 7:
        model := NewFieldModelMapInt32Simple(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 8:
        model := NewFieldModelVectorBytes(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 9:
        model := NewFieldModelVectorString(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 10:
        model := NewFieldModelMapInt32Bytes(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 11:
        model := NewFieldModelMapStringBytes(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 12:
        model := NewFieldModelVectorPtrSimple(fm.buffer, 4)
        fbeValue.Value, _ = model.Get()
    case 13:
        model := NewFieldModelExpr(fm.buffer, 4)
        ptr, _ := model.Get()
        fbeValue.Value = *ptr
    }
    fm.buffer.Unshift(fbeVariantOffset)
    return nil
}


// Set the struct value (begin phase)
func (fm *FieldModelV) SetBegin(variantTypeFBESize int, variantTypeIndex int) (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, errors.New("model is broken")
    }

    fbeVariantSize := fm.FBEBody() + variantTypeFBESize
    fbeVariantOffset := fm.buffer.Allocate(fbeVariantSize) - fm.buffer.Offset()
    if (fbeVariantOffset <= 0) || ((fm.buffer.Offset() + fbeVariantOffset + fbeVariantSize) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), uint32(fbeVariantOffset))
    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fbeVariantOffset, uint32(variantTypeIndex))

    fm.buffer.Shift(fbeVariantOffset)
    return fbeVariantOffset, nil
}

// Set the struct value (end phase)
func (fm *FieldModelV) SetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Set the struct value
func (fm *FieldModelV) Set(fbeValue *V) error {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return errors.New("model is broken")
    }

    switch t := (fbeValue.Value).(type) {
    case int32:
        model := fbe.NewFieldModelInt32(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 0)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case string:
        model := fbe.NewFieldModelString(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 1)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case float64:
        model := fbe.NewFieldModelDouble(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 2)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case Simple:
        model := NewFieldModelSimple(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 3)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(&t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case *Simple:
        model := NewFieldModelSimple(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 4)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case []Simple:
        model := NewFieldModelVectorSimple(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 5)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case []int32:
        model := NewFieldModelVectorInt32(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 6)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case map[int32]Simple:
        model := NewFieldModelMapInt32Simple(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 7)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case [][]byte:
        model := NewFieldModelVectorBytes(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 8)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case []string:
        model := NewFieldModelVectorString(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 9)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case map[int32][]byte:
        model := NewFieldModelMapInt32Bytes(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 10)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case map[string][]byte:
        model := NewFieldModelMapStringBytes(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 11)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case []*Simple:
        model := NewFieldModelVectorPtrSimple(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 12)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    case Expr:
        model := NewFieldModelExpr(fm.buffer, 4)
        fbeBegin, err := fm.SetBegin(model.FBESize(), 13)
        if err != nil {
            return err
        }
        if fbeBegin == 0 {
            return nil
        }
        if err = model.Set(&t); err != nil {
            return err
        }
        fm.SetEnd(fbeBegin)
    }

    return nil
}
