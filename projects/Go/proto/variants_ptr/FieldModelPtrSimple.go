//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: FBE
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package variants_ptr

import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Fast Binary Encoding optional Simple field model
type FieldModelPtrSimple struct {
    // Field model buffer
    buffer *fbe.Buffer
    // Field model buffer offset
    offset int

    // Base field model value
    value *FieldModelSimple
}

// Create a new optional Simple field model
func NewFieldModelPtrSimple(buffer *fbe.Buffer, offset int) *FieldModelPtrSimple {
    fbeResult := FieldModelPtrSimple{buffer: buffer, offset: offset}
    return &fbeResult
}

// Get the optional field model value
func (fm *FieldModelPtrSimple) Value() *FieldModelSimple { return fm.value }

// Get the field size
func (fm *FieldModelPtrSimple) FBESize() int { return 1 + 4 }

// Get the field extra size
func (fm *FieldModelPtrSimple) FBEExtra() int {
    if !fm.HasValue() {
        return 0
    }

    fbePtrOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset() + 1))
    if (fbePtrOffset == 0) || ((fm.buffer.Offset() + fbePtrOffset + 4) > fm.buffer.Size()) {
        return 0
    }

    fm.buffer.Shift(fbePtrOffset)
    if fm.value == nil {
		fm.value = NewFieldModelSimple(fm.buffer, 0)
	}
    fbeResult := fm.value.FBESize() + fm.value.FBEExtra()
    fm.buffer.Unshift(fbePtrOffset)
    return fbeResult
}

// Get the field offset
func (fm *FieldModelPtrSimple) FBEOffset() int { return fm.offset }
// Set the field offset
func (fm *FieldModelPtrSimple) SetFBEOffset(value int) { fm.offset = value }

// Shift the current field offset
func (fm *FieldModelPtrSimple) FBEShift(size int) { fm.offset += size }
// Unshift the current field offset
func (fm *FieldModelPtrSimple) FBEUnshift(size int) { fm.offset -= size }

// Check if the object contains a value
func (fm *FieldModelPtrSimple) HasValue() bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return false
    }

    fbeHasValue := fbe.ReadUInt8(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset())
    return fbeHasValue != 0
}

// Check if the optional value is valid
func (fm *FieldModelPtrSimple) Verify() bool {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return true
    }

    fbeHasValue := fbe.ReadUInt8(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset())
    if fbeHasValue == 0 {
        return true
    }

    fbePtrOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset() + 1))
    if fbePtrOffset == 0 {
        return false
    }

    fm.buffer.Shift(fbePtrOffset)
    if fm.value == nil {
		fm.value = NewFieldModelSimple(fm.buffer, 0)
	}
    fbeResult := fm.value.Verify()
    fm.buffer.Unshift(fbePtrOffset)
    return fbeResult
}

// Get the optional value (being phase)
func (fm *FieldModelPtrSimple) GetBegin() (int, error) {
    if !fm.HasValue() {
        return 0, nil
    }

    fbePtrOffset := int(fbe.ReadUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset() + 1))
    if fbePtrOffset <= 0 {
        return 0, errors.New("model is broken")
    }

    fm.buffer.Shift(fbePtrOffset)
    return fbePtrOffset, nil
}

// Get the optional value (end phase)
func (fm *FieldModelPtrSimple) GetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Get the optional value
func (fm *FieldModelPtrSimple) Get() (*Simple, error) {
    var fbeValue *Simple = nil

    fbeBegin, err := fm.GetBegin()
    if fbeBegin == 0 {
        return fbeValue, err
    }

    if fm.value == nil {
		fm.value = NewFieldModelSimple(fm.buffer, 0)
	}
    fbeValue = NewSimple()

    err = fm.value.GetValue(fbeValue)
    fm.GetEnd(fbeBegin)
    return fbeValue, err
}

// Set the optional value (begin phase)
func (fm *FieldModelPtrSimple) SetBegin(hasValue bool) (int, error) {
    if (fm.buffer.Offset() + fm.FBEOffset() + fm.FBESize()) > fm.buffer.Size() {
        return 0, nil
    }

    fbeHasValue := uint8(0)
    if hasValue {
        fbeHasValue = uint8(1)
    }
    fbe.WriteUInt8(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset(), fbeHasValue)
    if fbeHasValue == 0 {
        return 0, nil
    }

    if fm.value == nil {
		fm.value = NewFieldModelSimple(fm.buffer, 0)
	}
    fbePtrSize := fm.value.FBESize()
    fbePtrOffset := fm.buffer.Allocate(fbePtrSize) - fm.buffer.Offset()
    if (fbePtrOffset <= 0) || ((fm.buffer.Offset() + fbePtrOffset + fbePtrSize) > fm.buffer.Size()) {
        return 0, errors.New("model is broken")
    }

    fbe.WriteUInt32(fm.buffer.Data(), fm.buffer.Offset() + fm.FBEOffset() + 1, uint32(fbePtrOffset))

    fm.buffer.Shift(fbePtrOffset)
    return fbePtrOffset, nil
}

// Set the optional value (end phase)
func (fm *FieldModelPtrSimple) SetEnd(fbeBegin int) {
    fm.buffer.Unshift(fbeBegin)
}

// Set the optional value
func (fm *FieldModelPtrSimple) Set(fbeValue *Simple) error {
    fbeBegin, err := fm.SetBegin(fbeValue != nil)
    if fbeBegin == 0 {
        return err
    }

    err = fm.value.Set(fbeValue)
    fm.SetEnd(fbeBegin)
    return err
}
