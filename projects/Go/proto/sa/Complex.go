//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: sa.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

package sa

import "fmt"
import "strconv"
import "strings"
import "errors"
import "fbeproj/proto/fbe"

// Workaround for Go unused imports issue
var _ = errors.New
var _ = fbe.Version

// Workaround for Go unused imports issue
var _ = fmt.Print
var _ = strconv.FormatInt

// Complex key
type ComplexKey struct {
}

// Convert Complex flags key to string
func (k *ComplexKey) String() string {
    var sb strings.Builder
    sb.WriteString("ComplexKey(")
    sb.WriteString(")")
    return sb.String()
}

// Complex struct
type Complex struct {
    Name string `json:"name"`
    Sex *Sex `json:"sex"`
    Flag *MyFLags `json:"flag"`
    Extra *Extra `json:"extra"`
    Nums []int64 `json:"nums"`
}

// Create a new Complex struct
func NewComplex() *Complex {
    return &Complex{
        Name: "",
        Sex: nil,
        Flag: nil,
        Extra: nil,
        Nums: make([]int64, 0),
    }
}

// Create a new Complex struct from the given field values
func NewComplexFromFieldValues(nameV string, sexV *Sex, flagV *MyFLags, extraV *Extra, numsV []int64) *Complex {
    return &Complex{nameV, sexV, flagV, extraV, numsV}
}

// Create a new Complex struct from JSON
func NewComplexFromJSON(buffer []byte) (*Complex, error) {
    result := *NewComplex()
    err := fbe.Json.Unmarshal(buffer, &result)
    if err != nil {
        return nil, err
    }
    return &result, nil
}

// Struct shallow copy
func (s *Complex) Copy() *Complex {
    var result = *s
    return &result
}

// Struct deep clone
func (s *Complex) Clone() *Complex {
    // Serialize the struct to the FBE stream
    writer := NewComplexModel(fbe.NewEmptyBuffer())
    _, _ = writer.Serialize(s)

    // Deserialize the struct from the FBE stream
    reader := NewComplexModel(writer.Buffer())
    result, _, _ := reader.Deserialize()
    return result
}

// Get the struct key
func (s *Complex) Key() ComplexKey {
    return ComplexKey{
    }
}

// Convert struct to optional
func (s *Complex) Optional() *Complex {
    return s
}

// Convert struct to optional
func (s *Complex) Ptr() *Complex {
    return s
}

// Get the FBE type
func (s *Complex) FBEType() int { return 3 }

// Convert struct to string
func (s *Complex) String() string {
    var sb strings.Builder
    sb.WriteString("Complex(")
    sb.WriteString("name=")
    sb.WriteString("\"" + s.Name + "\"")
    sb.WriteString(",sex=")
    if s.Sex != nil { 
        sb.WriteString(s.Sex.String())
    } else {
        sb.WriteString("null")
    }
    sb.WriteString(",flag=")
    if s.Flag != nil { 
        sb.WriteString(s.Flag.String())
    } else {
        sb.WriteString("null")
    }
    sb.WriteString(",extra=")
    if s.Extra != nil { 
        sb.WriteString(s.Extra.String())
    } else {
        sb.WriteString("null")
    }
    sb.WriteString(",nums=")
    if s.Nums != nil {
        first := true
        sb.WriteString("[" + strconv.FormatInt(int64(len(s.Nums)), 10) + "][")
        for _, v := range s.Nums {
            if first { sb.WriteString("") } else { sb.WriteString(",") }
            sb.WriteString(strconv.FormatInt(int64(v), 10))
            first = false
        }
        sb.WriteString("]")
    } else {
        sb.WriteString(",nums=[0][]")
    }
    sb.WriteString(")")
    return sb.String()
}

// Convert struct to JSON
func (s *Complex) JSON() ([]byte, error) {
    return fbe.Json.Marshal(s)
}
