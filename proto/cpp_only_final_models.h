//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: cpp_only.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_final_models.h"

#include "cpp_only.h"

namespace FBE {

// Fast Binary Encoding ::cpp_only::Struct128 final model
template <>
class FinalModel<::cpp_only::Struct128>
{
public:
    FinalModel(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the allocation size
    size_t fbe_allocation_size(const ::cpp_only::Struct128& fbe_value) const noexcept;
    // Get the final offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Set the final offset
    size_t fbe_offset(size_t offset) const noexcept { return _offset = offset; }
    // Get the final type
    static constexpr size_t fbe_type() noexcept { return 1; }

    // Shift the current final offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current final offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    size_t verify() const noexcept;
    // Check if the struct fields are valid
    size_t verify_fields() const noexcept;

    // Get the struct value
    size_t get(::cpp_only::Struct128& fbe_value) const noexcept;
    // Get the struct fields values
    size_t get_fields(::cpp_only::Struct128& fbe_value) const noexcept;

    // Set the struct value
    size_t set(const ::cpp_only::Struct128& fbe_value) noexcept;
    // Set the struct fields values
    size_t set_fields(const ::cpp_only::Struct128& fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    mutable size_t _offset;

public:
    FinalModel<__int128_t> f1;
    FinalModel<std::optional<__int128_t>> f2;
    FinalModel<__uint128_t> f3;
    FinalModel<std::optional<__uint128_t>> f4;
    FinalModelVector<__int128_t> f5;
    FinalModelMap<__uint128_t, __int128_t> f6;
    FinalModel<::cpp_only::LargeNum> f7;
};

namespace cpp_only {

// Fast Binary Encoding Struct128 final model
class Struct128FinalModel : public FBE::Model
{
public:
    Struct128FinalModel() : _model(this->buffer(), 8) {}
    Struct128FinalModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), _model(this->buffer(), 8) {}

    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FinalModel<::cpp_only::Struct128>::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Serialize the struct value
    size_t serialize(const ::cpp_only::Struct128& value);
    // Deserialize the struct value
    size_t deserialize(::cpp_only::Struct128& value) const noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { _model.fbe_shift(prev); }

private:
    FinalModel<::cpp_only::Struct128> _model;
};

} // namespace cpp_only

} // namespace FBE
