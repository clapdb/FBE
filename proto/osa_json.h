//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: osa.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_json.h"

#include "osa.h"

namespace FBE {

namespace JSON {

template <class TWriter>
struct ValueWriter<TWriter, ::osa::Sex>
{
    static bool to_json(TWriter& writer, const ::osa::Sex& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (int32_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::osa::Sex>
{
    static bool from_json(const TJson& json, ::osa::Sex& value)
    {
        int32_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::osa::Sex)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::osa::MyFLags>
{
    static bool to_json(TWriter& writer, const ::osa::MyFLags& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (int32_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::osa::MyFLags>
{
    static bool from_json(const TJson& json, ::osa::MyFLags& value)
    {
        int32_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::osa::MyFLags)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::osa::Extra>
{
    static bool to_json(TWriter& writer, const ::osa::Extra& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "name") || !FBE::JSON::to_json(writer, value.name, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "detail") || !FBE::JSON::to_json(writer, value.detail, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "sex") || !FBE::JSON::to_json(writer, value.sex, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "flag") || !FBE::JSON::to_json(writer, value.flag, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::osa::Extra>
{
    static bool from_json(const TJson& json, ::osa::Extra& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.name, "name");
        result &= FBE::JSON::from_json(json, value.detail, "detail");
        result &= FBE::JSON::from_json(json, value.sex, "sex");
        result &= FBE::JSON::from_json(json, value.flag, "flag");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::osa::Simple>
{
    static bool to_json(TWriter& writer, const ::osa::Simple& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "name") || !FBE::JSON::to_json(writer, value.name, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "depth") || !FBE::JSON::to_json(writer, value.depth, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "sa") || !FBE::JSON::to_json(writer, value.sa, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "sex") || !FBE::JSON::to_json(writer, value.sex, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::osa::Simple>
{
    static bool from_json(const TJson& json, ::osa::Simple& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.name, "name");
        result &= FBE::JSON::from_json(json, value.depth, "depth");
        result &= FBE::JSON::from_json(json, value.sa, "sa");
        result &= FBE::JSON::from_json(json, value.sex, "sex");
        return result;
    }
};

} // namespace JSON

} // namespace FBE
