//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#include "enums.h"

namespace enums {

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumByte value)
{
    if (value == EnumByte::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumByte::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumByte::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumByte::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumByte::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumByte::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumChar value)
{
    if (value == EnumChar::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumChar::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumChar::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumChar::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumChar::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumChar::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumWChar value)
{
    if (value == EnumWChar::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumWChar::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumWChar::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumWChar::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumWChar::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumWChar::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumInt8 value)
{
    if (value == EnumInt8::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumInt8::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumInt8::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumInt8::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumInt8::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumInt8::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumUInt8 value)
{
    if (value == EnumUInt8::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumUInt8::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumUInt8::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumUInt8::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumUInt8::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumUInt8::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumInt16 value)
{
    if (value == EnumInt16::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumInt16::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumInt16::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumInt16::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumInt16::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumInt16::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumUInt16 value)
{
    if (value == EnumUInt16::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumUInt16::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumUInt16::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumUInt16::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumUInt16::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumUInt16::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumInt32 value)
{
    if (value == EnumInt32::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumInt32::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumInt32::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumInt32::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumInt32::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumInt32::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumUInt32 value)
{
    if (value == EnumUInt32::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumUInt32::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumUInt32::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumUInt32::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumUInt32::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumUInt32::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumInt64 value)
{
    if (value == EnumInt64::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumInt64::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumInt64::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumInt64::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumInt64::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumInt64::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] EnumUInt64 value)
{
    if (value == EnumUInt64::ENUM_VALUE_0) return stream << "ENUM_VALUE_0";
    if (value == EnumUInt64::ENUM_VALUE_1) return stream << "ENUM_VALUE_1";
    if (value == EnumUInt64::ENUM_VALUE_2) return stream << "ENUM_VALUE_2";
    if (value == EnumUInt64::ENUM_VALUE_3) return stream << "ENUM_VALUE_3";
    if (value == EnumUInt64::ENUM_VALUE_4) return stream << "ENUM_VALUE_4";
    if (value == EnumUInt64::ENUM_VALUE_5) return stream << "ENUM_VALUE_5";
    return stream << "<unknown>";
}

Enums::Enums()
    : byte0(EnumByte::ENUM_VALUE_0)
    , byte1(EnumByte::ENUM_VALUE_1)
    , byte2(EnumByte::ENUM_VALUE_2)
    , byte3(EnumByte::ENUM_VALUE_3)
    , byte4(EnumByte::ENUM_VALUE_4)
    , byte5(EnumByte::ENUM_VALUE_5)
    , char0(EnumChar::ENUM_VALUE_0)
    , char1(EnumChar::ENUM_VALUE_1)
    , char2(EnumChar::ENUM_VALUE_2)
    , char3(EnumChar::ENUM_VALUE_3)
    , char4(EnumChar::ENUM_VALUE_4)
    , char5(EnumChar::ENUM_VALUE_5)
    , wchar0(EnumWChar::ENUM_VALUE_0)
    , wchar1(EnumWChar::ENUM_VALUE_1)
    , wchar2(EnumWChar::ENUM_VALUE_2)
    , wchar3(EnumWChar::ENUM_VALUE_3)
    , wchar4(EnumWChar::ENUM_VALUE_4)
    , wchar5(EnumWChar::ENUM_VALUE_5)
    , int8b0(EnumInt8::ENUM_VALUE_0)
    , int8b1(EnumInt8::ENUM_VALUE_1)
    , int8b2(EnumInt8::ENUM_VALUE_2)
    , int8b3(EnumInt8::ENUM_VALUE_3)
    , int8b4(EnumInt8::ENUM_VALUE_4)
    , int8b5(EnumInt8::ENUM_VALUE_5)
    , uint8b0(EnumUInt8::ENUM_VALUE_0)
    , uint8b1(EnumUInt8::ENUM_VALUE_1)
    , uint8b2(EnumUInt8::ENUM_VALUE_2)
    , uint8b3(EnumUInt8::ENUM_VALUE_3)
    , uint8b4(EnumUInt8::ENUM_VALUE_4)
    , uint8b5(EnumUInt8::ENUM_VALUE_5)
    , int16b0(EnumInt16::ENUM_VALUE_0)
    , int16b1(EnumInt16::ENUM_VALUE_1)
    , int16b2(EnumInt16::ENUM_VALUE_2)
    , int16b3(EnumInt16::ENUM_VALUE_3)
    , int16b4(EnumInt16::ENUM_VALUE_4)
    , int16b5(EnumInt16::ENUM_VALUE_5)
    , uint16b0(EnumUInt16::ENUM_VALUE_0)
    , uint16b1(EnumUInt16::ENUM_VALUE_1)
    , uint16b2(EnumUInt16::ENUM_VALUE_2)
    , uint16b3(EnumUInt16::ENUM_VALUE_3)
    , uint16b4(EnumUInt16::ENUM_VALUE_4)
    , uint16b5(EnumUInt16::ENUM_VALUE_5)
    , int32b0(EnumInt32::ENUM_VALUE_0)
    , int32b1(EnumInt32::ENUM_VALUE_1)
    , int32b2(EnumInt32::ENUM_VALUE_2)
    , int32b3(EnumInt32::ENUM_VALUE_3)
    , int32b4(EnumInt32::ENUM_VALUE_4)
    , int32b5(EnumInt32::ENUM_VALUE_5)
    , uint32b0(EnumUInt32::ENUM_VALUE_0)
    , uint32b1(EnumUInt32::ENUM_VALUE_1)
    , uint32b2(EnumUInt32::ENUM_VALUE_2)
    , uint32b3(EnumUInt32::ENUM_VALUE_3)
    , uint32b4(EnumUInt32::ENUM_VALUE_4)
    , uint32b5(EnumUInt32::ENUM_VALUE_5)
    , int64b0(EnumInt64::ENUM_VALUE_0)
    , int64b1(EnumInt64::ENUM_VALUE_1)
    , int64b2(EnumInt64::ENUM_VALUE_2)
    , int64b3(EnumInt64::ENUM_VALUE_3)
    , int64b4(EnumInt64::ENUM_VALUE_4)
    , int64b5(EnumInt64::ENUM_VALUE_5)
    , uint64b0(EnumUInt64::ENUM_VALUE_0)
    , uint64b1(EnumUInt64::ENUM_VALUE_1)
    , uint64b2(EnumUInt64::ENUM_VALUE_2)
    , uint64b3(EnumUInt64::ENUM_VALUE_3)
    , uint64b4(EnumUInt64::ENUM_VALUE_4)
    , uint64b5(EnumUInt64::ENUM_VALUE_5)
{}

Enums::Enums(const ::enums::EnumByte& arg_byte0, const ::enums::EnumByte& arg_byte1, const ::enums::EnumByte& arg_byte2, const ::enums::EnumByte& arg_byte3, const ::enums::EnumByte& arg_byte4, const ::enums::EnumByte& arg_byte5, const ::enums::EnumChar& arg_char0, const ::enums::EnumChar& arg_char1, const ::enums::EnumChar& arg_char2, const ::enums::EnumChar& arg_char3, const ::enums::EnumChar& arg_char4, const ::enums::EnumChar& arg_char5, const ::enums::EnumWChar& arg_wchar0, const ::enums::EnumWChar& arg_wchar1, const ::enums::EnumWChar& arg_wchar2, const ::enums::EnumWChar& arg_wchar3, const ::enums::EnumWChar& arg_wchar4, const ::enums::EnumWChar& arg_wchar5, const ::enums::EnumInt8& arg_int8b0, const ::enums::EnumInt8& arg_int8b1, const ::enums::EnumInt8& arg_int8b2, const ::enums::EnumInt8& arg_int8b3, const ::enums::EnumInt8& arg_int8b4, const ::enums::EnumInt8& arg_int8b5, const ::enums::EnumUInt8& arg_uint8b0, const ::enums::EnumUInt8& arg_uint8b1, const ::enums::EnumUInt8& arg_uint8b2, const ::enums::EnumUInt8& arg_uint8b3, const ::enums::EnumUInt8& arg_uint8b4, const ::enums::EnumUInt8& arg_uint8b5, const ::enums::EnumInt16& arg_int16b0, const ::enums::EnumInt16& arg_int16b1, const ::enums::EnumInt16& arg_int16b2, const ::enums::EnumInt16& arg_int16b3, const ::enums::EnumInt16& arg_int16b4, const ::enums::EnumInt16& arg_int16b5, const ::enums::EnumUInt16& arg_uint16b0, const ::enums::EnumUInt16& arg_uint16b1, const ::enums::EnumUInt16& arg_uint16b2, const ::enums::EnumUInt16& arg_uint16b3, const ::enums::EnumUInt16& arg_uint16b4, const ::enums::EnumUInt16& arg_uint16b5, const ::enums::EnumInt32& arg_int32b0, const ::enums::EnumInt32& arg_int32b1, const ::enums::EnumInt32& arg_int32b2, const ::enums::EnumInt32& arg_int32b3, const ::enums::EnumInt32& arg_int32b4, const ::enums::EnumInt32& arg_int32b5, const ::enums::EnumUInt32& arg_uint32b0, const ::enums::EnumUInt32& arg_uint32b1, const ::enums::EnumUInt32& arg_uint32b2, const ::enums::EnumUInt32& arg_uint32b3, const ::enums::EnumUInt32& arg_uint32b4, const ::enums::EnumUInt32& arg_uint32b5, const ::enums::EnumInt64& arg_int64b0, const ::enums::EnumInt64& arg_int64b1, const ::enums::EnumInt64& arg_int64b2, const ::enums::EnumInt64& arg_int64b3, const ::enums::EnumInt64& arg_int64b4, const ::enums::EnumInt64& arg_int64b5, const ::enums::EnumUInt64& arg_uint64b0, const ::enums::EnumUInt64& arg_uint64b1, const ::enums::EnumUInt64& arg_uint64b2, const ::enums::EnumUInt64& arg_uint64b3, const ::enums::EnumUInt64& arg_uint64b4, const ::enums::EnumUInt64& arg_uint64b5)
    : byte0(arg_byte0)
    , byte1(arg_byte1)
    , byte2(arg_byte2)
    , byte3(arg_byte3)
    , byte4(arg_byte4)
    , byte5(arg_byte5)
    , char0(arg_char0)
    , char1(arg_char1)
    , char2(arg_char2)
    , char3(arg_char3)
    , char4(arg_char4)
    , char5(arg_char5)
    , wchar0(arg_wchar0)
    , wchar1(arg_wchar1)
    , wchar2(arg_wchar2)
    , wchar3(arg_wchar3)
    , wchar4(arg_wchar4)
    , wchar5(arg_wchar5)
    , int8b0(arg_int8b0)
    , int8b1(arg_int8b1)
    , int8b2(arg_int8b2)
    , int8b3(arg_int8b3)
    , int8b4(arg_int8b4)
    , int8b5(arg_int8b5)
    , uint8b0(arg_uint8b0)
    , uint8b1(arg_uint8b1)
    , uint8b2(arg_uint8b2)
    , uint8b3(arg_uint8b3)
    , uint8b4(arg_uint8b4)
    , uint8b5(arg_uint8b5)
    , int16b0(arg_int16b0)
    , int16b1(arg_int16b1)
    , int16b2(arg_int16b2)
    , int16b3(arg_int16b3)
    , int16b4(arg_int16b4)
    , int16b5(arg_int16b5)
    , uint16b0(arg_uint16b0)
    , uint16b1(arg_uint16b1)
    , uint16b2(arg_uint16b2)
    , uint16b3(arg_uint16b3)
    , uint16b4(arg_uint16b4)
    , uint16b5(arg_uint16b5)
    , int32b0(arg_int32b0)
    , int32b1(arg_int32b1)
    , int32b2(arg_int32b2)
    , int32b3(arg_int32b3)
    , int32b4(arg_int32b4)
    , int32b5(arg_int32b5)
    , uint32b0(arg_uint32b0)
    , uint32b1(arg_uint32b1)
    , uint32b2(arg_uint32b2)
    , uint32b3(arg_uint32b3)
    , uint32b4(arg_uint32b4)
    , uint32b5(arg_uint32b5)
    , int64b0(arg_int64b0)
    , int64b1(arg_int64b1)
    , int64b2(arg_int64b2)
    , int64b3(arg_int64b3)
    , int64b4(arg_int64b4)
    , int64b5(arg_int64b5)
    , uint64b0(arg_uint64b0)
    , uint64b1(arg_uint64b1)
    , uint64b2(arg_uint64b2)
    , uint64b3(arg_uint64b3)
    , uint64b4(arg_uint64b4)
    , uint64b5(arg_uint64b5)
{}

bool Enums::operator==([[maybe_unused]] const Enums& other) const noexcept
{
    return (
        true
        );
}

bool Enums::operator<([[maybe_unused]] const Enums& other) const noexcept
{
    return false;
}

std::string Enums::string() const
{
    std::stringstream ss; ss << *this; return ss.str();
}

void Enums::swap([[maybe_unused]] Enums& other) noexcept
{
    using std::swap;
    swap(byte0, other.byte0);
    swap(byte1, other.byte1);
    swap(byte2, other.byte2);
    swap(byte3, other.byte3);
    swap(byte4, other.byte4);
    swap(byte5, other.byte5);
    swap(char0, other.char0);
    swap(char1, other.char1);
    swap(char2, other.char2);
    swap(char3, other.char3);
    swap(char4, other.char4);
    swap(char5, other.char5);
    swap(wchar0, other.wchar0);
    swap(wchar1, other.wchar1);
    swap(wchar2, other.wchar2);
    swap(wchar3, other.wchar3);
    swap(wchar4, other.wchar4);
    swap(wchar5, other.wchar5);
    swap(int8b0, other.int8b0);
    swap(int8b1, other.int8b1);
    swap(int8b2, other.int8b2);
    swap(int8b3, other.int8b3);
    swap(int8b4, other.int8b4);
    swap(int8b5, other.int8b5);
    swap(uint8b0, other.uint8b0);
    swap(uint8b1, other.uint8b1);
    swap(uint8b2, other.uint8b2);
    swap(uint8b3, other.uint8b3);
    swap(uint8b4, other.uint8b4);
    swap(uint8b5, other.uint8b5);
    swap(int16b0, other.int16b0);
    swap(int16b1, other.int16b1);
    swap(int16b2, other.int16b2);
    swap(int16b3, other.int16b3);
    swap(int16b4, other.int16b4);
    swap(int16b5, other.int16b5);
    swap(uint16b0, other.uint16b0);
    swap(uint16b1, other.uint16b1);
    swap(uint16b2, other.uint16b2);
    swap(uint16b3, other.uint16b3);
    swap(uint16b4, other.uint16b4);
    swap(uint16b5, other.uint16b5);
    swap(int32b0, other.int32b0);
    swap(int32b1, other.int32b1);
    swap(int32b2, other.int32b2);
    swap(int32b3, other.int32b3);
    swap(int32b4, other.int32b4);
    swap(int32b5, other.int32b5);
    swap(uint32b0, other.uint32b0);
    swap(uint32b1, other.uint32b1);
    swap(uint32b2, other.uint32b2);
    swap(uint32b3, other.uint32b3);
    swap(uint32b4, other.uint32b4);
    swap(uint32b5, other.uint32b5);
    swap(int64b0, other.int64b0);
    swap(int64b1, other.int64b1);
    swap(int64b2, other.int64b2);
    swap(int64b3, other.int64b3);
    swap(int64b4, other.int64b4);
    swap(int64b5, other.int64b5);
    swap(uint64b0, other.uint64b0);
    swap(uint64b1, other.uint64b1);
    swap(uint64b2, other.uint64b2);
    swap(uint64b3, other.uint64b3);
    swap(uint64b4, other.uint64b4);
    swap(uint64b5, other.uint64b5);
}

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Enums& value)
{
    stream << "Enums(";
    stream << "byte0="; stream << value.byte0;
    stream << ",byte1="; stream << value.byte1;
    stream << ",byte2="; stream << value.byte2;
    stream << ",byte3="; stream << value.byte3;
    stream << ",byte4="; stream << value.byte4;
    stream << ",byte5="; stream << value.byte5;
    stream << ",char0="; stream << value.char0;
    stream << ",char1="; stream << value.char1;
    stream << ",char2="; stream << value.char2;
    stream << ",char3="; stream << value.char3;
    stream << ",char4="; stream << value.char4;
    stream << ",char5="; stream << value.char5;
    stream << ",wchar0="; stream << value.wchar0;
    stream << ",wchar1="; stream << value.wchar1;
    stream << ",wchar2="; stream << value.wchar2;
    stream << ",wchar3="; stream << value.wchar3;
    stream << ",wchar4="; stream << value.wchar4;
    stream << ",wchar5="; stream << value.wchar5;
    stream << ",int8b0="; stream << value.int8b0;
    stream << ",int8b1="; stream << value.int8b1;
    stream << ",int8b2="; stream << value.int8b2;
    stream << ",int8b3="; stream << value.int8b3;
    stream << ",int8b4="; stream << value.int8b4;
    stream << ",int8b5="; stream << value.int8b5;
    stream << ",uint8b0="; stream << value.uint8b0;
    stream << ",uint8b1="; stream << value.uint8b1;
    stream << ",uint8b2="; stream << value.uint8b2;
    stream << ",uint8b3="; stream << value.uint8b3;
    stream << ",uint8b4="; stream << value.uint8b4;
    stream << ",uint8b5="; stream << value.uint8b5;
    stream << ",int16b0="; stream << value.int16b0;
    stream << ",int16b1="; stream << value.int16b1;
    stream << ",int16b2="; stream << value.int16b2;
    stream << ",int16b3="; stream << value.int16b3;
    stream << ",int16b4="; stream << value.int16b4;
    stream << ",int16b5="; stream << value.int16b5;
    stream << ",uint16b0="; stream << value.uint16b0;
    stream << ",uint16b1="; stream << value.uint16b1;
    stream << ",uint16b2="; stream << value.uint16b2;
    stream << ",uint16b3="; stream << value.uint16b3;
    stream << ",uint16b4="; stream << value.uint16b4;
    stream << ",uint16b5="; stream << value.uint16b5;
    stream << ",int32b0="; stream << value.int32b0;
    stream << ",int32b1="; stream << value.int32b1;
    stream << ",int32b2="; stream << value.int32b2;
    stream << ",int32b3="; stream << value.int32b3;
    stream << ",int32b4="; stream << value.int32b4;
    stream << ",int32b5="; stream << value.int32b5;
    stream << ",uint32b0="; stream << value.uint32b0;
    stream << ",uint32b1="; stream << value.uint32b1;
    stream << ",uint32b2="; stream << value.uint32b2;
    stream << ",uint32b3="; stream << value.uint32b3;
    stream << ",uint32b4="; stream << value.uint32b4;
    stream << ",uint32b5="; stream << value.uint32b5;
    stream << ",int64b0="; stream << value.int64b0;
    stream << ",int64b1="; stream << value.int64b1;
    stream << ",int64b2="; stream << value.int64b2;
    stream << ",int64b3="; stream << value.int64b3;
    stream << ",int64b4="; stream << value.int64b4;
    stream << ",int64b5="; stream << value.int64b5;
    stream << ",uint64b0="; stream << value.uint64b0;
    stream << ",uint64b1="; stream << value.uint64b1;
    stream << ",uint64b2="; stream << value.uint64b2;
    stream << ",uint64b3="; stream << value.uint64b3;
    stream << ",uint64b4="; stream << value.uint64b4;
    stream << ",uint64b5="; stream << value.uint64b5;
    stream << ")";
    return stream;
}

} // namespace enums
