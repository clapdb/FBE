//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: cpp_only.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

#include "cpp_only_final_models.h"

namespace FBE {

FinalModel<::cpp_only::Struct128>::FinalModel(FBEBuffer& buffer, size_t offset) noexcept : _buffer(buffer), _offset(offset)
    , f1(buffer, 0)
    , f2(buffer, 0)
    , f3(buffer, 0)
    , f4(buffer, 0)
    , f5(buffer, 0)
    , f6(buffer, 0)
    , f7(buffer, 0)
{}

size_t FinalModel<::cpp_only::Struct128>::fbe_allocation_size(const ::cpp_only::Struct128& fbe_value) const noexcept
{
    size_t fbe_result = 0
        + f1.fbe_allocation_size(fbe_value.f1)
        + f2.fbe_allocation_size(fbe_value.f2)
        + f3.fbe_allocation_size(fbe_value.f3)
        + f4.fbe_allocation_size(fbe_value.f4)
        + f5.fbe_allocation_size(fbe_value.f5)
        + f6.fbe_allocation_size(fbe_value.f6)
        + f7.fbe_allocation_size(fbe_value.f7)
        ;
    return fbe_result;
}

size_t FinalModel<::cpp_only::Struct128>::verify() const noexcept
{
    _buffer.shift(fbe_offset());
    size_t fbe_result = verify_fields();
    _buffer.unshift(fbe_offset());
    return fbe_result;
}

size_t FinalModel<::cpp_only::Struct128>::verify_fields() const noexcept
{
    size_t fbe_current_offset = 0;
    size_t fbe_field_size;

    f1.fbe_offset(fbe_current_offset);
    fbe_field_size = f1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    f2.fbe_offset(fbe_current_offset);
    fbe_field_size = f2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    f3.fbe_offset(fbe_current_offset);
    fbe_field_size = f3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    f4.fbe_offset(fbe_current_offset);
    fbe_field_size = f4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    f5.fbe_offset(fbe_current_offset);
    fbe_field_size = f5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    f6.fbe_offset(fbe_current_offset);
    fbe_field_size = f6.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    f7.fbe_offset(fbe_current_offset);
    fbe_field_size = f7.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    return fbe_current_offset;
}

size_t FinalModel<::cpp_only::Struct128>::get(::cpp_only::Struct128& fbe_value) const noexcept
{
    _buffer.shift(fbe_offset());
    size_t fbe_result = get_fields(fbe_value);
    _buffer.unshift(fbe_offset());
    return fbe_result;
}

size_t FinalModel<::cpp_only::Struct128>::get_fields([[maybe_unused]] ::cpp_only::Struct128& fbe_value) const noexcept
{
    size_t fbe_current_offset = 0;
    size_t fbe_current_size = 0;
    size_t fbe_field_size;

    f1.fbe_offset(fbe_current_offset);
    fbe_field_size = f1.get(fbe_value.f1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f2.fbe_offset(fbe_current_offset);
    fbe_field_size = f2.get(fbe_value.f2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f3.fbe_offset(fbe_current_offset);
    fbe_field_size = f3.get(fbe_value.f3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f4.fbe_offset(fbe_current_offset);
    fbe_field_size = f4.get(fbe_value.f4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f5.fbe_offset(fbe_current_offset);
    fbe_field_size = f5.get(fbe_value.f5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f6.fbe_offset(fbe_current_offset);
    fbe_field_size = f6.get(fbe_value.f6);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f7.fbe_offset(fbe_current_offset);
    fbe_field_size = f7.get(fbe_value.f7);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    return fbe_current_size;
}

size_t FinalModel<::cpp_only::Struct128>::set(const ::cpp_only::Struct128& fbe_value) noexcept
{
    _buffer.shift(fbe_offset());
    size_t fbe_result = set_fields(fbe_value);
    _buffer.unshift(fbe_offset());
    return fbe_result;
}

size_t FinalModel<::cpp_only::Struct128>::set_fields([[maybe_unused]] const ::cpp_only::Struct128& fbe_value) noexcept
{
    size_t fbe_current_offset = 0;
    size_t fbe_current_size = 0;
    size_t fbe_field_size;

    f1.fbe_offset(fbe_current_offset);
    fbe_field_size = f1.set(fbe_value.f1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f2.fbe_offset(fbe_current_offset);
    fbe_field_size = f2.set(fbe_value.f2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f3.fbe_offset(fbe_current_offset);
    fbe_field_size = f3.set(fbe_value.f3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f4.fbe_offset(fbe_current_offset);
    fbe_field_size = f4.set(fbe_value.f4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f5.fbe_offset(fbe_current_offset);
    fbe_field_size = f5.set(fbe_value.f5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f6.fbe_offset(fbe_current_offset);
    fbe_field_size = f6.set(fbe_value.f6);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    f7.fbe_offset(fbe_current_offset);
    fbe_field_size = f7.set(fbe_value.f7);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    return fbe_current_size;
}

namespace cpp_only {

bool Struct128FinalModel::verify()
{
    if ((this->buffer().offset() + _model.fbe_offset()) > this->buffer().size())
        return false;

    size_t fbe_struct_size = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 8);
    size_t fbe_struct_type = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 4);
    if ((fbe_struct_size == 0) || (fbe_struct_type != fbe_type()))
        return false;

    return ((8 + _model.verify()) == fbe_struct_size);
}

size_t Struct128FinalModel::serialize(const ::cpp_only::Struct128& value)
{
    size_t fbe_initial_size = this->buffer().size();

    uint32_t fbe_struct_type = (uint32_t)fbe_type();
    uint32_t fbe_struct_size = (uint32_t)(8 + _model.fbe_allocation_size(value));
    uint32_t fbe_struct_offset = (uint32_t)(this->buffer().allocate(fbe_struct_size) - this->buffer().offset());
    assert(((this->buffer().offset() + fbe_struct_offset + fbe_struct_size) <= this->buffer().size()) && "Model is broken!");
    if ((this->buffer().offset() + fbe_struct_offset + fbe_struct_size) > this->buffer().size())
        return 0;

    fbe_struct_size = (uint32_t)(8 + _model.set(value));
    this->buffer().resize(fbe_initial_size + fbe_struct_size);

    *((uint32_t*)(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 8)) = fbe_struct_size;
    *((uint32_t*)(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 4)) = fbe_struct_type;

    return fbe_struct_size;
}

size_t Struct128FinalModel::deserialize(::cpp_only::Struct128& value) const noexcept
{
    assert(((this->buffer().offset() + _model.fbe_offset()) <= this->buffer().size()) && "Model is broken!");
    if ((this->buffer().offset() + _model.fbe_offset()) > this->buffer().size())
        return 0;

    size_t fbe_struct_size = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 8);
    size_t fbe_struct_type = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 4);
    assert(((fbe_struct_size > 0) && (fbe_struct_type == fbe_type())) && "Model is broken!");
    if ((fbe_struct_size == 0) || (fbe_struct_type != fbe_type()))
        return 8;

    return 8 + _model.get(value);
}

} // namespace cpp_only

} // namespace FBE
