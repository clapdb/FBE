//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_models.h"

#include "enums_pmr.h"

namespace FBE {

// Fast Binary Encoding ::enums_pmr::EnumByte field model
template <>
class FieldModel<::enums_pmr::EnumByte> : public FieldModelBase<::enums_pmr::EnumByte, uint8_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumByte, uint8_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumChar field model
template <>
class FieldModel<::enums_pmr::EnumChar> : public FieldModelBase<::enums_pmr::EnumChar, uint8_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumChar, uint8_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumWChar field model
template <>
class FieldModel<::enums_pmr::EnumWChar> : public FieldModelBase<::enums_pmr::EnumWChar, uint32_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumWChar, uint32_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumInt8 field model
template <>
class FieldModel<::enums_pmr::EnumInt8> : public FieldModelBase<::enums_pmr::EnumInt8, int8_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumInt8, int8_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumUInt8 field model
template <>
class FieldModel<::enums_pmr::EnumUInt8> : public FieldModelBase<::enums_pmr::EnumUInt8, uint8_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumUInt8, uint8_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumInt16 field model
template <>
class FieldModel<::enums_pmr::EnumInt16> : public FieldModelBase<::enums_pmr::EnumInt16, int16_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumInt16, int16_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumUInt16 field model
template <>
class FieldModel<::enums_pmr::EnumUInt16> : public FieldModelBase<::enums_pmr::EnumUInt16, uint16_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumUInt16, uint16_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumInt32 field model
template <>
class FieldModel<::enums_pmr::EnumInt32> : public FieldModelBase<::enums_pmr::EnumInt32, int32_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumInt32, int32_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumUInt32 field model
template <>
class FieldModel<::enums_pmr::EnumUInt32> : public FieldModelBase<::enums_pmr::EnumUInt32, uint32_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumUInt32, uint32_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumInt64 field model
template <>
class FieldModel<::enums_pmr::EnumInt64> : public FieldModelBase<::enums_pmr::EnumInt64, int64_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumInt64, int64_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::EnumUInt64 field model
template <>
class FieldModel<::enums_pmr::EnumUInt64> : public FieldModelBase<::enums_pmr::EnumUInt64, uint64_t>
{
public:
    using FieldModelBase<::enums_pmr::EnumUInt64, uint64_t>::FieldModelBase;
};

// Fast Binary Encoding ::enums_pmr::Enums field model
template <>
class FieldModel<::enums_pmr::Enums>
{
public:
    FieldModel(FBEBuffer& buffer, size_t offset) noexcept;

    // Get the field offset
    size_t fbe_offset() const noexcept { return _offset; }
    // Get the field size
    size_t fbe_size() const noexcept { return 4; }
    // Get the field body size
    size_t fbe_body() const noexcept;
    // Get the field extra size
    size_t fbe_extra() const noexcept;
    // Get the field type
    static constexpr size_t fbe_type() noexcept { return 1; }

    // Shift the current field offset
    void fbe_shift(size_t size) noexcept { _offset += size; }
    // Unshift the current field offset
    void fbe_unshift(size_t size) noexcept { _offset -= size; }

    // Check if the struct value is valid
    bool verify(bool fbe_verify_type = true) const noexcept;
    // Check if the struct fields are valid
    bool verify_fields(size_t fbe_struct_size) const noexcept;

    // Get the struct value (begin phase)
    size_t get_begin() const noexcept;
    // Get the struct value (end phase)
    void get_end(size_t fbe_begin) const noexcept;

    // Get the struct value
    void get(::enums_pmr::Enums& fbe_value) const noexcept;
    // Get the struct fields values
    void get_fields(::enums_pmr::Enums& fbe_value, size_t fbe_struct_size) const noexcept;

    // Set the struct value (begin phase)
    size_t set_begin();
    // Set the struct value (end phase)
    void set_end(size_t fbe_begin);

    // Set the struct value
    void set(const ::enums_pmr::Enums& fbe_value) noexcept;
    // Set the struct fields values
    void set_fields(const ::enums_pmr::Enums& fbe_value) noexcept;

private:
    FBEBuffer& _buffer;
    size_t _offset;

public:
    FieldModel<::enums_pmr::EnumByte> byte0;
    FieldModel<::enums_pmr::EnumByte> byte1;
    FieldModel<::enums_pmr::EnumByte> byte2;
    FieldModel<::enums_pmr::EnumByte> byte3;
    FieldModel<::enums_pmr::EnumByte> byte4;
    FieldModel<::enums_pmr::EnumByte> byte5;
    FieldModel<::enums_pmr::EnumChar> char0;
    FieldModel<::enums_pmr::EnumChar> char1;
    FieldModel<::enums_pmr::EnumChar> char2;
    FieldModel<::enums_pmr::EnumChar> char3;
    FieldModel<::enums_pmr::EnumChar> char4;
    FieldModel<::enums_pmr::EnumChar> char5;
    FieldModel<::enums_pmr::EnumWChar> wchar0;
    FieldModel<::enums_pmr::EnumWChar> wchar1;
    FieldModel<::enums_pmr::EnumWChar> wchar2;
    FieldModel<::enums_pmr::EnumWChar> wchar3;
    FieldModel<::enums_pmr::EnumWChar> wchar4;
    FieldModel<::enums_pmr::EnumWChar> wchar5;
    FieldModel<::enums_pmr::EnumInt8> int8b0;
    FieldModel<::enums_pmr::EnumInt8> int8b1;
    FieldModel<::enums_pmr::EnumInt8> int8b2;
    FieldModel<::enums_pmr::EnumInt8> int8b3;
    FieldModel<::enums_pmr::EnumInt8> int8b4;
    FieldModel<::enums_pmr::EnumInt8> int8b5;
    FieldModel<::enums_pmr::EnumUInt8> uint8b0;
    FieldModel<::enums_pmr::EnumUInt8> uint8b1;
    FieldModel<::enums_pmr::EnumUInt8> uint8b2;
    FieldModel<::enums_pmr::EnumUInt8> uint8b3;
    FieldModel<::enums_pmr::EnumUInt8> uint8b4;
    FieldModel<::enums_pmr::EnumUInt8> uint8b5;
    FieldModel<::enums_pmr::EnumInt16> int16b0;
    FieldModel<::enums_pmr::EnumInt16> int16b1;
    FieldModel<::enums_pmr::EnumInt16> int16b2;
    FieldModel<::enums_pmr::EnumInt16> int16b3;
    FieldModel<::enums_pmr::EnumInt16> int16b4;
    FieldModel<::enums_pmr::EnumInt16> int16b5;
    FieldModel<::enums_pmr::EnumUInt16> uint16b0;
    FieldModel<::enums_pmr::EnumUInt16> uint16b1;
    FieldModel<::enums_pmr::EnumUInt16> uint16b2;
    FieldModel<::enums_pmr::EnumUInt16> uint16b3;
    FieldModel<::enums_pmr::EnumUInt16> uint16b4;
    FieldModel<::enums_pmr::EnumUInt16> uint16b5;
    FieldModel<::enums_pmr::EnumInt32> int32b0;
    FieldModel<::enums_pmr::EnumInt32> int32b1;
    FieldModel<::enums_pmr::EnumInt32> int32b2;
    FieldModel<::enums_pmr::EnumInt32> int32b3;
    FieldModel<::enums_pmr::EnumInt32> int32b4;
    FieldModel<::enums_pmr::EnumInt32> int32b5;
    FieldModel<::enums_pmr::EnumUInt32> uint32b0;
    FieldModel<::enums_pmr::EnumUInt32> uint32b1;
    FieldModel<::enums_pmr::EnumUInt32> uint32b2;
    FieldModel<::enums_pmr::EnumUInt32> uint32b3;
    FieldModel<::enums_pmr::EnumUInt32> uint32b4;
    FieldModel<::enums_pmr::EnumUInt32> uint32b5;
    FieldModel<::enums_pmr::EnumInt64> int64b0;
    FieldModel<::enums_pmr::EnumInt64> int64b1;
    FieldModel<::enums_pmr::EnumInt64> int64b2;
    FieldModel<::enums_pmr::EnumInt64> int64b3;
    FieldModel<::enums_pmr::EnumInt64> int64b4;
    FieldModel<::enums_pmr::EnumInt64> int64b5;
    FieldModel<::enums_pmr::EnumUInt64> uint64b0;
    FieldModel<::enums_pmr::EnumUInt64> uint64b1;
    FieldModel<::enums_pmr::EnumUInt64> uint64b2;
    FieldModel<::enums_pmr::EnumUInt64> uint64b3;
    FieldModel<::enums_pmr::EnumUInt64> uint64b4;
    FieldModel<::enums_pmr::EnumUInt64> uint64b5;
};

namespace enums_pmr {

// Fast Binary Encoding Enums model
class EnumsModel : public FBE::Model
{
public:
    EnumsModel() : model(this->buffer(), 4) {}
    EnumsModel(const std::shared_ptr<FBEBuffer>& buffer) : FBE::Model(buffer), model(this->buffer(), 4) {}

    // Get the model size
    size_t fbe_size() const noexcept { return model.fbe_size() + model.fbe_extra(); }
    // Get the model type
    static constexpr size_t fbe_type() noexcept { return FieldModel<::enums_pmr::Enums>::fbe_type(); }

    // Check if the struct value is valid
    bool verify();

    // Create a new model (begin phase)
    size_t create_begin();
    // Create a new model (end phase)
    size_t create_end(size_t fbe_begin);

    // Serialize the struct value
    size_t serialize(const ::enums_pmr::Enums& value);
    // Deserialize the struct value
    size_t deserialize(::enums_pmr::Enums& value) const noexcept;

    // Move to the next struct value
    void next(size_t prev) noexcept { model.fbe_shift(prev); }

public:
    FieldModel<::enums_pmr::Enums> model;
};

} // namespace enums_pmr

} // namespace FBE
