//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: protoex.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe.h"
#include "arena/arena.hpp"

#include "proto_pmr.h"

namespace protoex_pmr {
using namespace FBE;
using allocator_type = pmr::polymorphic_allocator<char>;
using namespace ::proto_pmr;
} // namespace protoex_pmr

namespace FBE {
using namespace ::protoex_pmr;
} // namespace FBE

namespace protoex_pmr {

enum class OrderSide : uint8_t
{
    buy,
    sell,
    tell,
};

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] OrderSide value);

#if defined(LOGGING_PROTOCOL)
CppLogging::Record& operator<<(CppLogging::Record& record, OrderSide value);
#endif

enum class OrderType : uint8_t
{
    market,
    limit,
    stop,
    stoplimit,
};

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] OrderType value);

#if defined(LOGGING_PROTOCOL)
CppLogging::Record& operator<<(CppLogging::Record& record, OrderType value);
#endif

enum class StateEx : uint8_t
{
    unknown = (uint8_t)0x00u,
    invalid = (uint8_t)0x01u,
    initialized = (uint8_t)0x02u,
    calculated = (uint8_t)0x04u,
    broken = (uint8_t)0x08u,
    happy = (uint8_t)0x10u,
    sad = (uint8_t)0x20u,
    good = initialized  |  calculated,
    bad = unknown  |  invalid  |  broken,
};

FBE_ENUM_FLAGS(StateEx)

std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] StateEx value);

#if defined(LOGGING_PROTOCOL)
CppLogging::Record& operator<<(CppLogging::Record& record, StateEx value);
#endif

struct Order
{
    ArenaManagedCreateOnlyTag;

    int32_t id;
    stdb::memory::arena_string symbol;
    ::protoex_pmr::OrderSide side;
    ::protoex_pmr::OrderType type;
    double price;
    double volume;
    double tp;
    double sl;

    size_t fbe_type() const noexcept { return 1; }

    Order();
    explicit Order(allocator_type alloc);
    Order(int32_t arg_id, const stdb::memory::arena_string& arg_symbol, const ::protoex_pmr::OrderSide& arg_side, const ::protoex_pmr::OrderType& arg_type, double arg_price, double arg_volume, double arg_tp, double arg_sl);
    Order(const Order& other) = default;
    Order(Order&& other) = default;
    ~Order() = default;

    Order& operator=(const Order& other) = default;
    Order& operator=(Order&& other) = default;

    bool operator==(const Order& other) const noexcept;
    bool operator!=(const Order& other) const noexcept { return !operator==(other); }
    bool operator<(const Order& other) const noexcept;
    bool operator<=(const Order& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Order& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Order& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Order& value);

    void swap(Order& other) noexcept;
    friend void swap(Order& value1, Order& value2) noexcept { value1.swap(value2); }
};

} // namespace protoex_pmr

template<>
struct std::hash<protoex_pmr::Order>
{
    typedef protoex_pmr::Order argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        result = result * 31 + std::hash<decltype(value.id)>()(value.id);
        return result;
    }
};

namespace protoex_pmr {

struct Balance : public ::proto_pmr::Balance
{
    ArenaManagedCreateOnlyTag;

    double locked;

    size_t fbe_type() const noexcept { return ::proto_pmr::Balance::fbe_type(); }

    Balance();
    explicit Balance(allocator_type alloc);
    Balance(const ::proto_pmr::Balance& base, double arg_locked);
    Balance(const Balance& other) = default;
    Balance(Balance&& other) = default;
    ~Balance() = default;

    Balance& operator=(const Balance& other) = default;
    Balance& operator=(Balance&& other) = default;

    bool operator==(const Balance& other) const noexcept;
    bool operator!=(const Balance& other) const noexcept { return !operator==(other); }
    bool operator<(const Balance& other) const noexcept;
    bool operator<=(const Balance& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Balance& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Balance& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Balance& value);

    void swap(Balance& other) noexcept;
    friend void swap(Balance& value1, Balance& value2) noexcept { value1.swap(value2); }
};

} // namespace protoex_pmr

template<>
struct std::hash<protoex_pmr::Balance>
{
    typedef protoex_pmr::Balance argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        result = result * 31 + std::hash<::proto_pmr::Balance>()(value);
        return result;
    }
};

namespace protoex_pmr {

struct Account
{
    ArenaManagedCreateOnlyTag;

    int32_t id;
    stdb::memory::arena_string name;
    ::protoex_pmr::StateEx state;
    ::protoex_pmr::Balance wallet;
    std::optional<::protoex_pmr::Balance> asset;
    pmr::vector<::protoex_pmr::Order> orders;

    size_t fbe_type() const noexcept { return 3; }

    Account();
    explicit Account(allocator_type alloc);
    Account(int32_t arg_id, const stdb::memory::arena_string& arg_name, const ::protoex_pmr::StateEx& arg_state, const ::protoex_pmr::Balance& arg_wallet, const std::optional<::protoex_pmr::Balance>& arg_asset, const pmr::vector<::protoex_pmr::Order>& arg_orders);
    Account(const Account& other) = default;
    Account(Account&& other) = default;
    ~Account() = default;

    Account& operator=(const Account& other) = default;
    Account& operator=(Account&& other) = default;

    bool operator==(const Account& other) const noexcept;
    bool operator!=(const Account& other) const noexcept { return !operator==(other); }
    bool operator<(const Account& other) const noexcept;
    bool operator<=(const Account& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Account& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Account& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Account& value);

    void swap(Account& other) noexcept;
    friend void swap(Account& value1, Account& value2) noexcept { value1.swap(value2); }
};

} // namespace protoex_pmr

template<>
struct std::hash<protoex_pmr::Account>
{
    typedef protoex_pmr::Account argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        result = result * 31 + std::hash<decltype(value.id)>()(value.id);
        return result;
    }
};

namespace protoex_pmr {

struct OrderMessage
{
    ArenaManagedCreateOnlyTag;

    ::protoex_pmr::Order body;

    size_t fbe_type() const noexcept { return 11; }

    OrderMessage();
    explicit OrderMessage(allocator_type alloc);
    explicit OrderMessage(const ::protoex_pmr::Order& arg_body);
    OrderMessage(const OrderMessage& other) = default;
    OrderMessage(OrderMessage&& other) = default;
    ~OrderMessage() = default;

    OrderMessage& operator=(const OrderMessage& other) = default;
    OrderMessage& operator=(OrderMessage&& other) = default;

    bool operator==(const OrderMessage& other) const noexcept;
    bool operator!=(const OrderMessage& other) const noexcept { return !operator==(other); }
    bool operator<(const OrderMessage& other) const noexcept;
    bool operator<=(const OrderMessage& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const OrderMessage& other) const noexcept { return !operator<=(other); }
    bool operator>=(const OrderMessage& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const OrderMessage& value);

    void swap(OrderMessage& other) noexcept;
    friend void swap(OrderMessage& value1, OrderMessage& value2) noexcept { value1.swap(value2); }
};

} // namespace protoex_pmr

template<>
struct std::hash<protoex_pmr::OrderMessage>
{
    typedef protoex_pmr::OrderMessage argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace protoex_pmr {

struct BalanceMessage
{
    ArenaManagedCreateOnlyTag;

    ::protoex_pmr::Balance body;

    size_t fbe_type() const noexcept { return 12; }

    BalanceMessage();
    explicit BalanceMessage(allocator_type alloc);
    explicit BalanceMessage(const ::protoex_pmr::Balance& arg_body);
    BalanceMessage(const BalanceMessage& other) = default;
    BalanceMessage(BalanceMessage&& other) = default;
    ~BalanceMessage() = default;

    BalanceMessage& operator=(const BalanceMessage& other) = default;
    BalanceMessage& operator=(BalanceMessage&& other) = default;

    bool operator==(const BalanceMessage& other) const noexcept;
    bool operator!=(const BalanceMessage& other) const noexcept { return !operator==(other); }
    bool operator<(const BalanceMessage& other) const noexcept;
    bool operator<=(const BalanceMessage& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const BalanceMessage& other) const noexcept { return !operator<=(other); }
    bool operator>=(const BalanceMessage& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const BalanceMessage& value);

    void swap(BalanceMessage& other) noexcept;
    friend void swap(BalanceMessage& value1, BalanceMessage& value2) noexcept { value1.swap(value2); }
};

} // namespace protoex_pmr

template<>
struct std::hash<protoex_pmr::BalanceMessage>
{
    typedef protoex_pmr::BalanceMessage argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace protoex_pmr {

struct AccountMessage
{
    ArenaManagedCreateOnlyTag;

    ::protoex_pmr::Account body;

    size_t fbe_type() const noexcept { return 13; }

    AccountMessage();
    explicit AccountMessage(allocator_type alloc);
    explicit AccountMessage(const ::protoex_pmr::Account& arg_body);
    AccountMessage(const AccountMessage& other) = default;
    AccountMessage(AccountMessage&& other) = default;
    ~AccountMessage() = default;

    AccountMessage& operator=(const AccountMessage& other) = default;
    AccountMessage& operator=(AccountMessage&& other) = default;

    bool operator==(const AccountMessage& other) const noexcept;
    bool operator!=(const AccountMessage& other) const noexcept { return !operator==(other); }
    bool operator<(const AccountMessage& other) const noexcept;
    bool operator<=(const AccountMessage& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const AccountMessage& other) const noexcept { return !operator<=(other); }
    bool operator>=(const AccountMessage& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const AccountMessage& value);

    void swap(AccountMessage& other) noexcept;
    friend void swap(AccountMessage& value1, AccountMessage& value2) noexcept { value1.swap(value2); }
};

} // namespace protoex_pmr

template<>
struct std::hash<protoex_pmr::AccountMessage>
{
    typedef protoex_pmr::AccountMessage argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace protoex_pmr {

} // namespace protoex_pmr
