//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: cpp_only.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_json.h"

#include "cpp_only.h"

namespace FBE {

namespace JSON {

template <class TWriter>
struct ValueWriter<TWriter, ::cpp_only::Struct128>
{
    static bool to_json(TWriter& writer, const ::cpp_only::Struct128& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::cpp_only::Struct128>
{
    static bool from_json(const TJson& json, ::cpp_only::Struct128& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        return result;
    }
};

} // namespace JSON

} // namespace FBE
