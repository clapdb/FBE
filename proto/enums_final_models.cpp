//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: enums.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#include "enums_final_models.h"

namespace FBE {

FinalModel<::enums::Enums>::FinalModel(FBEBuffer& buffer, size_t offset) noexcept : _buffer(buffer), _offset(offset)
    , byte0(buffer, 0)
    , byte1(buffer, 0)
    , byte2(buffer, 0)
    , byte3(buffer, 0)
    , byte4(buffer, 0)
    , byte5(buffer, 0)
    , char0(buffer, 0)
    , char1(buffer, 0)
    , char2(buffer, 0)
    , char3(buffer, 0)
    , char4(buffer, 0)
    , char5(buffer, 0)
    , wchar0(buffer, 0)
    , wchar1(buffer, 0)
    , wchar2(buffer, 0)
    , wchar3(buffer, 0)
    , wchar4(buffer, 0)
    , wchar5(buffer, 0)
    , int8b0(buffer, 0)
    , int8b1(buffer, 0)
    , int8b2(buffer, 0)
    , int8b3(buffer, 0)
    , int8b4(buffer, 0)
    , int8b5(buffer, 0)
    , uint8b0(buffer, 0)
    , uint8b1(buffer, 0)
    , uint8b2(buffer, 0)
    , uint8b3(buffer, 0)
    , uint8b4(buffer, 0)
    , uint8b5(buffer, 0)
    , int16b0(buffer, 0)
    , int16b1(buffer, 0)
    , int16b2(buffer, 0)
    , int16b3(buffer, 0)
    , int16b4(buffer, 0)
    , int16b5(buffer, 0)
    , uint16b0(buffer, 0)
    , uint16b1(buffer, 0)
    , uint16b2(buffer, 0)
    , uint16b3(buffer, 0)
    , uint16b4(buffer, 0)
    , uint16b5(buffer, 0)
    , int32b0(buffer, 0)
    , int32b1(buffer, 0)
    , int32b2(buffer, 0)
    , int32b3(buffer, 0)
    , int32b4(buffer, 0)
    , int32b5(buffer, 0)
    , uint32b0(buffer, 0)
    , uint32b1(buffer, 0)
    , uint32b2(buffer, 0)
    , uint32b3(buffer, 0)
    , uint32b4(buffer, 0)
    , uint32b5(buffer, 0)
    , int64b0(buffer, 0)
    , int64b1(buffer, 0)
    , int64b2(buffer, 0)
    , int64b3(buffer, 0)
    , int64b4(buffer, 0)
    , int64b5(buffer, 0)
    , uint64b0(buffer, 0)
    , uint64b1(buffer, 0)
    , uint64b2(buffer, 0)
    , uint64b3(buffer, 0)
    , uint64b4(buffer, 0)
    , uint64b5(buffer, 0)
{}

size_t FinalModel<::enums::Enums>::fbe_allocation_size(const ::enums::Enums& fbe_value) const noexcept
{
    size_t fbe_result = 0
        + byte0.fbe_allocation_size(fbe_value.byte0)
        + byte1.fbe_allocation_size(fbe_value.byte1)
        + byte2.fbe_allocation_size(fbe_value.byte2)
        + byte3.fbe_allocation_size(fbe_value.byte3)
        + byte4.fbe_allocation_size(fbe_value.byte4)
        + byte5.fbe_allocation_size(fbe_value.byte5)
        + char0.fbe_allocation_size(fbe_value.char0)
        + char1.fbe_allocation_size(fbe_value.char1)
        + char2.fbe_allocation_size(fbe_value.char2)
        + char3.fbe_allocation_size(fbe_value.char3)
        + char4.fbe_allocation_size(fbe_value.char4)
        + char5.fbe_allocation_size(fbe_value.char5)
        + wchar0.fbe_allocation_size(fbe_value.wchar0)
        + wchar1.fbe_allocation_size(fbe_value.wchar1)
        + wchar2.fbe_allocation_size(fbe_value.wchar2)
        + wchar3.fbe_allocation_size(fbe_value.wchar3)
        + wchar4.fbe_allocation_size(fbe_value.wchar4)
        + wchar5.fbe_allocation_size(fbe_value.wchar5)
        + int8b0.fbe_allocation_size(fbe_value.int8b0)
        + int8b1.fbe_allocation_size(fbe_value.int8b1)
        + int8b2.fbe_allocation_size(fbe_value.int8b2)
        + int8b3.fbe_allocation_size(fbe_value.int8b3)
        + int8b4.fbe_allocation_size(fbe_value.int8b4)
        + int8b5.fbe_allocation_size(fbe_value.int8b5)
        + uint8b0.fbe_allocation_size(fbe_value.uint8b0)
        + uint8b1.fbe_allocation_size(fbe_value.uint8b1)
        + uint8b2.fbe_allocation_size(fbe_value.uint8b2)
        + uint8b3.fbe_allocation_size(fbe_value.uint8b3)
        + uint8b4.fbe_allocation_size(fbe_value.uint8b4)
        + uint8b5.fbe_allocation_size(fbe_value.uint8b5)
        + int16b0.fbe_allocation_size(fbe_value.int16b0)
        + int16b1.fbe_allocation_size(fbe_value.int16b1)
        + int16b2.fbe_allocation_size(fbe_value.int16b2)
        + int16b3.fbe_allocation_size(fbe_value.int16b3)
        + int16b4.fbe_allocation_size(fbe_value.int16b4)
        + int16b5.fbe_allocation_size(fbe_value.int16b5)
        + uint16b0.fbe_allocation_size(fbe_value.uint16b0)
        + uint16b1.fbe_allocation_size(fbe_value.uint16b1)
        + uint16b2.fbe_allocation_size(fbe_value.uint16b2)
        + uint16b3.fbe_allocation_size(fbe_value.uint16b3)
        + uint16b4.fbe_allocation_size(fbe_value.uint16b4)
        + uint16b5.fbe_allocation_size(fbe_value.uint16b5)
        + int32b0.fbe_allocation_size(fbe_value.int32b0)
        + int32b1.fbe_allocation_size(fbe_value.int32b1)
        + int32b2.fbe_allocation_size(fbe_value.int32b2)
        + int32b3.fbe_allocation_size(fbe_value.int32b3)
        + int32b4.fbe_allocation_size(fbe_value.int32b4)
        + int32b5.fbe_allocation_size(fbe_value.int32b5)
        + uint32b0.fbe_allocation_size(fbe_value.uint32b0)
        + uint32b1.fbe_allocation_size(fbe_value.uint32b1)
        + uint32b2.fbe_allocation_size(fbe_value.uint32b2)
        + uint32b3.fbe_allocation_size(fbe_value.uint32b3)
        + uint32b4.fbe_allocation_size(fbe_value.uint32b4)
        + uint32b5.fbe_allocation_size(fbe_value.uint32b5)
        + int64b0.fbe_allocation_size(fbe_value.int64b0)
        + int64b1.fbe_allocation_size(fbe_value.int64b1)
        + int64b2.fbe_allocation_size(fbe_value.int64b2)
        + int64b3.fbe_allocation_size(fbe_value.int64b3)
        + int64b4.fbe_allocation_size(fbe_value.int64b4)
        + int64b5.fbe_allocation_size(fbe_value.int64b5)
        + uint64b0.fbe_allocation_size(fbe_value.uint64b0)
        + uint64b1.fbe_allocation_size(fbe_value.uint64b1)
        + uint64b2.fbe_allocation_size(fbe_value.uint64b2)
        + uint64b3.fbe_allocation_size(fbe_value.uint64b3)
        + uint64b4.fbe_allocation_size(fbe_value.uint64b4)
        + uint64b5.fbe_allocation_size(fbe_value.uint64b5)
        ;
    return fbe_result;
}

size_t FinalModel<::enums::Enums>::verify() const noexcept
{
    _buffer.shift(fbe_offset());
    size_t fbe_result = verify_fields();
    _buffer.unshift(fbe_offset());
    return fbe_result;
}

size_t FinalModel<::enums::Enums>::verify_fields() const noexcept
{
    size_t fbe_current_offset = 0;
    size_t fbe_field_size;

    byte0.fbe_offset(fbe_current_offset);
    fbe_field_size = byte0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    byte1.fbe_offset(fbe_current_offset);
    fbe_field_size = byte1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    byte2.fbe_offset(fbe_current_offset);
    fbe_field_size = byte2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    byte3.fbe_offset(fbe_current_offset);
    fbe_field_size = byte3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    byte4.fbe_offset(fbe_current_offset);
    fbe_field_size = byte4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    byte5.fbe_offset(fbe_current_offset);
    fbe_field_size = byte5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    char0.fbe_offset(fbe_current_offset);
    fbe_field_size = char0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    char1.fbe_offset(fbe_current_offset);
    fbe_field_size = char1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    char2.fbe_offset(fbe_current_offset);
    fbe_field_size = char2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    char3.fbe_offset(fbe_current_offset);
    fbe_field_size = char3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    char4.fbe_offset(fbe_current_offset);
    fbe_field_size = char4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    char5.fbe_offset(fbe_current_offset);
    fbe_field_size = char5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    wchar0.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    wchar1.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    wchar2.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    wchar3.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    wchar4.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    wchar5.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int8b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int8b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int8b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int8b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int8b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int8b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint8b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint8b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint8b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint8b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint8b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint8b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int16b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int16b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int16b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int16b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int16b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int16b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint16b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint16b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint16b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint16b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint16b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint16b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int32b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int32b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int32b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int32b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int32b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int32b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint32b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint32b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint32b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint32b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint32b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint32b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int64b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int64b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int64b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int64b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int64b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    int64b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint64b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b0.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint64b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b1.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint64b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b2.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint64b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b3.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint64b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b4.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    uint64b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b5.verify();
    if (fbe_field_size == std::numeric_limits<std::size_t>::max())
        return std::numeric_limits<std::size_t>::max();
    fbe_current_offset += fbe_field_size;

    return fbe_current_offset;
}

size_t FinalModel<::enums::Enums>::get(::enums::Enums& fbe_value) const noexcept
{
    _buffer.shift(fbe_offset());
    size_t fbe_result = get_fields(fbe_value);
    _buffer.unshift(fbe_offset());
    return fbe_result;
}

size_t FinalModel<::enums::Enums>::get_fields([[maybe_unused]] ::enums::Enums& fbe_value) const noexcept
{
    size_t fbe_current_offset = 0;
    size_t fbe_current_size = 0;
    size_t fbe_field_size;

    byte0.fbe_offset(fbe_current_offset);
    fbe_field_size = byte0.get(fbe_value.byte0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte1.fbe_offset(fbe_current_offset);
    fbe_field_size = byte1.get(fbe_value.byte1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte2.fbe_offset(fbe_current_offset);
    fbe_field_size = byte2.get(fbe_value.byte2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte3.fbe_offset(fbe_current_offset);
    fbe_field_size = byte3.get(fbe_value.byte3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte4.fbe_offset(fbe_current_offset);
    fbe_field_size = byte4.get(fbe_value.byte4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte5.fbe_offset(fbe_current_offset);
    fbe_field_size = byte5.get(fbe_value.byte5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char0.fbe_offset(fbe_current_offset);
    fbe_field_size = char0.get(fbe_value.char0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char1.fbe_offset(fbe_current_offset);
    fbe_field_size = char1.get(fbe_value.char1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char2.fbe_offset(fbe_current_offset);
    fbe_field_size = char2.get(fbe_value.char2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char3.fbe_offset(fbe_current_offset);
    fbe_field_size = char3.get(fbe_value.char3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char4.fbe_offset(fbe_current_offset);
    fbe_field_size = char4.get(fbe_value.char4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char5.fbe_offset(fbe_current_offset);
    fbe_field_size = char5.get(fbe_value.char5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar0.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar0.get(fbe_value.wchar0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar1.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar1.get(fbe_value.wchar1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar2.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar2.get(fbe_value.wchar2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar3.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar3.get(fbe_value.wchar3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar4.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar4.get(fbe_value.wchar4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar5.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar5.get(fbe_value.wchar5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b0.get(fbe_value.int8b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b1.get(fbe_value.int8b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b2.get(fbe_value.int8b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b3.get(fbe_value.int8b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b4.get(fbe_value.int8b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b5.get(fbe_value.int8b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b0.get(fbe_value.uint8b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b1.get(fbe_value.uint8b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b2.get(fbe_value.uint8b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b3.get(fbe_value.uint8b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b4.get(fbe_value.uint8b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b5.get(fbe_value.uint8b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b0.get(fbe_value.int16b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b1.get(fbe_value.int16b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b2.get(fbe_value.int16b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b3.get(fbe_value.int16b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b4.get(fbe_value.int16b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b5.get(fbe_value.int16b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b0.get(fbe_value.uint16b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b1.get(fbe_value.uint16b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b2.get(fbe_value.uint16b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b3.get(fbe_value.uint16b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b4.get(fbe_value.uint16b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b5.get(fbe_value.uint16b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b0.get(fbe_value.int32b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b1.get(fbe_value.int32b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b2.get(fbe_value.int32b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b3.get(fbe_value.int32b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b4.get(fbe_value.int32b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b5.get(fbe_value.int32b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b0.get(fbe_value.uint32b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b1.get(fbe_value.uint32b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b2.get(fbe_value.uint32b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b3.get(fbe_value.uint32b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b4.get(fbe_value.uint32b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b5.get(fbe_value.uint32b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b0.get(fbe_value.int64b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b1.get(fbe_value.int64b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b2.get(fbe_value.int64b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b3.get(fbe_value.int64b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b4.get(fbe_value.int64b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b5.get(fbe_value.int64b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b0.get(fbe_value.uint64b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b1.get(fbe_value.uint64b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b2.get(fbe_value.uint64b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b3.get(fbe_value.uint64b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b4.get(fbe_value.uint64b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b5.get(fbe_value.uint64b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    return fbe_current_size;
}

size_t FinalModel<::enums::Enums>::set(const ::enums::Enums& fbe_value) noexcept
{
    _buffer.shift(fbe_offset());
    size_t fbe_result = set_fields(fbe_value);
    _buffer.unshift(fbe_offset());
    return fbe_result;
}

size_t FinalModel<::enums::Enums>::set_fields([[maybe_unused]] const ::enums::Enums& fbe_value) noexcept
{
    size_t fbe_current_offset = 0;
    size_t fbe_current_size = 0;
    size_t fbe_field_size;

    byte0.fbe_offset(fbe_current_offset);
    fbe_field_size = byte0.set(fbe_value.byte0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte1.fbe_offset(fbe_current_offset);
    fbe_field_size = byte1.set(fbe_value.byte1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte2.fbe_offset(fbe_current_offset);
    fbe_field_size = byte2.set(fbe_value.byte2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte3.fbe_offset(fbe_current_offset);
    fbe_field_size = byte3.set(fbe_value.byte3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte4.fbe_offset(fbe_current_offset);
    fbe_field_size = byte4.set(fbe_value.byte4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    byte5.fbe_offset(fbe_current_offset);
    fbe_field_size = byte5.set(fbe_value.byte5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char0.fbe_offset(fbe_current_offset);
    fbe_field_size = char0.set(fbe_value.char0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char1.fbe_offset(fbe_current_offset);
    fbe_field_size = char1.set(fbe_value.char1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char2.fbe_offset(fbe_current_offset);
    fbe_field_size = char2.set(fbe_value.char2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char3.fbe_offset(fbe_current_offset);
    fbe_field_size = char3.set(fbe_value.char3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char4.fbe_offset(fbe_current_offset);
    fbe_field_size = char4.set(fbe_value.char4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    char5.fbe_offset(fbe_current_offset);
    fbe_field_size = char5.set(fbe_value.char5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar0.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar0.set(fbe_value.wchar0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar1.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar1.set(fbe_value.wchar1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar2.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar2.set(fbe_value.wchar2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar3.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar3.set(fbe_value.wchar3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar4.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar4.set(fbe_value.wchar4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    wchar5.fbe_offset(fbe_current_offset);
    fbe_field_size = wchar5.set(fbe_value.wchar5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b0.set(fbe_value.int8b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b1.set(fbe_value.int8b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b2.set(fbe_value.int8b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b3.set(fbe_value.int8b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b4.set(fbe_value.int8b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int8b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int8b5.set(fbe_value.int8b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b0.set(fbe_value.uint8b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b1.set(fbe_value.uint8b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b2.set(fbe_value.uint8b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b3.set(fbe_value.uint8b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b4.set(fbe_value.uint8b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint8b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint8b5.set(fbe_value.uint8b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b0.set(fbe_value.int16b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b1.set(fbe_value.int16b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b2.set(fbe_value.int16b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b3.set(fbe_value.int16b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b4.set(fbe_value.int16b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int16b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int16b5.set(fbe_value.int16b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b0.set(fbe_value.uint16b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b1.set(fbe_value.uint16b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b2.set(fbe_value.uint16b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b3.set(fbe_value.uint16b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b4.set(fbe_value.uint16b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint16b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint16b5.set(fbe_value.uint16b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b0.set(fbe_value.int32b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b1.set(fbe_value.int32b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b2.set(fbe_value.int32b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b3.set(fbe_value.int32b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b4.set(fbe_value.int32b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int32b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int32b5.set(fbe_value.int32b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b0.set(fbe_value.uint32b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b1.set(fbe_value.uint32b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b2.set(fbe_value.uint32b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b3.set(fbe_value.uint32b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b4.set(fbe_value.uint32b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint32b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint32b5.set(fbe_value.uint32b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b0.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b0.set(fbe_value.int64b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b1.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b1.set(fbe_value.int64b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b2.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b2.set(fbe_value.int64b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b3.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b3.set(fbe_value.int64b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b4.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b4.set(fbe_value.int64b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    int64b5.fbe_offset(fbe_current_offset);
    fbe_field_size = int64b5.set(fbe_value.int64b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b0.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b0.set(fbe_value.uint64b0);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b1.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b1.set(fbe_value.uint64b1);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b2.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b2.set(fbe_value.uint64b2);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b3.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b3.set(fbe_value.uint64b3);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b4.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b4.set(fbe_value.uint64b4);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    uint64b5.fbe_offset(fbe_current_offset);
    fbe_field_size = uint64b5.set(fbe_value.uint64b5);
    fbe_current_offset += fbe_field_size;
    fbe_current_size += fbe_field_size;

    return fbe_current_size;
}

namespace enums {

bool EnumsFinalModel::verify()
{
    if ((this->buffer().offset() + _model.fbe_offset()) > this->buffer().size())
        return false;

    size_t fbe_struct_size = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 8);
    size_t fbe_struct_type = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 4);
    if ((fbe_struct_size == 0) || (fbe_struct_type != fbe_type()))
        return false;

    return ((8 + _model.verify()) == fbe_struct_size);
}

size_t EnumsFinalModel::serialize(const ::enums::Enums& value)
{
    size_t fbe_initial_size = this->buffer().size();

    uint32_t fbe_struct_type = (uint32_t)fbe_type();
    uint32_t fbe_struct_size = (uint32_t)(8 + _model.fbe_allocation_size(value));
    uint32_t fbe_struct_offset = (uint32_t)(this->buffer().allocate(fbe_struct_size) - this->buffer().offset());
    assert(((this->buffer().offset() + fbe_struct_offset + fbe_struct_size) <= this->buffer().size()) && "Model is broken!");
    if ((this->buffer().offset() + fbe_struct_offset + fbe_struct_size) > this->buffer().size())
        return 0;

    fbe_struct_size = (uint32_t)(8 + _model.set(value));
    this->buffer().resize(fbe_initial_size + fbe_struct_size);

    *((uint32_t*)(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 8)) = fbe_struct_size;
    *((uint32_t*)(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 4)) = fbe_struct_type;

    return fbe_struct_size;
}

size_t EnumsFinalModel::deserialize(::enums::Enums& value) const noexcept
{
    assert(((this->buffer().offset() + _model.fbe_offset()) <= this->buffer().size()) && "Model is broken!");
    if ((this->buffer().offset() + _model.fbe_offset()) > this->buffer().size())
        return 0;

    size_t fbe_struct_size = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 8);
    size_t fbe_struct_type = unaligned_load<uint32_t>(this->buffer().data() + this->buffer().offset() + _model.fbe_offset() - 4);
    assert(((fbe_struct_size > 0) && (fbe_struct_type == fbe_type())) && "Model is broken!");
    if ((fbe_struct_size == 0) || (fbe_struct_type != fbe_type()))
        return 8;

    return 8 + _model.get(value);
}

} // namespace enums

} // namespace FBE
