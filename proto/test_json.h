//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: test.fbe
// FBE version: 1.10.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe_json.h"

#include "test.h"

#include "proto_json.h"

namespace FBE {

namespace JSON {

template <class TWriter>
struct ValueWriter<TWriter, ::test::EnumSimple>
{
    static bool to_json(TWriter& writer, const ::test::EnumSimple& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (int32_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::EnumSimple>
{
    static bool from_json(const TJson& json, ::test::EnumSimple& value)
    {
        int32_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::test::EnumSimple)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::EnumTyped>
{
    static bool to_json(TWriter& writer, const ::test::EnumTyped& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (uint8_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::EnumTyped>
{
    static bool from_json(const TJson& json, ::test::EnumTyped& value)
    {
        uint8_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::test::EnumTyped)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::EnumEmpty>
{
    static bool to_json(TWriter& writer, const ::test::EnumEmpty& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (int32_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::EnumEmpty>
{
    static bool from_json(const TJson& json, ::test::EnumEmpty& value)
    {
        int32_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::test::EnumEmpty)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::FlagsSimple>
{
    static bool to_json(TWriter& writer, const ::test::FlagsSimple& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (int32_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::FlagsSimple>
{
    static bool from_json(const TJson& json, ::test::FlagsSimple& value)
    {
        int32_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::test::FlagsSimple)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::FlagsTyped>
{
    static bool to_json(TWriter& writer, const ::test::FlagsTyped& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (uint64_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::FlagsTyped>
{
    static bool from_json(const TJson& json, ::test::FlagsTyped& value)
    {
        uint64_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::test::FlagsTyped)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::FlagsEmpty>
{
    static bool to_json(TWriter& writer, const ::test::FlagsEmpty& value, bool scope = true)
    {
        return FBE::JSON::to_json(writer, (int32_t)value);
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::FlagsEmpty>
{
    static bool from_json(const TJson& json, ::test::FlagsEmpty& value)
    {
        int32_t raw;
        if (!FBE::JSON::from_json(json, raw))
            return false;

        value = (::test::FlagsEmpty)raw;
        return true;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructSimple>
{
    static bool to_json(TWriter& writer, const ::test::StructSimple& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "id") || !FBE::JSON::to_json(writer, value.id, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f8") || !FBE::JSON::to_json(writer, value.f8, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f9") || !FBE::JSON::to_json(writer, value.f9, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f10") || !FBE::JSON::to_json(writer, value.f10, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f11") || !FBE::JSON::to_json(writer, value.f11, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f12") || !FBE::JSON::to_json(writer, value.f12, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f13") || !FBE::JSON::to_json(writer, value.f13, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f14") || !FBE::JSON::to_json(writer, value.f14, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f15") || !FBE::JSON::to_json(writer, value.f15, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f16") || !FBE::JSON::to_json(writer, value.f16, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f17") || !FBE::JSON::to_json(writer, value.f17, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f18") || !FBE::JSON::to_json(writer, value.f18, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f19") || !FBE::JSON::to_json(writer, value.f19, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f20") || !FBE::JSON::to_json(writer, value.f20, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f21") || !FBE::JSON::to_json(writer, value.f21, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f22") || !FBE::JSON::to_json(writer, value.f22, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f23") || !FBE::JSON::to_json(writer, value.f23, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f24") || !FBE::JSON::to_json(writer, value.f24, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f25") || !FBE::JSON::to_json(writer, value.f25, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f26") || !FBE::JSON::to_json(writer, value.f26, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f27") || !FBE::JSON::to_json(writer, value.f27, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f28") || !FBE::JSON::to_json(writer, value.f28, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f29") || !FBE::JSON::to_json(writer, value.f29, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f30") || !FBE::JSON::to_json(writer, value.f30, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f31") || !FBE::JSON::to_json(writer, value.f31, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f32") || !FBE::JSON::to_json(writer, value.f32, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f33") || !FBE::JSON::to_json(writer, value.f33, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f34") || !FBE::JSON::to_json(writer, value.f34, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f35") || !FBE::JSON::to_json(writer, value.f35, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f36") || !FBE::JSON::to_json(writer, value.f36, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f37") || !FBE::JSON::to_json(writer, value.f37, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f38") || !FBE::JSON::to_json(writer, value.f38, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f39") || !FBE::JSON::to_json(writer, value.f39, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f40") || !FBE::JSON::to_json(writer, value.f40, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f41") || !FBE::JSON::to_json(writer, value.f41, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f42") || !FBE::JSON::to_json(writer, value.f42, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f43") || !FBE::JSON::to_json(writer, value.f43, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f44") || !FBE::JSON::to_json(writer, value.f44, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructSimple>
{
    static bool from_json(const TJson& json, ::test::StructSimple& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.id, "id");
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        result &= FBE::JSON::from_json(json, value.f8, "f8");
        result &= FBE::JSON::from_json(json, value.f9, "f9");
        result &= FBE::JSON::from_json(json, value.f10, "f10");
        result &= FBE::JSON::from_json(json, value.f11, "f11");
        result &= FBE::JSON::from_json(json, value.f12, "f12");
        result &= FBE::JSON::from_json(json, value.f13, "f13");
        result &= FBE::JSON::from_json(json, value.f14, "f14");
        result &= FBE::JSON::from_json(json, value.f15, "f15");
        result &= FBE::JSON::from_json(json, value.f16, "f16");
        result &= FBE::JSON::from_json(json, value.f17, "f17");
        result &= FBE::JSON::from_json(json, value.f18, "f18");
        result &= FBE::JSON::from_json(json, value.f19, "f19");
        result &= FBE::JSON::from_json(json, value.f20, "f20");
        result &= FBE::JSON::from_json(json, value.f21, "f21");
        result &= FBE::JSON::from_json(json, value.f22, "f22");
        result &= FBE::JSON::from_json(json, value.f23, "f23");
        result &= FBE::JSON::from_json(json, value.f24, "f24");
        result &= FBE::JSON::from_json(json, value.f25, "f25");
        result &= FBE::JSON::from_json(json, value.f26, "f26");
        result &= FBE::JSON::from_json(json, value.f27, "f27");
        result &= FBE::JSON::from_json(json, value.f28, "f28");
        result &= FBE::JSON::from_json(json, value.f29, "f29");
        result &= FBE::JSON::from_json(json, value.f30, "f30");
        result &= FBE::JSON::from_json(json, value.f31, "f31");
        result &= FBE::JSON::from_json(json, value.f32, "f32");
        result &= FBE::JSON::from_json(json, value.f33, "f33");
        result &= FBE::JSON::from_json(json, value.f34, "f34");
        result &= FBE::JSON::from_json(json, value.f35, "f35");
        result &= FBE::JSON::from_json(json, value.f36, "f36");
        result &= FBE::JSON::from_json(json, value.f37, "f37");
        result &= FBE::JSON::from_json(json, value.f38, "f38");
        result &= FBE::JSON::from_json(json, value.f39, "f39");
        result &= FBE::JSON::from_json(json, value.f40, "f40");
        result &= FBE::JSON::from_json(json, value.f41, "f41");
        result &= FBE::JSON::from_json(json, value.f42, "f42");
        result &= FBE::JSON::from_json(json, value.f43, "f43");
        result &= FBE::JSON::from_json(json, value.f44, "f44");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructOptional>
{
    static bool to_json(TWriter& writer, const ::test::StructOptional& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json(writer, (const ::test::StructSimple&)value, false))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f100") || !FBE::JSON::to_json(writer, value.f100, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f101") || !FBE::JSON::to_json(writer, value.f101, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f102") || !FBE::JSON::to_json(writer, value.f102, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f103") || !FBE::JSON::to_json(writer, value.f103, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f104") || !FBE::JSON::to_json(writer, value.f104, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f105") || !FBE::JSON::to_json(writer, value.f105, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f106") || !FBE::JSON::to_json(writer, value.f106, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f107") || !FBE::JSON::to_json(writer, value.f107, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f108") || !FBE::JSON::to_json(writer, value.f108, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f109") || !FBE::JSON::to_json(writer, value.f109, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f110") || !FBE::JSON::to_json(writer, value.f110, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f111") || !FBE::JSON::to_json(writer, value.f111, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f112") || !FBE::JSON::to_json(writer, value.f112, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f113") || !FBE::JSON::to_json(writer, value.f113, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f114") || !FBE::JSON::to_json(writer, value.f114, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f115") || !FBE::JSON::to_json(writer, value.f115, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f116") || !FBE::JSON::to_json(writer, value.f116, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f117") || !FBE::JSON::to_json(writer, value.f117, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f118") || !FBE::JSON::to_json(writer, value.f118, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f119") || !FBE::JSON::to_json(writer, value.f119, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f120") || !FBE::JSON::to_json(writer, value.f120, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f121") || !FBE::JSON::to_json(writer, value.f121, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f122") || !FBE::JSON::to_json(writer, value.f122, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f123") || !FBE::JSON::to_json(writer, value.f123, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f124") || !FBE::JSON::to_json(writer, value.f124, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f125") || !FBE::JSON::to_json(writer, value.f125, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f126") || !FBE::JSON::to_json(writer, value.f126, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f127") || !FBE::JSON::to_json(writer, value.f127, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f128") || !FBE::JSON::to_json(writer, value.f128, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f129") || !FBE::JSON::to_json(writer, value.f129, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f130") || !FBE::JSON::to_json(writer, value.f130, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f131") || !FBE::JSON::to_json(writer, value.f131, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f132") || !FBE::JSON::to_json(writer, value.f132, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f133") || !FBE::JSON::to_json(writer, value.f133, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f134") || !FBE::JSON::to_json(writer, value.f134, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f135") || !FBE::JSON::to_json(writer, value.f135, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f136") || !FBE::JSON::to_json(writer, value.f136, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f137") || !FBE::JSON::to_json(writer, value.f137, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f138") || !FBE::JSON::to_json(writer, value.f138, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f139") || !FBE::JSON::to_json(writer, value.f139, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f140") || !FBE::JSON::to_json(writer, value.f140, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f141") || !FBE::JSON::to_json(writer, value.f141, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f142") || !FBE::JSON::to_json(writer, value.f142, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f143") || !FBE::JSON::to_json(writer, value.f143, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f144") || !FBE::JSON::to_json(writer, value.f144, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f145") || !FBE::JSON::to_json(writer, value.f145, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f146") || !FBE::JSON::to_json(writer, value.f146, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f147") || !FBE::JSON::to_json(writer, value.f147, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f148") || !FBE::JSON::to_json(writer, value.f148, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f149") || !FBE::JSON::to_json(writer, value.f149, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f150") || !FBE::JSON::to_json(writer, value.f150, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f151") || !FBE::JSON::to_json(writer, value.f151, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f152") || !FBE::JSON::to_json(writer, value.f152, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f153") || !FBE::JSON::to_json(writer, value.f153, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f154") || !FBE::JSON::to_json(writer, value.f154, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f155") || !FBE::JSON::to_json(writer, value.f155, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f156") || !FBE::JSON::to_json(writer, value.f156, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f157") || !FBE::JSON::to_json(writer, value.f157, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f158") || !FBE::JSON::to_json(writer, value.f158, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f159") || !FBE::JSON::to_json(writer, value.f159, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f160") || !FBE::JSON::to_json(writer, value.f160, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f161") || !FBE::JSON::to_json(writer, value.f161, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f162") || !FBE::JSON::to_json(writer, value.f162, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f163") || !FBE::JSON::to_json(writer, value.f163, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f164") || !FBE::JSON::to_json(writer, value.f164, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f165") || !FBE::JSON::to_json(writer, value.f165, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructOptional>
{
    static bool from_json(const TJson& json, ::test::StructOptional& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, (::test::StructSimple&)value);
        result &= FBE::JSON::from_json(json, value.f100, "f100");
        result &= FBE::JSON::from_json(json, value.f101, "f101");
        result &= FBE::JSON::from_json(json, value.f102, "f102");
        result &= FBE::JSON::from_json(json, value.f103, "f103");
        result &= FBE::JSON::from_json(json, value.f104, "f104");
        result &= FBE::JSON::from_json(json, value.f105, "f105");
        result &= FBE::JSON::from_json(json, value.f106, "f106");
        result &= FBE::JSON::from_json(json, value.f107, "f107");
        result &= FBE::JSON::from_json(json, value.f108, "f108");
        result &= FBE::JSON::from_json(json, value.f109, "f109");
        result &= FBE::JSON::from_json(json, value.f110, "f110");
        result &= FBE::JSON::from_json(json, value.f111, "f111");
        result &= FBE::JSON::from_json(json, value.f112, "f112");
        result &= FBE::JSON::from_json(json, value.f113, "f113");
        result &= FBE::JSON::from_json(json, value.f114, "f114");
        result &= FBE::JSON::from_json(json, value.f115, "f115");
        result &= FBE::JSON::from_json(json, value.f116, "f116");
        result &= FBE::JSON::from_json(json, value.f117, "f117");
        result &= FBE::JSON::from_json(json, value.f118, "f118");
        result &= FBE::JSON::from_json(json, value.f119, "f119");
        result &= FBE::JSON::from_json(json, value.f120, "f120");
        result &= FBE::JSON::from_json(json, value.f121, "f121");
        result &= FBE::JSON::from_json(json, value.f122, "f122");
        result &= FBE::JSON::from_json(json, value.f123, "f123");
        result &= FBE::JSON::from_json(json, value.f124, "f124");
        result &= FBE::JSON::from_json(json, value.f125, "f125");
        result &= FBE::JSON::from_json(json, value.f126, "f126");
        result &= FBE::JSON::from_json(json, value.f127, "f127");
        result &= FBE::JSON::from_json(json, value.f128, "f128");
        result &= FBE::JSON::from_json(json, value.f129, "f129");
        result &= FBE::JSON::from_json(json, value.f130, "f130");
        result &= FBE::JSON::from_json(json, value.f131, "f131");
        result &= FBE::JSON::from_json(json, value.f132, "f132");
        result &= FBE::JSON::from_json(json, value.f133, "f133");
        result &= FBE::JSON::from_json(json, value.f134, "f134");
        result &= FBE::JSON::from_json(json, value.f135, "f135");
        result &= FBE::JSON::from_json(json, value.f136, "f136");
        result &= FBE::JSON::from_json(json, value.f137, "f137");
        result &= FBE::JSON::from_json(json, value.f138, "f138");
        result &= FBE::JSON::from_json(json, value.f139, "f139");
        result &= FBE::JSON::from_json(json, value.f140, "f140");
        result &= FBE::JSON::from_json(json, value.f141, "f141");
        result &= FBE::JSON::from_json(json, value.f142, "f142");
        result &= FBE::JSON::from_json(json, value.f143, "f143");
        result &= FBE::JSON::from_json(json, value.f144, "f144");
        result &= FBE::JSON::from_json(json, value.f145, "f145");
        result &= FBE::JSON::from_json(json, value.f146, "f146");
        result &= FBE::JSON::from_json(json, value.f147, "f147");
        result &= FBE::JSON::from_json(json, value.f148, "f148");
        result &= FBE::JSON::from_json(json, value.f149, "f149");
        result &= FBE::JSON::from_json(json, value.f150, "f150");
        result &= FBE::JSON::from_json(json, value.f151, "f151");
        result &= FBE::JSON::from_json(json, value.f152, "f152");
        result &= FBE::JSON::from_json(json, value.f153, "f153");
        result &= FBE::JSON::from_json(json, value.f154, "f154");
        result &= FBE::JSON::from_json(json, value.f155, "f155");
        result &= FBE::JSON::from_json(json, value.f156, "f156");
        result &= FBE::JSON::from_json(json, value.f157, "f157");
        result &= FBE::JSON::from_json(json, value.f158, "f158");
        result &= FBE::JSON::from_json(json, value.f159, "f159");
        result &= FBE::JSON::from_json(json, value.f160, "f160");
        result &= FBE::JSON::from_json(json, value.f161, "f161");
        result &= FBE::JSON::from_json(json, value.f162, "f162");
        result &= FBE::JSON::from_json(json, value.f163, "f163");
        result &= FBE::JSON::from_json(json, value.f164, "f164");
        result &= FBE::JSON::from_json(json, value.f165, "f165");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructNested>
{
    static bool to_json(TWriter& writer, const ::test::StructNested& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json(writer, (const ::test::StructOptional&)value, false))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1000") || !FBE::JSON::to_json(writer, value.f1000, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1001") || !FBE::JSON::to_json(writer, value.f1001, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1002") || !FBE::JSON::to_json(writer, value.f1002, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1003") || !FBE::JSON::to_json(writer, value.f1003, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1004") || !FBE::JSON::to_json(writer, value.f1004, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1005") || !FBE::JSON::to_json(writer, value.f1005, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1006") || !FBE::JSON::to_json(writer, value.f1006, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1007") || !FBE::JSON::to_json(writer, value.f1007, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1008") || !FBE::JSON::to_json(writer, value.f1008, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1009") || !FBE::JSON::to_json(writer, value.f1009, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1010") || !FBE::JSON::to_json(writer, value.f1010, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f1011") || !FBE::JSON::to_json(writer, value.f1011, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructNested>
{
    static bool from_json(const TJson& json, ::test::StructNested& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, (::test::StructOptional&)value);
        result &= FBE::JSON::from_json(json, value.f1000, "f1000");
        result &= FBE::JSON::from_json(json, value.f1001, "f1001");
        result &= FBE::JSON::from_json(json, value.f1002, "f1002");
        result &= FBE::JSON::from_json(json, value.f1003, "f1003");
        result &= FBE::JSON::from_json(json, value.f1004, "f1004");
        result &= FBE::JSON::from_json(json, value.f1005, "f1005");
        result &= FBE::JSON::from_json(json, value.f1006, "f1006");
        result &= FBE::JSON::from_json(json, value.f1007, "f1007");
        result &= FBE::JSON::from_json(json, value.f1008, "f1008");
        result &= FBE::JSON::from_json(json, value.f1009, "f1009");
        result &= FBE::JSON::from_json(json, value.f1010, "f1010");
        result &= FBE::JSON::from_json(json, value.f1011, "f1011");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructBytes>
{
    static bool to_json(TWriter& writer, const ::test::StructBytes& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructBytes>
{
    static bool from_json(const TJson& json, ::test::StructBytes& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructArray>
{
    static bool to_json(TWriter& writer, const ::test::StructArray& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f8") || !FBE::JSON::to_json(writer, value.f8, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f9") || !FBE::JSON::to_json(writer, value.f9, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f10") || !FBE::JSON::to_json(writer, value.f10, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructArray>
{
    static bool from_json(const TJson& json, ::test::StructArray& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        result &= FBE::JSON::from_json(json, value.f8, "f8");
        result &= FBE::JSON::from_json(json, value.f9, "f9");
        result &= FBE::JSON::from_json(json, value.f10, "f10");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructVector>
{
    static bool to_json(TWriter& writer, const ::test::StructVector& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f8") || !FBE::JSON::to_json(writer, value.f8, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f9") || !FBE::JSON::to_json(writer, value.f9, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f10") || !FBE::JSON::to_json(writer, value.f10, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructVector>
{
    static bool from_json(const TJson& json, ::test::StructVector& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        result &= FBE::JSON::from_json(json, value.f8, "f8");
        result &= FBE::JSON::from_json(json, value.f9, "f9");
        result &= FBE::JSON::from_json(json, value.f10, "f10");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructList>
{
    static bool to_json(TWriter& writer, const ::test::StructList& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f8") || !FBE::JSON::to_json(writer, value.f8, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f9") || !FBE::JSON::to_json(writer, value.f9, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f10") || !FBE::JSON::to_json(writer, value.f10, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructList>
{
    static bool from_json(const TJson& json, ::test::StructList& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        result &= FBE::JSON::from_json(json, value.f8, "f8");
        result &= FBE::JSON::from_json(json, value.f9, "f9");
        result &= FBE::JSON::from_json(json, value.f10, "f10");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructSet>
{
    static bool to_json(TWriter& writer, const ::test::StructSet& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructSet>
{
    static bool from_json(const TJson& json, ::test::StructSet& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructMap>
{
    static bool to_json(TWriter& writer, const ::test::StructMap& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f8") || !FBE::JSON::to_json(writer, value.f8, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f9") || !FBE::JSON::to_json(writer, value.f9, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f10") || !FBE::JSON::to_json(writer, value.f10, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructMap>
{
    static bool from_json(const TJson& json, ::test::StructMap& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        result &= FBE::JSON::from_json(json, value.f8, "f8");
        result &= FBE::JSON::from_json(json, value.f9, "f9");
        result &= FBE::JSON::from_json(json, value.f10, "f10");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructHash>
{
    static bool to_json(TWriter& writer, const ::test::StructHash& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f3") || !FBE::JSON::to_json(writer, value.f3, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f4") || !FBE::JSON::to_json(writer, value.f4, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f5") || !FBE::JSON::to_json(writer, value.f5, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f6") || !FBE::JSON::to_json(writer, value.f6, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f7") || !FBE::JSON::to_json(writer, value.f7, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f8") || !FBE::JSON::to_json(writer, value.f8, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f9") || !FBE::JSON::to_json(writer, value.f9, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f10") || !FBE::JSON::to_json(writer, value.f10, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructHash>
{
    static bool from_json(const TJson& json, ::test::StructHash& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        result &= FBE::JSON::from_json(json, value.f3, "f3");
        result &= FBE::JSON::from_json(json, value.f4, "f4");
        result &= FBE::JSON::from_json(json, value.f5, "f5");
        result &= FBE::JSON::from_json(json, value.f6, "f6");
        result &= FBE::JSON::from_json(json, value.f7, "f7");
        result &= FBE::JSON::from_json(json, value.f8, "f8");
        result &= FBE::JSON::from_json(json, value.f9, "f9");
        result &= FBE::JSON::from_json(json, value.f10, "f10");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructHashEx>
{
    static bool to_json(TWriter& writer, const ::test::StructHashEx& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (!FBE::JSON::to_json_key(writer, "f1") || !FBE::JSON::to_json(writer, value.f1, true))
            return false;
        if (!FBE::JSON::to_json_key(writer, "f2") || !FBE::JSON::to_json(writer, value.f2, true))
            return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructHashEx>
{
    static bool from_json(const TJson& json, ::test::StructHashEx& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        result &= FBE::JSON::from_json(json, value.f1, "f1");
        result &= FBE::JSON::from_json(json, value.f2, "f2");
        return result;
    }
};

template <class TWriter>
struct ValueWriter<TWriter, ::test::StructEmpty>
{
    static bool to_json(TWriter& writer, const ::test::StructEmpty& value, bool scope = true)
    {
        if (scope)
            if (!writer.StartObject())
                return false;
        if (scope)
            if (!writer.EndObject())
                return false;
        return true;
    }
};

template <class TJson>
struct ValueReader<TJson, ::test::StructEmpty>
{
    static bool from_json(const TJson& json, ::test::StructEmpty& value, const char* key = nullptr)
    {
        if (key != nullptr)
            return FBE::JSON::from_json_child(json, value, key);
        bool result = true;
        return result;
    }
};

} // namespace JSON

} // namespace FBE
