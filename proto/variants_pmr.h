//------------------------------------------------------------------------------
// Automatically generated by the Fast Binary Encoding compiler, do not modify!
// https://github.com/chronoxor/FastBinaryEncoding
// Source: variants.fbe
// FBE version: 1.11.0.0
//------------------------------------------------------------------------------

#pragma once

#ifdef isset
#undef isset
#endif

#if defined(__clang__)
#pragma clang system_header
#elif defined(__GNUC__)
#pragma GCC system_header
#elif defined(_MSC_VER)
#pragma system_header
#endif

#include "fbe.h"
#include "arena/arena.hpp"

namespace variants_pmr {
using namespace FBE;
using allocator_type = pmr::polymorphic_allocator<char>;
} // namespace variants_pmr

namespace FBE {
using namespace ::variants_pmr;
} // namespace FBE

namespace variants_pmr {
// forward declaration
struct Simple;
struct Value;

using Expr = std::variant<std::monostate, bool, int32_t, ArenaString>;
std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Expr& value);

using V = std::variant<std::monostate, ArenaString, int32_t, double, ::variants_pmr::Simple, pmr::vector<::variants_pmr::Simple>, pmr::vector<int32_t>, pmr::unordered_map<int32_t, ::variants_pmr::Simple>, pmr::vector<FBE::pmr_buffer_t>, pmr::vector<ArenaString>, pmr::unordered_map<int32_t, FBE::pmr_buffer_t>, pmr::unordered_map<ArenaString, FBE::pmr_buffer_t>, ::variants_pmr::Expr>;
std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const V& value);

struct Simple
{
    ArenaManagedCreateOnlyTag;

    ArenaString name;

    size_t fbe_type() const noexcept { return 1; }

    Simple();
    explicit Simple(allocator_type alloc);
    explicit Simple(const ArenaString& arg_name);
    Simple(const Simple& other) = default;
    Simple(Simple&& other) = default;
    ~Simple() = default;

    Simple& operator=(const Simple& other) = default;
    Simple& operator=(Simple&& other) = default;

    bool operator==(const Simple& other) const noexcept;
    bool operator!=(const Simple& other) const noexcept { return !operator==(other); }
    bool operator<(const Simple& other) const noexcept;
    bool operator<=(const Simple& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Simple& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Simple& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Simple& value);

    void swap(Simple& other) noexcept;
    friend void swap(Simple& value1, Simple& value2) noexcept { value1.swap(value2); }
};

} // namespace variants_pmr

template<>
struct std::hash<variants_pmr::Simple>
{
    typedef variants_pmr::Simple argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace variants_pmr {

struct Value
{
    ArenaManagedCreateOnlyTag;

    ::variants_pmr::V v;

    size_t fbe_type() const noexcept { return 2; }

    Value();
    explicit Value(allocator_type alloc);
    explicit Value(const ::variants_pmr::V& arg_v);
    Value(const Value& other) = default;
    Value(Value&& other) = default;
    ~Value() = default;

    Value& operator=(const Value& other) = default;
    Value& operator=(Value&& other) = default;

    bool operator==(const Value& other) const noexcept;
    bool operator!=(const Value& other) const noexcept { return !operator==(other); }
    bool operator<(const Value& other) const noexcept;
    bool operator<=(const Value& other) const noexcept { return operator<(other) || operator==(other); }
    bool operator>(const Value& other) const noexcept { return !operator<=(other); }
    bool operator>=(const Value& other) const noexcept { return !operator<(other); }

    std::string string() const;

    friend std::ostream& operator<<(std::ostream& stream, [[maybe_unused]] const Value& value);

    void swap(Value& other) noexcept;
    friend void swap(Value& value1, Value& value2) noexcept { value1.swap(value2); }
};

} // namespace variants_pmr

template<>
struct std::hash<variants_pmr::Value>
{
    typedef variants_pmr::Value argument_type;
    typedef size_t result_type;

    result_type operator() ([[maybe_unused]] const argument_type& value) const
    {
        result_type result = 17;
        return result;
    }
};

namespace variants_pmr {

} // namespace variants_pmr
